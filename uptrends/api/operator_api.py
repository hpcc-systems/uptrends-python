# coding: utf-8

"""
    Uptrends API v4

    This document describes Uptrends API version 4. This Swagger environment also lets you execute API methods directly.  Please note that this is not a sandbox environment: these API methods operate directly on your actual Uptrends account.  For more information, please visit https://www.uptrends.com/api.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from uptrends.api_client import ApiClient


class OperatorApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def operator_add_duty_period_for_operator(self, schedule, operator_guid, **kwargs):  # noqa: E501
        """Adds a duty schedule to the specified operator.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.operator_add_duty_period_for_operator(schedule, operator_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OperatorDutySchedule schedule: The duty schedule to add (required)
        :param str operator_guid: The Guid of the operator to add the duty schedule to (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.operator_add_duty_period_for_operator_with_http_info(schedule, operator_guid, **kwargs)  # noqa: E501
        else:
            (data) = self.operator_add_duty_period_for_operator_with_http_info(schedule, operator_guid, **kwargs)  # noqa: E501
            return data

    def operator_add_duty_period_for_operator_with_http_info(self, schedule, operator_guid, **kwargs):  # noqa: E501
        """Adds a duty schedule to the specified operator.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.operator_add_duty_period_for_operator_with_http_info(schedule, operator_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OperatorDutySchedule schedule: The duty schedule to add (required)
        :param str operator_guid: The Guid of the operator to add the duty schedule to (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['schedule', 'operator_guid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method operator_add_duty_period_for_operator" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'schedule' is set
        if ('schedule' not in params or
                params['schedule'] is None):
            raise ValueError("Missing the required parameter `schedule` when calling `operator_add_duty_period_for_operator`")  # noqa: E501
        # verify the required parameter 'operator_guid' is set
        if ('operator_guid' not in params or
                params['operator_guid'] is None):
            raise ValueError("Missing the required parameter `operator_guid` when calling `operator_add_duty_period_for_operator`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'operator_guid' in params:
            path_params['operatorGuid'] = params['operator_guid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'schedule' in params:
            body_params = params['schedule']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/Operator/{operatorGuid}/DutySchedule', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def operator_create_operator(self, uptrends_operator, **kwargs):  # noqa: E501
        """Creates a new operator.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.operator_create_operator(uptrends_operator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Operator uptrends_operator: The details of the operator to create (required)
        :return: Operator
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.operator_create_operator_with_http_info(uptrends_operator, **kwargs)  # noqa: E501
        else:
            (data) = self.operator_create_operator_with_http_info(uptrends_operator, **kwargs)  # noqa: E501
            return data

    def operator_create_operator_with_http_info(self, uptrends_operator, **kwargs):  # noqa: E501
        """Creates a new operator.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.operator_create_operator_with_http_info(uptrends_operator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Operator uptrends_operator: The details of the operator to create (required)
        :return: Operator
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uptrends_operator']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method operator_create_operator" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uptrends_operator' is set
        if ('uptrends_operator' not in params or
                params['uptrends_operator'] is None):
            raise ValueError("Missing the required parameter `uptrends_operator` when calling `operator_create_operator`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'uptrends_operator' in params:
            body_params = params['uptrends_operator']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/Operator', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Operator',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def operator_delete_authorization_for_operator(self, operator_guid, authorization_type, **kwargs):  # noqa: E501
        """Removes the specified authorization of this operator.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.operator_delete_authorization_for_operator(operator_guid, authorization_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str operator_guid: The Guid of the operator (required)
        :param str authorization_type: The type of authorization (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.operator_delete_authorization_for_operator_with_http_info(operator_guid, authorization_type, **kwargs)  # noqa: E501
        else:
            (data) = self.operator_delete_authorization_for_operator_with_http_info(operator_guid, authorization_type, **kwargs)  # noqa: E501
            return data

    def operator_delete_authorization_for_operator_with_http_info(self, operator_guid, authorization_type, **kwargs):  # noqa: E501
        """Removes the specified authorization of this operator.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.operator_delete_authorization_for_operator_with_http_info(operator_guid, authorization_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str operator_guid: The Guid of the operator (required)
        :param str authorization_type: The type of authorization (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['operator_guid', 'authorization_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method operator_delete_authorization_for_operator" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'operator_guid' is set
        if ('operator_guid' not in params or
                params['operator_guid'] is None):
            raise ValueError("Missing the required parameter `operator_guid` when calling `operator_delete_authorization_for_operator`")  # noqa: E501
        # verify the required parameter 'authorization_type' is set
        if ('authorization_type' not in params or
                params['authorization_type'] is None):
            raise ValueError("Missing the required parameter `authorization_type` when calling `operator_delete_authorization_for_operator`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'operator_guid' in params:
            path_params['operatorGuid'] = params['operator_guid']  # noqa: E501
        if 'authorization_type' in params:
            path_params['authorizationType'] = params['authorization_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/Operator/{operatorGuid}/Authorization/{authorizationType}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def operator_delete_duty_schedule_from_operator(self, operator_guid, duty_schedule_id, **kwargs):  # noqa: E501
        """Deletes the specified duty schedule of the specified operator.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.operator_delete_duty_schedule_from_operator(operator_guid, duty_schedule_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str operator_guid: (required)
        :param int duty_schedule_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.operator_delete_duty_schedule_from_operator_with_http_info(operator_guid, duty_schedule_id, **kwargs)  # noqa: E501
        else:
            (data) = self.operator_delete_duty_schedule_from_operator_with_http_info(operator_guid, duty_schedule_id, **kwargs)  # noqa: E501
            return data

    def operator_delete_duty_schedule_from_operator_with_http_info(self, operator_guid, duty_schedule_id, **kwargs):  # noqa: E501
        """Deletes the specified duty schedule of the specified operator.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.operator_delete_duty_schedule_from_operator_with_http_info(operator_guid, duty_schedule_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str operator_guid: (required)
        :param int duty_schedule_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['operator_guid', 'duty_schedule_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method operator_delete_duty_schedule_from_operator" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'operator_guid' is set
        if ('operator_guid' not in params or
                params['operator_guid'] is None):
            raise ValueError("Missing the required parameter `operator_guid` when calling `operator_delete_duty_schedule_from_operator`")  # noqa: E501
        # verify the required parameter 'duty_schedule_id' is set
        if ('duty_schedule_id' not in params or
                params['duty_schedule_id'] is None):
            raise ValueError("Missing the required parameter `duty_schedule_id` when calling `operator_delete_duty_schedule_from_operator`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'operator_guid' in params:
            path_params['operatorGuid'] = params['operator_guid']  # noqa: E501
        if 'duty_schedule_id' in params:
            path_params['dutyScheduleId'] = params['duty_schedule_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/Operator/{operatorGuid}/DutySchedule/{dutyScheduleId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def operator_delete_operator(self, operator_guid, **kwargs):  # noqa: E501
        """Deletes an existing operator.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.operator_delete_operator(operator_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str operator_guid: The Guid of the operator to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.operator_delete_operator_with_http_info(operator_guid, **kwargs)  # noqa: E501
        else:
            (data) = self.operator_delete_operator_with_http_info(operator_guid, **kwargs)  # noqa: E501
            return data

    def operator_delete_operator_with_http_info(self, operator_guid, **kwargs):  # noqa: E501
        """Deletes an existing operator.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.operator_delete_operator_with_http_info(operator_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str operator_guid: The Guid of the operator to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['operator_guid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method operator_delete_operator" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'operator_guid' is set
        if ('operator_guid' not in params or
                params['operator_guid'] is None):
            raise ValueError("Missing the required parameter `operator_guid` when calling `operator_delete_operator`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'operator_guid' in params:
            path_params['operatorGuid'] = params['operator_guid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/Operator/{operatorGuid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def operator_get_all_operators(self, **kwargs):  # noqa: E501
        """Gets a list of all operators.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.operator_get_all_operators(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Operator]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.operator_get_all_operators_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.operator_get_all_operators_with_http_info(**kwargs)  # noqa: E501
            return data

    def operator_get_all_operators_with_http_info(self, **kwargs):  # noqa: E501
        """Gets a list of all operators.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.operator_get_all_operators_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Operator]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method operator_get_all_operators" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/Operator', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Operator]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def operator_get_authorizations_for_operator(self, operator_guid, **kwargs):  # noqa: E501
        """Gets all authorizations for the specified operator.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.operator_get_authorizations_for_operator(operator_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str operator_guid: The Guid of the operator (required)
        :return: list[AuthorizationTypeWithoutContext]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.operator_get_authorizations_for_operator_with_http_info(operator_guid, **kwargs)  # noqa: E501
        else:
            (data) = self.operator_get_authorizations_for_operator_with_http_info(operator_guid, **kwargs)  # noqa: E501
            return data

    def operator_get_authorizations_for_operator_with_http_info(self, operator_guid, **kwargs):  # noqa: E501
        """Gets all authorizations for the specified operator.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.operator_get_authorizations_for_operator_with_http_info(operator_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str operator_guid: The Guid of the operator (required)
        :return: list[AuthorizationTypeWithoutContext]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['operator_guid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method operator_get_authorizations_for_operator" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'operator_guid' is set
        if ('operator_guid' not in params or
                params['operator_guid'] is None):
            raise ValueError("Missing the required parameter `operator_guid` when calling `operator_get_authorizations_for_operator`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'operator_guid' in params:
            path_params['operatorGuid'] = params['operator_guid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/Operator/{operatorGuid}/Authorization', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AuthorizationTypeWithoutContext]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def operator_get_duty_schedule_for_operator(self, operator_guid, **kwargs):  # noqa: E501
        """Gets the duty schedules for an specified operator.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.operator_get_duty_schedule_for_operator(operator_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str operator_guid: The Guid of the operator to get the duty schedule for (required)
        :return: list[OperatorDutySchedule]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.operator_get_duty_schedule_for_operator_with_http_info(operator_guid, **kwargs)  # noqa: E501
        else:
            (data) = self.operator_get_duty_schedule_for_operator_with_http_info(operator_guid, **kwargs)  # noqa: E501
            return data

    def operator_get_duty_schedule_for_operator_with_http_info(self, operator_guid, **kwargs):  # noqa: E501
        """Gets the duty schedules for an specified operator.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.operator_get_duty_schedule_for_operator_with_http_info(operator_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str operator_guid: The Guid of the operator to get the duty schedule for (required)
        :return: list[OperatorDutySchedule]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['operator_guid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method operator_get_duty_schedule_for_operator" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'operator_guid' is set
        if ('operator_guid' not in params or
                params['operator_guid'] is None):
            raise ValueError("Missing the required parameter `operator_guid` when calling `operator_get_duty_schedule_for_operator`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'operator_guid' in params:
            path_params['operatorGuid'] = params['operator_guid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/Operator/{operatorGuid}/DutySchedule', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[OperatorDutySchedule]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def operator_get_operator(self, operator_guid, **kwargs):  # noqa: E501
        """Gets the details of the operator with the provided OperatorGuid.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.operator_get_operator(operator_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str operator_guid: The Guid of the operator for which to retrieve the details (required)
        :return: Operator
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.operator_get_operator_with_http_info(operator_guid, **kwargs)  # noqa: E501
        else:
            (data) = self.operator_get_operator_with_http_info(operator_guid, **kwargs)  # noqa: E501
            return data

    def operator_get_operator_with_http_info(self, operator_guid, **kwargs):  # noqa: E501
        """Gets the details of the operator with the provided OperatorGuid.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.operator_get_operator_with_http_info(operator_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str operator_guid: The Guid of the operator for which to retrieve the details (required)
        :return: Operator
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['operator_guid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method operator_get_operator" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'operator_guid' is set
        if ('operator_guid' not in params or
                params['operator_guid'] is None):
            raise ValueError("Missing the required parameter `operator_guid` when calling `operator_get_operator`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'operator_guid' in params:
            path_params['operatorGuid'] = params['operator_guid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/Operator/{operatorGuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Operator',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def operator_get_operator_groups_for_operator(self, operator_guid, **kwargs):  # noqa: E501
        """Gets a list of all operator groups for the specified operator.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.operator_get_operator_groups_for_operator(operator_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str operator_guid: The Guid of the operator for which to retrieve the operator group guids (required)
        :return: list[OperatorMember]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.operator_get_operator_groups_for_operator_with_http_info(operator_guid, **kwargs)  # noqa: E501
        else:
            (data) = self.operator_get_operator_groups_for_operator_with_http_info(operator_guid, **kwargs)  # noqa: E501
            return data

    def operator_get_operator_groups_for_operator_with_http_info(self, operator_guid, **kwargs):  # noqa: E501
        """Gets a list of all operator groups for the specified operator.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.operator_get_operator_groups_for_operator_with_http_info(operator_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str operator_guid: The Guid of the operator for which to retrieve the operator group guids (required)
        :return: list[OperatorMember]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['operator_guid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method operator_get_operator_groups_for_operator" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'operator_guid' is set
        if ('operator_guid' not in params or
                params['operator_guid'] is None):
            raise ValueError("Missing the required parameter `operator_guid` when calling `operator_get_operator_groups_for_operator`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'operator_guid' in params:
            path_params['operatorGuid'] = params['operator_guid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/Operator/{operatorGuid}/OperatorGroups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[OperatorMember]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def operator_post_authorization_for_operator(self, operator_guid, authorization_type, **kwargs):  # noqa: E501
        """Assigns the specified authorization to this operator.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.operator_post_authorization_for_operator(operator_guid, authorization_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str operator_guid: The Guid of the operator (required)
        :param str authorization_type: The type of authorization (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.operator_post_authorization_for_operator_with_http_info(operator_guid, authorization_type, **kwargs)  # noqa: E501
        else:
            (data) = self.operator_post_authorization_for_operator_with_http_info(operator_guid, authorization_type, **kwargs)  # noqa: E501
            return data

    def operator_post_authorization_for_operator_with_http_info(self, operator_guid, authorization_type, **kwargs):  # noqa: E501
        """Assigns the specified authorization to this operator.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.operator_post_authorization_for_operator_with_http_info(operator_guid, authorization_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str operator_guid: The Guid of the operator (required)
        :param str authorization_type: The type of authorization (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['operator_guid', 'authorization_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method operator_post_authorization_for_operator" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'operator_guid' is set
        if ('operator_guid' not in params or
                params['operator_guid'] is None):
            raise ValueError("Missing the required parameter `operator_guid` when calling `operator_post_authorization_for_operator`")  # noqa: E501
        # verify the required parameter 'authorization_type' is set
        if ('authorization_type' not in params or
                params['authorization_type'] is None):
            raise ValueError("Missing the required parameter `authorization_type` when calling `operator_post_authorization_for_operator`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'operator_guid' in params:
            path_params['operatorGuid'] = params['operator_guid']  # noqa: E501
        if 'authorization_type' in params:
            path_params['authorizationType'] = params['authorization_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/Operator/{operatorGuid}/Authorization/{authorizationType}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def operator_update_duty_period_for_operator(self, operator_guid, duty_schedule_id, schedule, **kwargs):  # noqa: E501
        """Updates the specified duty schedule of the specified operator.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.operator_update_duty_period_for_operator(operator_guid, duty_schedule_id, schedule, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str operator_guid: (required)
        :param int duty_schedule_id: (required)
        :param OperatorDutySchedule schedule: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.operator_update_duty_period_for_operator_with_http_info(operator_guid, duty_schedule_id, schedule, **kwargs)  # noqa: E501
        else:
            (data) = self.operator_update_duty_period_for_operator_with_http_info(operator_guid, duty_schedule_id, schedule, **kwargs)  # noqa: E501
            return data

    def operator_update_duty_period_for_operator_with_http_info(self, operator_guid, duty_schedule_id, schedule, **kwargs):  # noqa: E501
        """Updates the specified duty schedule of the specified operator.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.operator_update_duty_period_for_operator_with_http_info(operator_guid, duty_schedule_id, schedule, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str operator_guid: (required)
        :param int duty_schedule_id: (required)
        :param OperatorDutySchedule schedule: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['operator_guid', 'duty_schedule_id', 'schedule']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method operator_update_duty_period_for_operator" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'operator_guid' is set
        if ('operator_guid' not in params or
                params['operator_guid'] is None):
            raise ValueError("Missing the required parameter `operator_guid` when calling `operator_update_duty_period_for_operator`")  # noqa: E501
        # verify the required parameter 'duty_schedule_id' is set
        if ('duty_schedule_id' not in params or
                params['duty_schedule_id'] is None):
            raise ValueError("Missing the required parameter `duty_schedule_id` when calling `operator_update_duty_period_for_operator`")  # noqa: E501
        # verify the required parameter 'schedule' is set
        if ('schedule' not in params or
                params['schedule'] is None):
            raise ValueError("Missing the required parameter `schedule` when calling `operator_update_duty_period_for_operator`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'operator_guid' in params:
            path_params['operatorGuid'] = params['operator_guid']  # noqa: E501
        if 'duty_schedule_id' in params:
            path_params['dutyScheduleId'] = params['duty_schedule_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'schedule' in params:
            body_params = params['schedule']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/Operator/{operatorGuid}/DutySchedule/{dutyScheduleId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def operator_update_operator(self, uptrends_operator, operator_guid, **kwargs):  # noqa: E501
        """Updates an existing operator.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.operator_update_operator(uptrends_operator, operator_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Operator uptrends_operator: The updated details of the operator (required)
        :param str operator_guid: The Guid of the operator to update (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.operator_update_operator_with_http_info(uptrends_operator, operator_guid, **kwargs)  # noqa: E501
        else:
            (data) = self.operator_update_operator_with_http_info(uptrends_operator, operator_guid, **kwargs)  # noqa: E501
            return data

    def operator_update_operator_with_http_info(self, uptrends_operator, operator_guid, **kwargs):  # noqa: E501
        """Updates an existing operator.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.operator_update_operator_with_http_info(uptrends_operator, operator_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Operator uptrends_operator: The updated details of the operator (required)
        :param str operator_guid: The Guid of the operator to update (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uptrends_operator', 'operator_guid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method operator_update_operator" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uptrends_operator' is set
        if ('uptrends_operator' not in params or
                params['uptrends_operator'] is None):
            raise ValueError("Missing the required parameter `uptrends_operator` when calling `operator_update_operator`")  # noqa: E501
        # verify the required parameter 'operator_guid' is set
        if ('operator_guid' not in params or
                params['operator_guid'] is None):
            raise ValueError("Missing the required parameter `operator_guid` when calling `operator_update_operator`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'operator_guid' in params:
            path_params['operatorGuid'] = params['operator_guid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'uptrends_operator' in params:
            body_params = params['uptrends_operator']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/Operator/{operatorGuid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def operator_update_operator_with_patch(self, uptrends_operator, operator_guid, **kwargs):  # noqa: E501
        """Updates an existing operator.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.operator_update_operator_with_patch(uptrends_operator, operator_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Operator uptrends_operator: The updated details of the operator (required)
        :param str operator_guid: The Guid of the operator to update (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.operator_update_operator_with_patch_with_http_info(uptrends_operator, operator_guid, **kwargs)  # noqa: E501
        else:
            (data) = self.operator_update_operator_with_patch_with_http_info(uptrends_operator, operator_guid, **kwargs)  # noqa: E501
            return data

    def operator_update_operator_with_patch_with_http_info(self, uptrends_operator, operator_guid, **kwargs):  # noqa: E501
        """Updates an existing operator.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.operator_update_operator_with_patch_with_http_info(uptrends_operator, operator_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Operator uptrends_operator: The updated details of the operator (required)
        :param str operator_guid: The Guid of the operator to update (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uptrends_operator', 'operator_guid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method operator_update_operator_with_patch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uptrends_operator' is set
        if ('uptrends_operator' not in params or
                params['uptrends_operator'] is None):
            raise ValueError("Missing the required parameter `uptrends_operator` when calling `operator_update_operator_with_patch`")  # noqa: E501
        # verify the required parameter 'operator_guid' is set
        if ('operator_guid' not in params or
                params['operator_guid'] is None):
            raise ValueError("Missing the required parameter `operator_guid` when calling `operator_update_operator_with_patch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'operator_guid' in params:
            path_params['operatorGuid'] = params['operator_guid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'uptrends_operator' in params:
            body_params = params['uptrends_operator']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/Operator/{operatorGuid}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
