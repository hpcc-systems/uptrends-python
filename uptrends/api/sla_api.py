# coding: utf-8

"""
    Uptrends API v4

    This document describes Uptrends API version 4. This Swagger environment also lets you execute API methods directly.  Please note that this is not a sandbox environment: these API methods operate directly on your actual Uptrends account.  For more information, please visit https://www.uptrends.com/api.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from uptrends.api_client import ApiClient


class SLAApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def sla_create_sla(self, sla, **kwargs):  # noqa: E501
        """Creates a new SLA.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sla_create_sla(sla, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Sla sla: The complete SLA definition that should be created. (required)
        :return: Sla
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sla_create_sla_with_http_info(sla, **kwargs)  # noqa: E501
        else:
            (data) = self.sla_create_sla_with_http_info(sla, **kwargs)  # noqa: E501
            return data

    def sla_create_sla_with_http_info(self, sla, **kwargs):  # noqa: E501
        """Creates a new SLA.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sla_create_sla_with_http_info(sla, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Sla sla: The complete SLA definition that should be created. (required)
        :return: Sla
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sla']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sla_create_sla" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sla' is set
        if ('sla' not in params or
                params['sla'] is None):
            raise ValueError("Missing the required parameter `sla` when calling `sla_create_sla`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'sla' in params:
            body_params = params['sla']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/Sla', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Sla',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sla_delete_exclusion_period(self, sla_guid, exclusion_period_id, **kwargs):  # noqa: E501
        """Deletes the specified exclusion period for the specified SLA.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sla_delete_exclusion_period(sla_guid, exclusion_period_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sla_guid: The Guid of the sla definition. (required)
        :param int exclusion_period_id: The id of the exclusion period. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sla_delete_exclusion_period_with_http_info(sla_guid, exclusion_period_id, **kwargs)  # noqa: E501
        else:
            (data) = self.sla_delete_exclusion_period_with_http_info(sla_guid, exclusion_period_id, **kwargs)  # noqa: E501
            return data

    def sla_delete_exclusion_period_with_http_info(self, sla_guid, exclusion_period_id, **kwargs):  # noqa: E501
        """Deletes the specified exclusion period for the specified SLA.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sla_delete_exclusion_period_with_http_info(sla_guid, exclusion_period_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sla_guid: The Guid of the sla definition. (required)
        :param int exclusion_period_id: The id of the exclusion period. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sla_guid', 'exclusion_period_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sla_delete_exclusion_period" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sla_guid' is set
        if ('sla_guid' not in params or
                params['sla_guid'] is None):
            raise ValueError("Missing the required parameter `sla_guid` when calling `sla_delete_exclusion_period`")  # noqa: E501
        # verify the required parameter 'exclusion_period_id' is set
        if ('exclusion_period_id' not in params or
                params['exclusion_period_id'] is None):
            raise ValueError("Missing the required parameter `exclusion_period_id` when calling `sla_delete_exclusion_period`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sla_guid' in params:
            path_params['slaGuid'] = params['sla_guid']  # noqa: E501
        if 'exclusion_period_id' in params:
            path_params['exclusionPeriodId'] = params['exclusion_period_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/Sla/{slaGuid}/ExclusionPeriod/{exclusionPeriodId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sla_delete_sla(self, sla_guid, **kwargs):  # noqa: E501
        """Deletes the specified SLA.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sla_delete_sla(sla_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sla_guid: The Guid of the SLA definition that should be deleted. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sla_delete_sla_with_http_info(sla_guid, **kwargs)  # noqa: E501
        else:
            (data) = self.sla_delete_sla_with_http_info(sla_guid, **kwargs)  # noqa: E501
            return data

    def sla_delete_sla_with_http_info(self, sla_guid, **kwargs):  # noqa: E501
        """Deletes the specified SLA.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sla_delete_sla_with_http_info(sla_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sla_guid: The Guid of the SLA definition that should be deleted. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sla_guid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sla_delete_sla" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sla_guid' is set
        if ('sla_guid' not in params or
                params['sla_guid'] is None):
            raise ValueError("Missing the required parameter `sla_guid` when calling `sla_delete_sla`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sla_guid' in params:
            path_params['slaGuid'] = params['sla_guid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/Sla/{slaGuid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sla_get_exclusion_period(self, sla_guid, exclusion_period_id, **kwargs):  # noqa: E501
        """Gets the specified exclusion period for the specified SLA.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sla_get_exclusion_period(sla_guid, exclusion_period_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sla_guid: The Guid of the SLA definition. (required)
        :param int exclusion_period_id: The id of the exclusion period. (required)
        :return: ExclusionPeriod
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sla_get_exclusion_period_with_http_info(sla_guid, exclusion_period_id, **kwargs)  # noqa: E501
        else:
            (data) = self.sla_get_exclusion_period_with_http_info(sla_guid, exclusion_period_id, **kwargs)  # noqa: E501
            return data

    def sla_get_exclusion_period_with_http_info(self, sla_guid, exclusion_period_id, **kwargs):  # noqa: E501
        """Gets the specified exclusion period for the specified SLA.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sla_get_exclusion_period_with_http_info(sla_guid, exclusion_period_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sla_guid: The Guid of the SLA definition. (required)
        :param int exclusion_period_id: The id of the exclusion period. (required)
        :return: ExclusionPeriod
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sla_guid', 'exclusion_period_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sla_get_exclusion_period" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sla_guid' is set
        if ('sla_guid' not in params or
                params['sla_guid'] is None):
            raise ValueError("Missing the required parameter `sla_guid` when calling `sla_get_exclusion_period`")  # noqa: E501
        # verify the required parameter 'exclusion_period_id' is set
        if ('exclusion_period_id' not in params or
                params['exclusion_period_id'] is None):
            raise ValueError("Missing the required parameter `exclusion_period_id` when calling `sla_get_exclusion_period`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sla_guid' in params:
            path_params['slaGuid'] = params['sla_guid']  # noqa: E501
        if 'exclusion_period_id' in params:
            path_params['exclusionPeriodId'] = params['exclusion_period_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/Sla/{slaGuid}/ExclusionPeriod/{exclusionPeriodId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ExclusionPeriod',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sla_get_exclusion_periods(self, sla_guid, **kwargs):  # noqa: E501
        """Gets a list of all exclusion periods for the specified SLA.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sla_get_exclusion_periods(sla_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sla_guid: The Guid of the SLA definition. (required)
        :return: list[ExclusionPeriod]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sla_get_exclusion_periods_with_http_info(sla_guid, **kwargs)  # noqa: E501
        else:
            (data) = self.sla_get_exclusion_periods_with_http_info(sla_guid, **kwargs)  # noqa: E501
            return data

    def sla_get_exclusion_periods_with_http_info(self, sla_guid, **kwargs):  # noqa: E501
        """Gets a list of all exclusion periods for the specified SLA.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sla_get_exclusion_periods_with_http_info(sla_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sla_guid: The Guid of the SLA definition. (required)
        :return: list[ExclusionPeriod]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sla_guid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sla_get_exclusion_periods" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sla_guid' is set
        if ('sla_guid' not in params or
                params['sla_guid'] is None):
            raise ValueError("Missing the required parameter `sla_guid` when calling `sla_get_exclusion_periods`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sla_guid' in params:
            path_params['slaGuid'] = params['sla_guid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/Sla/{slaGuid}/ExclusionPeriod', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ExclusionPeriod]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sla_get_sla(self, sla_guid, **kwargs):  # noqa: E501
        """Gets the specified SLA definition.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sla_get_sla(sla_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sla_guid: The Guid of the SLA definition. (required)
        :return: Sla
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sla_get_sla_with_http_info(sla_guid, **kwargs)  # noqa: E501
        else:
            (data) = self.sla_get_sla_with_http_info(sla_guid, **kwargs)  # noqa: E501
            return data

    def sla_get_sla_with_http_info(self, sla_guid, **kwargs):  # noqa: E501
        """Gets the specified SLA definition.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sla_get_sla_with_http_info(sla_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sla_guid: The Guid of the SLA definition. (required)
        :return: Sla
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sla_guid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sla_get_sla" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sla_guid' is set
        if ('sla_guid' not in params or
                params['sla_guid'] is None):
            raise ValueError("Missing the required parameter `sla_guid` when calling `sla_get_sla`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sla_guid' in params:
            path_params['slaGuid'] = params['sla_guid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/Sla/{slaGuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Sla',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sla_get_slas(self, **kwargs):  # noqa: E501
        """Gets a list of all SLA definitions.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sla_get_slas(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Sla]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sla_get_slas_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.sla_get_slas_with_http_info(**kwargs)  # noqa: E501
            return data

    def sla_get_slas_with_http_info(self, **kwargs):  # noqa: E501
        """Gets a list of all SLA definitions.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sla_get_slas_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Sla]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sla_get_slas" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/Sla', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Sla]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sla_patch_exclusion_period(self, sla_guid, exclusion_period_id, exclusion_period, **kwargs):  # noqa: E501
        """Partially updates the specified exclusion period for the specified SLA.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sla_patch_exclusion_period(sla_guid, exclusion_period_id, exclusion_period, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sla_guid: The Guid of the SLA definition. (required)
        :param int exclusion_period_id: The id of the exclusion period. (required)
        :param ExclusionPeriod exclusion_period: The complete definition of the exclusion period. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sla_patch_exclusion_period_with_http_info(sla_guid, exclusion_period_id, exclusion_period, **kwargs)  # noqa: E501
        else:
            (data) = self.sla_patch_exclusion_period_with_http_info(sla_guid, exclusion_period_id, exclusion_period, **kwargs)  # noqa: E501
            return data

    def sla_patch_exclusion_period_with_http_info(self, sla_guid, exclusion_period_id, exclusion_period, **kwargs):  # noqa: E501
        """Partially updates the specified exclusion period for the specified SLA.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sla_patch_exclusion_period_with_http_info(sla_guid, exclusion_period_id, exclusion_period, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sla_guid: The Guid of the SLA definition. (required)
        :param int exclusion_period_id: The id of the exclusion period. (required)
        :param ExclusionPeriod exclusion_period: The complete definition of the exclusion period. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sla_guid', 'exclusion_period_id', 'exclusion_period']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sla_patch_exclusion_period" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sla_guid' is set
        if ('sla_guid' not in params or
                params['sla_guid'] is None):
            raise ValueError("Missing the required parameter `sla_guid` when calling `sla_patch_exclusion_period`")  # noqa: E501
        # verify the required parameter 'exclusion_period_id' is set
        if ('exclusion_period_id' not in params or
                params['exclusion_period_id'] is None):
            raise ValueError("Missing the required parameter `exclusion_period_id` when calling `sla_patch_exclusion_period`")  # noqa: E501
        # verify the required parameter 'exclusion_period' is set
        if ('exclusion_period' not in params or
                params['exclusion_period'] is None):
            raise ValueError("Missing the required parameter `exclusion_period` when calling `sla_patch_exclusion_period`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sla_guid' in params:
            path_params['slaGuid'] = params['sla_guid']  # noqa: E501
        if 'exclusion_period_id' in params:
            path_params['exclusionPeriodId'] = params['exclusion_period_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'exclusion_period' in params:
            body_params = params['exclusion_period']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/Sla/{slaGuid}/ExclusionPeriod/{exclusionPeriodId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sla_patch_sla(self, sla, sla_guid, **kwargs):  # noqa: E501
        """Partially updates the definition of the specified SLA.  # noqa: E501

        This methods accepts parts of a SLA definition. We recommend retrieving the existing definition first (using the GET method). You can then process the changes you want to make and send back these changes only using this PATCH method.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sla_patch_sla(sla, sla_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Sla sla: The partial definition for the SLA that should be updated. (required)
        :param str sla_guid: The Guid of the SLA that should be updated. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sla_patch_sla_with_http_info(sla, sla_guid, **kwargs)  # noqa: E501
        else:
            (data) = self.sla_patch_sla_with_http_info(sla, sla_guid, **kwargs)  # noqa: E501
            return data

    def sla_patch_sla_with_http_info(self, sla, sla_guid, **kwargs):  # noqa: E501
        """Partially updates the definition of the specified SLA.  # noqa: E501

        This methods accepts parts of a SLA definition. We recommend retrieving the existing definition first (using the GET method). You can then process the changes you want to make and send back these changes only using this PATCH method.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sla_patch_sla_with_http_info(sla, sla_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Sla sla: The partial definition for the SLA that should be updated. (required)
        :param str sla_guid: The Guid of the SLA that should be updated. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sla', 'sla_guid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sla_patch_sla" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sla' is set
        if ('sla' not in params or
                params['sla'] is None):
            raise ValueError("Missing the required parameter `sla` when calling `sla_patch_sla`")  # noqa: E501
        # verify the required parameter 'sla_guid' is set
        if ('sla_guid' not in params or
                params['sla_guid'] is None):
            raise ValueError("Missing the required parameter `sla_guid` when calling `sla_patch_sla`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sla_guid' in params:
            path_params['slaGuid'] = params['sla_guid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'sla' in params:
            body_params = params['sla']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/Sla/{slaGuid}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sla_post_exclusion_period(self, exclusion_period, sla_guid, **kwargs):  # noqa: E501
        """Creates a new exclusion period for the specified SLA.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sla_post_exclusion_period(exclusion_period, sla_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ExclusionPeriod exclusion_period: The complete definition of the exclusion period. (required)
        :param str sla_guid: The Guid of the SLA definition. (required)
        :return: ExclusionPeriod
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sla_post_exclusion_period_with_http_info(exclusion_period, sla_guid, **kwargs)  # noqa: E501
        else:
            (data) = self.sla_post_exclusion_period_with_http_info(exclusion_period, sla_guid, **kwargs)  # noqa: E501
            return data

    def sla_post_exclusion_period_with_http_info(self, exclusion_period, sla_guid, **kwargs):  # noqa: E501
        """Creates a new exclusion period for the specified SLA.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sla_post_exclusion_period_with_http_info(exclusion_period, sla_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ExclusionPeriod exclusion_period: The complete definition of the exclusion period. (required)
        :param str sla_guid: The Guid of the SLA definition. (required)
        :return: ExclusionPeriod
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['exclusion_period', 'sla_guid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sla_post_exclusion_period" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'exclusion_period' is set
        if ('exclusion_period' not in params or
                params['exclusion_period'] is None):
            raise ValueError("Missing the required parameter `exclusion_period` when calling `sla_post_exclusion_period`")  # noqa: E501
        # verify the required parameter 'sla_guid' is set
        if ('sla_guid' not in params or
                params['sla_guid'] is None):
            raise ValueError("Missing the required parameter `sla_guid` when calling `sla_post_exclusion_period`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sla_guid' in params:
            path_params['slaGuid'] = params['sla_guid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'exclusion_period' in params:
            body_params = params['exclusion_period']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/Sla/{slaGuid}/ExclusionPeriod', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ExclusionPeriod',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sla_put_exclusion_period(self, sla_guid, exclusion_period_id, exclusion_period, **kwargs):  # noqa: E501
        """Updates the specified exclusion period for the specified SLA.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sla_put_exclusion_period(sla_guid, exclusion_period_id, exclusion_period, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sla_guid: The Guid of the SLA definition. (required)
        :param int exclusion_period_id: The id of the exclusion period. (required)
        :param ExclusionPeriod exclusion_period: The complete definition of the exclusion period. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sla_put_exclusion_period_with_http_info(sla_guid, exclusion_period_id, exclusion_period, **kwargs)  # noqa: E501
        else:
            (data) = self.sla_put_exclusion_period_with_http_info(sla_guid, exclusion_period_id, exclusion_period, **kwargs)  # noqa: E501
            return data

    def sla_put_exclusion_period_with_http_info(self, sla_guid, exclusion_period_id, exclusion_period, **kwargs):  # noqa: E501
        """Updates the specified exclusion period for the specified SLA.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sla_put_exclusion_period_with_http_info(sla_guid, exclusion_period_id, exclusion_period, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sla_guid: The Guid of the SLA definition. (required)
        :param int exclusion_period_id: The id of the exclusion period. (required)
        :param ExclusionPeriod exclusion_period: The complete definition of the exclusion period. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sla_guid', 'exclusion_period_id', 'exclusion_period']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sla_put_exclusion_period" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sla_guid' is set
        if ('sla_guid' not in params or
                params['sla_guid'] is None):
            raise ValueError("Missing the required parameter `sla_guid` when calling `sla_put_exclusion_period`")  # noqa: E501
        # verify the required parameter 'exclusion_period_id' is set
        if ('exclusion_period_id' not in params or
                params['exclusion_period_id'] is None):
            raise ValueError("Missing the required parameter `exclusion_period_id` when calling `sla_put_exclusion_period`")  # noqa: E501
        # verify the required parameter 'exclusion_period' is set
        if ('exclusion_period' not in params or
                params['exclusion_period'] is None):
            raise ValueError("Missing the required parameter `exclusion_period` when calling `sla_put_exclusion_period`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sla_guid' in params:
            path_params['slaGuid'] = params['sla_guid']  # noqa: E501
        if 'exclusion_period_id' in params:
            path_params['exclusionPeriodId'] = params['exclusion_period_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'exclusion_period' in params:
            body_params = params['exclusion_period']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/Sla/{slaGuid}/ExclusionPeriod/{exclusionPeriodId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sla_put_sla(self, sla, sla_guid, **kwargs):  # noqa: E501
        """Updates the definition of the specified SLA.  # noqa: E501

        This methods only accepts a complete SLA definition. We recommend retrieving the existing definition first (using the GET method). You can then process the changes you want to make and send back the updated definition using this PUT method.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sla_put_sla(sla, sla_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Sla sla: The complete definition for the SLA that should be updated. (required)
        :param str sla_guid: The Guid of the SLA that should be updated. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sla_put_sla_with_http_info(sla, sla_guid, **kwargs)  # noqa: E501
        else:
            (data) = self.sla_put_sla_with_http_info(sla, sla_guid, **kwargs)  # noqa: E501
            return data

    def sla_put_sla_with_http_info(self, sla, sla_guid, **kwargs):  # noqa: E501
        """Updates the definition of the specified SLA.  # noqa: E501

        This methods only accepts a complete SLA definition. We recommend retrieving the existing definition first (using the GET method). You can then process the changes you want to make and send back the updated definition using this PUT method.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sla_put_sla_with_http_info(sla, sla_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Sla sla: The complete definition for the SLA that should be updated. (required)
        :param str sla_guid: The Guid of the SLA that should be updated. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sla', 'sla_guid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sla_put_sla" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sla' is set
        if ('sla' not in params or
                params['sla'] is None):
            raise ValueError("Missing the required parameter `sla` when calling `sla_put_sla`")  # noqa: E501
        # verify the required parameter 'sla_guid' is set
        if ('sla_guid' not in params or
                params['sla_guid'] is None):
            raise ValueError("Missing the required parameter `sla_guid` when calling `sla_put_sla`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sla_guid' in params:
            path_params['slaGuid'] = params['sla_guid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'sla' in params:
            body_params = params['sla']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/Sla/{slaGuid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
