# coding: utf-8

"""
    Uptrends API v4

    This document describes Uptrends API version 4. This Swagger environment also lets you execute API methods directly.  Please note that this is not a sandbox environment: these API methods operate directly on your actual Uptrends account.  For more information, please visit https://www.uptrends.com/api.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from uptrends.api_client import ApiClient


class DashboardApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def dashboard_clone_dashboard(self, dashboard_guid, **kwargs):  # noqa: E501
        """Clone the specified dashboard.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dashboard_clone_dashboard(dashboard_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dashboard_guid: The guid of the specified dashboard. (required)
        :return: Dashboard
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.dashboard_clone_dashboard_with_http_info(dashboard_guid, **kwargs)  # noqa: E501
        else:
            (data) = self.dashboard_clone_dashboard_with_http_info(dashboard_guid, **kwargs)  # noqa: E501
            return data

    def dashboard_clone_dashboard_with_http_info(self, dashboard_guid, **kwargs):  # noqa: E501
        """Clone the specified dashboard.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dashboard_clone_dashboard_with_http_info(dashboard_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dashboard_guid: The guid of the specified dashboard. (required)
        :return: Dashboard
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dashboard_guid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dashboard_clone_dashboard" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dashboard_guid' is set
        if ('dashboard_guid' not in params or
                params['dashboard_guid'] is None):
            raise ValueError("Missing the required parameter `dashboard_guid` when calling `dashboard_clone_dashboard`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dashboard_guid' in params:
            path_params['dashboardGuid'] = params['dashboard_guid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/Dashboard/{dashboardGuid}/Clone', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Dashboard',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def dashboard_delete_dashboard(self, dashboard_guid, **kwargs):  # noqa: E501
        """Delete the specified dashboard.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dashboard_delete_dashboard(dashboard_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dashboard_guid: The guid of the specified dashboard. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.dashboard_delete_dashboard_with_http_info(dashboard_guid, **kwargs)  # noqa: E501
        else:
            (data) = self.dashboard_delete_dashboard_with_http_info(dashboard_guid, **kwargs)  # noqa: E501
            return data

    def dashboard_delete_dashboard_with_http_info(self, dashboard_guid, **kwargs):  # noqa: E501
        """Delete the specified dashboard.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dashboard_delete_dashboard_with_http_info(dashboard_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dashboard_guid: The guid of the specified dashboard. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dashboard_guid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dashboard_delete_dashboard" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dashboard_guid' is set
        if ('dashboard_guid' not in params or
                params['dashboard_guid'] is None):
            raise ValueError("Missing the required parameter `dashboard_guid` when calling `dashboard_delete_dashboard`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dashboard_guid' in params:
            path_params['dashboardGuid'] = params['dashboard_guid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/Dashboard/{dashboardGuid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def dashboard_get_all_dashboards(self, **kwargs):  # noqa: E501
        """Returns data for all dashboards.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dashboard_get_all_dashboards(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Dashboard]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.dashboard_get_all_dashboards_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.dashboard_get_all_dashboards_with_http_info(**kwargs)  # noqa: E501
            return data

    def dashboard_get_all_dashboards_with_http_info(self, **kwargs):  # noqa: E501
        """Returns data for all dashboards.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dashboard_get_all_dashboards_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Dashboard]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dashboard_get_all_dashboards" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/Dashboard', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Dashboard]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def dashboard_get_one_dashboard(self, dashboard_guid, **kwargs):  # noqa: E501
        """Returns data for the specified dashboard.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dashboard_get_one_dashboard(dashboard_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dashboard_guid: The guid of the specified dashboard. (required)
        :return: Dashboard
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.dashboard_get_one_dashboard_with_http_info(dashboard_guid, **kwargs)  # noqa: E501
        else:
            (data) = self.dashboard_get_one_dashboard_with_http_info(dashboard_guid, **kwargs)  # noqa: E501
            return data

    def dashboard_get_one_dashboard_with_http_info(self, dashboard_guid, **kwargs):  # noqa: E501
        """Returns data for the specified dashboard.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dashboard_get_one_dashboard_with_http_info(dashboard_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dashboard_guid: The guid of the specified dashboard. (required)
        :return: Dashboard
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dashboard_guid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dashboard_get_one_dashboard" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dashboard_guid' is set
        if ('dashboard_guid' not in params or
                params['dashboard_guid'] is None):
            raise ValueError("Missing the required parameter `dashboard_guid` when calling `dashboard_get_one_dashboard`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dashboard_guid' in params:
            path_params['dashboardGuid'] = params['dashboard_guid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/Dashboard/{dashboardGuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Dashboard',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def dashboard_partially_update_dashboard(self, dashboard_guid, dashboard, **kwargs):  # noqa: E501
        """Partially update the specified dashboard.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dashboard_partially_update_dashboard(dashboard_guid, dashboard, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dashboard_guid: The guid of the specified dashboard. (required)
        :param Dashboard dashboard: The details for the dashboard. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.dashboard_partially_update_dashboard_with_http_info(dashboard_guid, dashboard, **kwargs)  # noqa: E501
        else:
            (data) = self.dashboard_partially_update_dashboard_with_http_info(dashboard_guid, dashboard, **kwargs)  # noqa: E501
            return data

    def dashboard_partially_update_dashboard_with_http_info(self, dashboard_guid, dashboard, **kwargs):  # noqa: E501
        """Partially update the specified dashboard.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dashboard_partially_update_dashboard_with_http_info(dashboard_guid, dashboard, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dashboard_guid: The guid of the specified dashboard. (required)
        :param Dashboard dashboard: The details for the dashboard. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dashboard_guid', 'dashboard']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dashboard_partially_update_dashboard" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dashboard_guid' is set
        if ('dashboard_guid' not in params or
                params['dashboard_guid'] is None):
            raise ValueError("Missing the required parameter `dashboard_guid` when calling `dashboard_partially_update_dashboard`")  # noqa: E501
        # verify the required parameter 'dashboard' is set
        if ('dashboard' not in params or
                params['dashboard'] is None):
            raise ValueError("Missing the required parameter `dashboard` when calling `dashboard_partially_update_dashboard`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dashboard_guid' in params:
            path_params['dashboardGuid'] = params['dashboard_guid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dashboard' in params:
            body_params = params['dashboard']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/Dashboard/{dashboardGuid}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def dashboard_update_dashboard(self, dashboard_guid, dashboard, **kwargs):  # noqa: E501
        """Update the specified dashboard.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dashboard_update_dashboard(dashboard_guid, dashboard, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dashboard_guid: The guid of the specified dashboard. (required)
        :param Dashboard dashboard: The details for the dashboard. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.dashboard_update_dashboard_with_http_info(dashboard_guid, dashboard, **kwargs)  # noqa: E501
        else:
            (data) = self.dashboard_update_dashboard_with_http_info(dashboard_guid, dashboard, **kwargs)  # noqa: E501
            return data

    def dashboard_update_dashboard_with_http_info(self, dashboard_guid, dashboard, **kwargs):  # noqa: E501
        """Update the specified dashboard.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dashboard_update_dashboard_with_http_info(dashboard_guid, dashboard, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dashboard_guid: The guid of the specified dashboard. (required)
        :param Dashboard dashboard: The details for the dashboard. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dashboard_guid', 'dashboard']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dashboard_update_dashboard" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dashboard_guid' is set
        if ('dashboard_guid' not in params or
                params['dashboard_guid'] is None):
            raise ValueError("Missing the required parameter `dashboard_guid` when calling `dashboard_update_dashboard`")  # noqa: E501
        # verify the required parameter 'dashboard' is set
        if ('dashboard' not in params or
                params['dashboard'] is None):
            raise ValueError("Missing the required parameter `dashboard` when calling `dashboard_update_dashboard`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dashboard_guid' in params:
            path_params['dashboardGuid'] = params['dashboard_guid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dashboard' in params:
            body_params = params['dashboard']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/Dashboard/{dashboardGuid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
