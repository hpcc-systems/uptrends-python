# coding: utf-8

"""
    Uptrends API v4

    This document describes Uptrends API version 4. This Swagger environment also lets you execute API methods directly.  Please note that this is not a sandbox environment: these API methods operate directly on your actual Uptrends account.  For more information, please visit https://www.uptrends.com/api.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from uptrends.api_client import ApiClient


class MonitorGroupApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def monitor_group_add_maintenance_period_to_all_members(self, monitor_group_guid, maintenance_period, **kwargs):  # noqa: E501
        """Adds the provided maintenance period to all monitors in the group specified   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.monitor_group_add_maintenance_period_to_all_members(monitor_group_guid, maintenance_period, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str monitor_group_guid: (required)
        :param MaintenancePeriod maintenance_period: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.monitor_group_add_maintenance_period_to_all_members_with_http_info(monitor_group_guid, maintenance_period, **kwargs)  # noqa: E501
        else:
            (data) = self.monitor_group_add_maintenance_period_to_all_members_with_http_info(monitor_group_guid, maintenance_period, **kwargs)  # noqa: E501
            return data

    def monitor_group_add_maintenance_period_to_all_members_with_http_info(self, monitor_group_guid, maintenance_period, **kwargs):  # noqa: E501
        """Adds the provided maintenance period to all monitors in the group specified   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.monitor_group_add_maintenance_period_to_all_members_with_http_info(monitor_group_guid, maintenance_period, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str monitor_group_guid: (required)
        :param MaintenancePeriod maintenance_period: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['monitor_group_guid', 'maintenance_period']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method monitor_group_add_maintenance_period_to_all_members" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'monitor_group_guid' is set
        if ('monitor_group_guid' not in params or
                params['monitor_group_guid'] is None):
            raise ValueError("Missing the required parameter `monitor_group_guid` when calling `monitor_group_add_maintenance_period_to_all_members`")  # noqa: E501
        # verify the required parameter 'maintenance_period' is set
        if ('maintenance_period' not in params or
                params['maintenance_period'] is None):
            raise ValueError("Missing the required parameter `maintenance_period` when calling `monitor_group_add_maintenance_period_to_all_members`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'monitor_group_guid' in params:
            path_params['monitorGroupGuid'] = params['monitor_group_guid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'maintenance_period' in params:
            body_params = params['maintenance_period']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/MonitorGroup/{monitorGroupGuid}/AddMaintenancePeriodToAllMembers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def monitor_group_add_monitor_to_monitor_group(self, monitor_group_guid, monitor_guid, **kwargs):  # noqa: E501
        """Adds the specified monitor to the monitor group   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.monitor_group_add_monitor_to_monitor_group(monitor_group_guid, monitor_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str monitor_group_guid: The Guid of the monitor group to add the monitor to (required)
        :param str monitor_guid: The monitor Guid (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.monitor_group_add_monitor_to_monitor_group_with_http_info(monitor_group_guid, monitor_guid, **kwargs)  # noqa: E501
        else:
            (data) = self.monitor_group_add_monitor_to_monitor_group_with_http_info(monitor_group_guid, monitor_guid, **kwargs)  # noqa: E501
            return data

    def monitor_group_add_monitor_to_monitor_group_with_http_info(self, monitor_group_guid, monitor_guid, **kwargs):  # noqa: E501
        """Adds the specified monitor to the monitor group   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.monitor_group_add_monitor_to_monitor_group_with_http_info(monitor_group_guid, monitor_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str monitor_group_guid: The Guid of the monitor group to add the monitor to (required)
        :param str monitor_guid: The monitor Guid (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['monitor_group_guid', 'monitor_guid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method monitor_group_add_monitor_to_monitor_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'monitor_group_guid' is set
        if ('monitor_group_guid' not in params or
                params['monitor_group_guid'] is None):
            raise ValueError("Missing the required parameter `monitor_group_guid` when calling `monitor_group_add_monitor_to_monitor_group`")  # noqa: E501
        # verify the required parameter 'monitor_guid' is set
        if ('monitor_guid' not in params or
                params['monitor_guid'] is None):
            raise ValueError("Missing the required parameter `monitor_guid` when calling `monitor_group_add_monitor_to_monitor_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'monitor_group_guid' in params:
            path_params['monitorGroupGuid'] = params['monitor_group_guid']  # noqa: E501
        if 'monitor_guid' in params:
            path_params['monitorGuid'] = params['monitor_guid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/MonitorGroup/{monitorGroupGuid}/Members/{monitorGuid}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def monitor_group_create_monitor_group(self, monitor_group, **kwargs):  # noqa: E501
        """Creates a new monitor group  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.monitor_group_create_monitor_group(monitor_group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MonitorGroup monitor_group: The MonitorGroup object to be created (required)
        :return: MonitorGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.monitor_group_create_monitor_group_with_http_info(monitor_group, **kwargs)  # noqa: E501
        else:
            (data) = self.monitor_group_create_monitor_group_with_http_info(monitor_group, **kwargs)  # noqa: E501
            return data

    def monitor_group_create_monitor_group_with_http_info(self, monitor_group, **kwargs):  # noqa: E501
        """Creates a new monitor group  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.monitor_group_create_monitor_group_with_http_info(monitor_group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MonitorGroup monitor_group: The MonitorGroup object to be created (required)
        :return: MonitorGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['monitor_group']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method monitor_group_create_monitor_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'monitor_group' is set
        if ('monitor_group' not in params or
                params['monitor_group'] is None):
            raise ValueError("Missing the required parameter `monitor_group` when calling `monitor_group_create_monitor_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'monitor_group' in params:
            body_params = params['monitor_group']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/MonitorGroup', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MonitorGroup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def monitor_group_delete_monitor_group(self, monitor_group_guid, **kwargs):  # noqa: E501
        """Deletes the specified monitor group  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.monitor_group_delete_monitor_group(monitor_group_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str monitor_group_guid: The Guid of the monitor group to be deleted (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.monitor_group_delete_monitor_group_with_http_info(monitor_group_guid, **kwargs)  # noqa: E501
        else:
            (data) = self.monitor_group_delete_monitor_group_with_http_info(monitor_group_guid, **kwargs)  # noqa: E501
            return data

    def monitor_group_delete_monitor_group_with_http_info(self, monitor_group_guid, **kwargs):  # noqa: E501
        """Deletes the specified monitor group  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.monitor_group_delete_monitor_group_with_http_info(monitor_group_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str monitor_group_guid: The Guid of the monitor group to be deleted (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['monitor_group_guid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method monitor_group_delete_monitor_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'monitor_group_guid' is set
        if ('monitor_group_guid' not in params or
                params['monitor_group_guid'] is None):
            raise ValueError("Missing the required parameter `monitor_group_guid` when calling `monitor_group_delete_monitor_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'monitor_group_guid' in params:
            path_params['monitorGroupGuid'] = params['monitor_group_guid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/MonitorGroup/{monitorGroupGuid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def monitor_group_get_all_monitor_groups(self, **kwargs):  # noqa: E501
        """Gets all monitor groups  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.monitor_group_get_all_monitor_groups(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[MonitorGroup]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.monitor_group_get_all_monitor_groups_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.monitor_group_get_all_monitor_groups_with_http_info(**kwargs)  # noqa: E501
            return data

    def monitor_group_get_all_monitor_groups_with_http_info(self, **kwargs):  # noqa: E501
        """Gets all monitor groups  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.monitor_group_get_all_monitor_groups_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[MonitorGroup]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method monitor_group_get_all_monitor_groups" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/MonitorGroup', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[MonitorGroup]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def monitor_group_get_monitor_group(self, monitor_group_guid, **kwargs):  # noqa: E501
        """Gets the details of a monitor group  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.monitor_group_get_monitor_group(monitor_group_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str monitor_group_guid: The Guid of the monitor group to be retrieved (required)
        :return: MonitorGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.monitor_group_get_monitor_group_with_http_info(monitor_group_guid, **kwargs)  # noqa: E501
        else:
            (data) = self.monitor_group_get_monitor_group_with_http_info(monitor_group_guid, **kwargs)  # noqa: E501
            return data

    def monitor_group_get_monitor_group_with_http_info(self, monitor_group_guid, **kwargs):  # noqa: E501
        """Gets the details of a monitor group  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.monitor_group_get_monitor_group_with_http_info(monitor_group_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str monitor_group_guid: The Guid of the monitor group to be retrieved (required)
        :return: MonitorGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['monitor_group_guid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method monitor_group_get_monitor_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'monitor_group_guid' is set
        if ('monitor_group_guid' not in params or
                params['monitor_group_guid'] is None):
            raise ValueError("Missing the required parameter `monitor_group_guid` when calling `monitor_group_get_monitor_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'monitor_group_guid' in params:
            path_params['monitorGroupGuid'] = params['monitor_group_guid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/MonitorGroup/{monitorGroupGuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MonitorGroup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def monitor_group_get_monitor_group_members(self, monitor_group_guid, **kwargs):  # noqa: E501
        """Gets a list of all members of a monitor group  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.monitor_group_get_monitor_group_members(monitor_group_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str monitor_group_guid: The Guid of the monitor group to retrieve the members for (required)
        :return: MonitorGroupMember
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.monitor_group_get_monitor_group_members_with_http_info(monitor_group_guid, **kwargs)  # noqa: E501
        else:
            (data) = self.monitor_group_get_monitor_group_members_with_http_info(monitor_group_guid, **kwargs)  # noqa: E501
            return data

    def monitor_group_get_monitor_group_members_with_http_info(self, monitor_group_guid, **kwargs):  # noqa: E501
        """Gets a list of all members of a monitor group  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.monitor_group_get_monitor_group_members_with_http_info(monitor_group_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str monitor_group_guid: The Guid of the monitor group to retrieve the members for (required)
        :return: MonitorGroupMember
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['monitor_group_guid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method monitor_group_get_monitor_group_members" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'monitor_group_guid' is set
        if ('monitor_group_guid' not in params or
                params['monitor_group_guid'] is None):
            raise ValueError("Missing the required parameter `monitor_group_guid` when calling `monitor_group_get_monitor_group_members`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'monitor_group_guid' in params:
            path_params['monitorGroupGuid'] = params['monitor_group_guid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/MonitorGroup/{monitorGroupGuid}/Members', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[MonitorGroupMember]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def monitor_group_remove_monitor_from_monitor_group(self, monitor_group_guid, monitor_guid, **kwargs):  # noqa: E501
        """Removes the specified monitor from the monitor group  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.monitor_group_remove_monitor_from_monitor_group(monitor_group_guid, monitor_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str monitor_group_guid: The Guid of the monitor group to remove the monitor from (required)
        :param str monitor_guid: The monitor Guid to be removed (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.monitor_group_remove_monitor_from_monitor_group_with_http_info(monitor_group_guid, monitor_guid, **kwargs)  # noqa: E501
        else:
            (data) = self.monitor_group_remove_monitor_from_monitor_group_with_http_info(monitor_group_guid, monitor_guid, **kwargs)  # noqa: E501
            return data

    def monitor_group_remove_monitor_from_monitor_group_with_http_info(self, monitor_group_guid, monitor_guid, **kwargs):  # noqa: E501
        """Removes the specified monitor from the monitor group  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.monitor_group_remove_monitor_from_monitor_group_with_http_info(monitor_group_guid, monitor_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str monitor_group_guid: The Guid of the monitor group to remove the monitor from (required)
        :param str monitor_guid: The monitor Guid to be removed (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['monitor_group_guid', 'monitor_guid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method monitor_group_remove_monitor_from_monitor_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'monitor_group_guid' is set
        if ('monitor_group_guid' not in params or
                params['monitor_group_guid'] is None):
            raise ValueError("Missing the required parameter `monitor_group_guid` when calling `monitor_group_remove_monitor_from_monitor_group`")  # noqa: E501
        # verify the required parameter 'monitor_guid' is set
        if ('monitor_guid' not in params or
                params['monitor_guid'] is None):
            raise ValueError("Missing the required parameter `monitor_guid` when calling `monitor_group_remove_monitor_from_monitor_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'monitor_group_guid' in params:
            path_params['monitorGroupGuid'] = params['monitor_group_guid']  # noqa: E501
        if 'monitor_guid' in params:
            path_params['monitorGuid'] = params['monitor_guid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/MonitorGroup/{monitorGroupGuid}/Members/{monitorGuid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def monitor_group_start_all_monitor_alerts_in_group(self, monitor_group_guid, **kwargs):  # noqa: E501
        """Starts alerting for all monitors that are a member of the monitor group specified by the monitor group GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.monitor_group_start_all_monitor_alerts_in_group(monitor_group_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str monitor_group_guid: The monitor group GUID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.monitor_group_start_all_monitor_alerts_in_group_with_http_info(monitor_group_guid, **kwargs)  # noqa: E501
        else:
            (data) = self.monitor_group_start_all_monitor_alerts_in_group_with_http_info(monitor_group_guid, **kwargs)  # noqa: E501
            return data

    def monitor_group_start_all_monitor_alerts_in_group_with_http_info(self, monitor_group_guid, **kwargs):  # noqa: E501
        """Starts alerting for all monitors that are a member of the monitor group specified by the monitor group GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.monitor_group_start_all_monitor_alerts_in_group_with_http_info(monitor_group_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str monitor_group_guid: The monitor group GUID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['monitor_group_guid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method monitor_group_start_all_monitor_alerts_in_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'monitor_group_guid' is set
        if ('monitor_group_guid' not in params or
                params['monitor_group_guid'] is None):
            raise ValueError("Missing the required parameter `monitor_group_guid` when calling `monitor_group_start_all_monitor_alerts_in_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'monitor_group_guid' in params:
            path_params['monitorGroupGuid'] = params['monitor_group_guid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/MonitorGroup/{monitorGroupGuid}/StartAllMonitorAlerts', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def monitor_group_start_all_monitors_in_group(self, monitor_group_guid, **kwargs):  # noqa: E501
        """Starts all monitors that are a member of the monitor group specified by the monitor group GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.monitor_group_start_all_monitors_in_group(monitor_group_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str monitor_group_guid: The monitor group GUID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.monitor_group_start_all_monitors_in_group_with_http_info(monitor_group_guid, **kwargs)  # noqa: E501
        else:
            (data) = self.monitor_group_start_all_monitors_in_group_with_http_info(monitor_group_guid, **kwargs)  # noqa: E501
            return data

    def monitor_group_start_all_monitors_in_group_with_http_info(self, monitor_group_guid, **kwargs):  # noqa: E501
        """Starts all monitors that are a member of the monitor group specified by the monitor group GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.monitor_group_start_all_monitors_in_group_with_http_info(monitor_group_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str monitor_group_guid: The monitor group GUID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['monitor_group_guid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method monitor_group_start_all_monitors_in_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'monitor_group_guid' is set
        if ('monitor_group_guid' not in params or
                params['monitor_group_guid'] is None):
            raise ValueError("Missing the required parameter `monitor_group_guid` when calling `monitor_group_start_all_monitors_in_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'monitor_group_guid' in params:
            path_params['monitorGroupGuid'] = params['monitor_group_guid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/MonitorGroup/{monitorGroupGuid}/StartAllMonitors', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def monitor_group_stop_all_monitor_alerts_in_group(self, monitor_group_guid, **kwargs):  # noqa: E501
        """Stops alerting for all monitors that are a member of the monitor group specified by the monitor group GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.monitor_group_stop_all_monitor_alerts_in_group(monitor_group_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str monitor_group_guid: The monitor group GUID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.monitor_group_stop_all_monitor_alerts_in_group_with_http_info(monitor_group_guid, **kwargs)  # noqa: E501
        else:
            (data) = self.monitor_group_stop_all_monitor_alerts_in_group_with_http_info(monitor_group_guid, **kwargs)  # noqa: E501
            return data

    def monitor_group_stop_all_monitor_alerts_in_group_with_http_info(self, monitor_group_guid, **kwargs):  # noqa: E501
        """Stops alerting for all monitors that are a member of the monitor group specified by the monitor group GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.monitor_group_stop_all_monitor_alerts_in_group_with_http_info(monitor_group_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str monitor_group_guid: The monitor group GUID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['monitor_group_guid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method monitor_group_stop_all_monitor_alerts_in_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'monitor_group_guid' is set
        if ('monitor_group_guid' not in params or
                params['monitor_group_guid'] is None):
            raise ValueError("Missing the required parameter `monitor_group_guid` when calling `monitor_group_stop_all_monitor_alerts_in_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'monitor_group_guid' in params:
            path_params['monitorGroupGuid'] = params['monitor_group_guid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/MonitorGroup/{monitorGroupGuid}/StopAllMonitorAlerts', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def monitor_group_stop_all_monitors_in_group(self, monitor_group_guid, **kwargs):  # noqa: E501
        """Stops all monitors that are a member of the monitor group specified by the monitor group GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.monitor_group_stop_all_monitors_in_group(monitor_group_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str monitor_group_guid: The monitor group GUID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.monitor_group_stop_all_monitors_in_group_with_http_info(monitor_group_guid, **kwargs)  # noqa: E501
        else:
            (data) = self.monitor_group_stop_all_monitors_in_group_with_http_info(monitor_group_guid, **kwargs)  # noqa: E501
            return data

    def monitor_group_stop_all_monitors_in_group_with_http_info(self, monitor_group_guid, **kwargs):  # noqa: E501
        """Stops all monitors that are a member of the monitor group specified by the monitor group GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.monitor_group_stop_all_monitors_in_group_with_http_info(monitor_group_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str monitor_group_guid: The monitor group GUID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['monitor_group_guid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method monitor_group_stop_all_monitors_in_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'monitor_group_guid' is set
        if ('monitor_group_guid' not in params or
                params['monitor_group_guid'] is None):
            raise ValueError("Missing the required parameter `monitor_group_guid` when calling `monitor_group_stop_all_monitors_in_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'monitor_group_guid' in params:
            path_params['monitorGroupGuid'] = params['monitor_group_guid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/MonitorGroup/{monitorGroupGuid}/StopAllMonitors', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def monitor_group_update_monitor_group(self, item, monitor_group_guid, **kwargs):  # noqa: E501
        """Updates the monitor group with the Guid specified  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.monitor_group_update_monitor_group(item, monitor_group_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MonitorGroup item: The monitor group to be updated (required)
        :param str monitor_group_guid: The Guid of the monitor group to be updated (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.monitor_group_update_monitor_group_with_http_info(item, monitor_group_guid, **kwargs)  # noqa: E501
        else:
            (data) = self.monitor_group_update_monitor_group_with_http_info(item, monitor_group_guid, **kwargs)  # noqa: E501
            return data

    def monitor_group_update_monitor_group_with_http_info(self, item, monitor_group_guid, **kwargs):  # noqa: E501
        """Updates the monitor group with the Guid specified  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.monitor_group_update_monitor_group_with_http_info(item, monitor_group_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MonitorGroup item: The monitor group to be updated (required)
        :param str monitor_group_guid: The Guid of the monitor group to be updated (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['item', 'monitor_group_guid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method monitor_group_update_monitor_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'item' is set
        if ('item' not in params or
                params['item'] is None):
            raise ValueError("Missing the required parameter `item` when calling `monitor_group_update_monitor_group`")  # noqa: E501
        # verify the required parameter 'monitor_group_guid' is set
        if ('monitor_group_guid' not in params or
                params['monitor_group_guid'] is None):
            raise ValueError("Missing the required parameter `monitor_group_guid` when calling `monitor_group_update_monitor_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'monitor_group_guid' in params:
            path_params['monitorGroupGuid'] = params['monitor_group_guid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'item' in params:
            body_params = params['item']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/MonitorGroup/{monitorGroupGuid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
