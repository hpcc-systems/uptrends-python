# coding: utf-8

"""
    Uptrends API v4

    This document describes Uptrends API version 4. This Swagger environment also lets you execute API methods directly.  Please note that this is not a sandbox environment: these API methods operate directly on your actual Uptrends account.  For more information, please visit https://www.uptrends.com/api.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from uptrends.api_client import ApiClient


class VaultApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def vault_create_authorization_for_vault_section(self, authorization, vault_section_guid, **kwargs):  # noqa: E501
        """Creates a new authorization for the specified vault section.   # noqa: E501

        The AuthorizationId attribute should be omitted in the request body. The newly created authorization will be returned in the response. An authorization should be granted to either an individual operator, or an operator group. Therefore, either specify the OperatorGuid attribute or the OperatorGroupGuid attribute.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vault_create_authorization_for_vault_section(authorization, vault_section_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VaultSectionAuthorization authorization: (required)
        :param str vault_section_guid: The Guid of the vault section for which to create the new authorization. (required)
        :return: VaultSectionAuthorization
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.vault_create_authorization_for_vault_section_with_http_info(authorization, vault_section_guid, **kwargs)  # noqa: E501
        else:
            (data) = self.vault_create_authorization_for_vault_section_with_http_info(authorization, vault_section_guid, **kwargs)  # noqa: E501
            return data

    def vault_create_authorization_for_vault_section_with_http_info(self, authorization, vault_section_guid, **kwargs):  # noqa: E501
        """Creates a new authorization for the specified vault section.   # noqa: E501

        The AuthorizationId attribute should be omitted in the request body. The newly created authorization will be returned in the response. An authorization should be granted to either an individual operator, or an operator group. Therefore, either specify the OperatorGuid attribute or the OperatorGroupGuid attribute.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vault_create_authorization_for_vault_section_with_http_info(authorization, vault_section_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VaultSectionAuthorization authorization: (required)
        :param str vault_section_guid: The Guid of the vault section for which to create the new authorization. (required)
        :return: VaultSectionAuthorization
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'vault_section_guid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vault_create_authorization_for_vault_section" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `vault_create_authorization_for_vault_section`")  # noqa: E501
        # verify the required parameter 'vault_section_guid' is set
        if ('vault_section_guid' not in params or
                params['vault_section_guid'] is None):
            raise ValueError("Missing the required parameter `vault_section_guid` when calling `vault_create_authorization_for_vault_section`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vault_section_guid' in params:
            path_params['vaultSectionGuid'] = params['vault_section_guid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'authorization' in params:
            body_params = params['authorization']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/VaultSection/{vaultSectionGuid}/Authorization', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VaultSectionAuthorization',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vault_create_new_vault_item(self, item, **kwargs):  # noqa: E501
        """Creates a new vault item.  # noqa: E501

        The VaultItemGuid field should be omitted  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vault_create_new_vault_item(item, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VaultItem item: The item to create (required)
        :return: VaultItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.vault_create_new_vault_item_with_http_info(item, **kwargs)  # noqa: E501
        else:
            (data) = self.vault_create_new_vault_item_with_http_info(item, **kwargs)  # noqa: E501
            return data

    def vault_create_new_vault_item_with_http_info(self, item, **kwargs):  # noqa: E501
        """Creates a new vault item.  # noqa: E501

        The VaultItemGuid field should be omitted  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vault_create_new_vault_item_with_http_info(item, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VaultItem item: The item to create (required)
        :return: VaultItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['item']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vault_create_new_vault_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'item' is set
        if ('item' not in params or
                params['item'] is None):
            raise ValueError("Missing the required parameter `item` when calling `vault_create_new_vault_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'item' in params:
            body_params = params['item']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/VaultItem', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VaultItem',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vault_create_new_vault_section(self, section, **kwargs):  # noqa: E501
        """Creates a new vault section.  # noqa: E501

        When a new vault section is created, the user that created the section is granted View and Edit authorizations to that section. The VaultSectionGuid attribute should be omitted in the request body. The Guid of the newly created section will be returned in the response.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vault_create_new_vault_section(section, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VaultSection section: The attributes of the vault section that should be created. (required)
        :return: VaultSection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.vault_create_new_vault_section_with_http_info(section, **kwargs)  # noqa: E501
        else:
            (data) = self.vault_create_new_vault_section_with_http_info(section, **kwargs)  # noqa: E501
            return data

    def vault_create_new_vault_section_with_http_info(self, section, **kwargs):  # noqa: E501
        """Creates a new vault section.  # noqa: E501

        When a new vault section is created, the user that created the section is granted View and Edit authorizations to that section. The VaultSectionGuid attribute should be omitted in the request body. The Guid of the newly created section will be returned in the response.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vault_create_new_vault_section_with_http_info(section, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VaultSection section: The attributes of the vault section that should be created. (required)
        :return: VaultSection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['section']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vault_create_new_vault_section" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'section' is set
        if ('section' not in params or
                params['section'] is None):
            raise ValueError("Missing the required parameter `section` when calling `vault_create_new_vault_section`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'section' in params:
            body_params = params['section']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/VaultSection', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VaultSection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vault_delete_authorization_for_vault_section(self, vault_section_guid, authorization_guid, **kwargs):  # noqa: E501
        """Deletes the specified authorization for the specified vault section.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vault_delete_authorization_for_vault_section(vault_section_guid, authorization_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vault_section_guid: The Guid of the vault section for which the authorization should be deleted. (required)
        :param str authorization_guid: The Guid of the authorization that should be deleted. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.vault_delete_authorization_for_vault_section_with_http_info(vault_section_guid, authorization_guid, **kwargs)  # noqa: E501
        else:
            (data) = self.vault_delete_authorization_for_vault_section_with_http_info(vault_section_guid, authorization_guid, **kwargs)  # noqa: E501
            return data

    def vault_delete_authorization_for_vault_section_with_http_info(self, vault_section_guid, authorization_guid, **kwargs):  # noqa: E501
        """Deletes the specified authorization for the specified vault section.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vault_delete_authorization_for_vault_section_with_http_info(vault_section_guid, authorization_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vault_section_guid: The Guid of the vault section for which the authorization should be deleted. (required)
        :param str authorization_guid: The Guid of the authorization that should be deleted. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vault_section_guid', 'authorization_guid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vault_delete_authorization_for_vault_section" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vault_section_guid' is set
        if ('vault_section_guid' not in params or
                params['vault_section_guid'] is None):
            raise ValueError("Missing the required parameter `vault_section_guid` when calling `vault_delete_authorization_for_vault_section`")  # noqa: E501
        # verify the required parameter 'authorization_guid' is set
        if ('authorization_guid' not in params or
                params['authorization_guid'] is None):
            raise ValueError("Missing the required parameter `authorization_guid` when calling `vault_delete_authorization_for_vault_section`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vault_section_guid' in params:
            path_params['vaultSectionGuid'] = params['vault_section_guid']  # noqa: E501
        if 'authorization_guid' in params:
            path_params['authorizationGuid'] = params['authorization_guid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/VaultSection/{vaultSectionGuid}/Authorization/{authorizationGuid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vault_delete_vault_item(self, vault_item_guid, **kwargs):  # noqa: E501
        """Deletes the specified vault item.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vault_delete_vault_item(vault_item_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vault_item_guid: The Guid of the vault item that should be deleted. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.vault_delete_vault_item_with_http_info(vault_item_guid, **kwargs)  # noqa: E501
        else:
            (data) = self.vault_delete_vault_item_with_http_info(vault_item_guid, **kwargs)  # noqa: E501
            return data

    def vault_delete_vault_item_with_http_info(self, vault_item_guid, **kwargs):  # noqa: E501
        """Deletes the specified vault item.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vault_delete_vault_item_with_http_info(vault_item_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vault_item_guid: The Guid of the vault item that should be deleted. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vault_item_guid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vault_delete_vault_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vault_item_guid' is set
        if ('vault_item_guid' not in params or
                params['vault_item_guid'] is None):
            raise ValueError("Missing the required parameter `vault_item_guid` when calling `vault_delete_vault_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vault_item_guid' in params:
            path_params['vaultItemGuid'] = params['vault_item_guid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/VaultItem/{vaultItemGuid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vault_delete_vault_section(self, vault_section_guid, **kwargs):  # noqa: E501
        """Deletes the specified vault section.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vault_delete_vault_section(vault_section_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vault_section_guid: The Guid of the vault section that should be deleted. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.vault_delete_vault_section_with_http_info(vault_section_guid, **kwargs)  # noqa: E501
        else:
            (data) = self.vault_delete_vault_section_with_http_info(vault_section_guid, **kwargs)  # noqa: E501
            return data

    def vault_delete_vault_section_with_http_info(self, vault_section_guid, **kwargs):  # noqa: E501
        """Deletes the specified vault section.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vault_delete_vault_section_with_http_info(vault_section_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vault_section_guid: The Guid of the vault section that should be deleted. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vault_section_guid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vault_delete_vault_section" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vault_section_guid' is set
        if ('vault_section_guid' not in params or
                params['vault_section_guid'] is None):
            raise ValueError("Missing the required parameter `vault_section_guid` when calling `vault_delete_vault_section`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vault_section_guid' in params:
            path_params['vaultSectionGuid'] = params['vault_section_guid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/VaultSection/{vaultSectionGuid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vault_get_all_vault_items(self, **kwargs):  # noqa: E501
        """Returns all vault items.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vault_get_all_vault_items(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[VaultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.vault_get_all_vault_items_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.vault_get_all_vault_items_with_http_info(**kwargs)  # noqa: E501
            return data

    def vault_get_all_vault_items_with_http_info(self, **kwargs):  # noqa: E501
        """Returns all vault items.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vault_get_all_vault_items_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[VaultItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vault_get_all_vault_items" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/VaultItem', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[VaultItem]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vault_get_all_vault_sections(self, **kwargs):  # noqa: E501
        """Returns all vault sections.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vault_get_all_vault_sections(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[VaultSection]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.vault_get_all_vault_sections_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.vault_get_all_vault_sections_with_http_info(**kwargs)  # noqa: E501
            return data

    def vault_get_all_vault_sections_with_http_info(self, **kwargs):  # noqa: E501
        """Returns all vault sections.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vault_get_all_vault_sections_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[VaultSection]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vault_get_all_vault_sections" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/VaultSection', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[VaultSection]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vault_get_authorizations_for_vault_section(self, vault_section_guid, **kwargs):  # noqa: E501
        """Returns all authorizations for the specified vault section.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vault_get_authorizations_for_vault_section(vault_section_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vault_section_guid: The Guid of the vault section for which to return authorizations. (required)
        :return: VaultSectionAuthorization
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.vault_get_authorizations_for_vault_section_with_http_info(vault_section_guid, **kwargs)  # noqa: E501
        else:
            (data) = self.vault_get_authorizations_for_vault_section_with_http_info(vault_section_guid, **kwargs)  # noqa: E501
            return data

    def vault_get_authorizations_for_vault_section_with_http_info(self, vault_section_guid, **kwargs):  # noqa: E501
        """Returns all authorizations for the specified vault section.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vault_get_authorizations_for_vault_section_with_http_info(vault_section_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vault_section_guid: The Guid of the vault section for which to return authorizations. (required)
        :return: VaultSectionAuthorization
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vault_section_guid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vault_get_authorizations_for_vault_section" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vault_section_guid' is set
        if ('vault_section_guid' not in params or
                params['vault_section_guid'] is None):
            raise ValueError("Missing the required parameter `vault_section_guid` when calling `vault_get_authorizations_for_vault_section`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vault_section_guid' in params:
            path_params['vaultSectionGuid'] = params['vault_section_guid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/VaultSection/{vaultSectionGuid}/Authorization', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VaultSectionAuthorization',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vault_get_vault_item(self, vault_item_guid, **kwargs):  # noqa: E501
        """Returns the specified vault item.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vault_get_vault_item(vault_item_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vault_item_guid: The Guid of the requested vault item. (required)
        :return: VaultItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.vault_get_vault_item_with_http_info(vault_item_guid, **kwargs)  # noqa: E501
        else:
            (data) = self.vault_get_vault_item_with_http_info(vault_item_guid, **kwargs)  # noqa: E501
            return data

    def vault_get_vault_item_with_http_info(self, vault_item_guid, **kwargs):  # noqa: E501
        """Returns the specified vault item.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vault_get_vault_item_with_http_info(vault_item_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vault_item_guid: The Guid of the requested vault item. (required)
        :return: VaultItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vault_item_guid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vault_get_vault_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vault_item_guid' is set
        if ('vault_item_guid' not in params or
                params['vault_item_guid'] is None):
            raise ValueError("Missing the required parameter `vault_item_guid` when calling `vault_get_vault_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vault_item_guid' in params:
            path_params['vaultItemGuid'] = params['vault_item_guid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/VaultItem/{vaultItemGuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VaultItem',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vault_get_vault_section(self, vault_section_guid, **kwargs):  # noqa: E501
        """Returns the specified vault section.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vault_get_vault_section(vault_section_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vault_section_guid: The Guid of the requested vault section. (required)
        :return: VaultSection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.vault_get_vault_section_with_http_info(vault_section_guid, **kwargs)  # noqa: E501
        else:
            (data) = self.vault_get_vault_section_with_http_info(vault_section_guid, **kwargs)  # noqa: E501
            return data

    def vault_get_vault_section_with_http_info(self, vault_section_guid, **kwargs):  # noqa: E501
        """Returns the specified vault section.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vault_get_vault_section_with_http_info(vault_section_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vault_section_guid: The Guid of the requested vault section. (required)
        :return: VaultSection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vault_section_guid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vault_get_vault_section" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vault_section_guid' is set
        if ('vault_section_guid' not in params or
                params['vault_section_guid'] is None):
            raise ValueError("Missing the required parameter `vault_section_guid` when calling `vault_get_vault_section`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vault_section_guid' in params:
            path_params['vaultSectionGuid'] = params['vault_section_guid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/VaultSection/{vaultSectionGuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VaultSection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vault_update_vault_item(self, item, vault_item_guid, **kwargs):  # noqa: E501
        """Updates the specified vault item.  # noqa: E501

        Only complete definitions are accepted. Fields not specified will be NULLed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vault_update_vault_item(item, vault_item_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VaultItem item: The complete definition of the vault item that should be updated. (required)
        :param str vault_item_guid: The Guid of the vault item that should be updated. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.vault_update_vault_item_with_http_info(item, vault_item_guid, **kwargs)  # noqa: E501
        else:
            (data) = self.vault_update_vault_item_with_http_info(item, vault_item_guid, **kwargs)  # noqa: E501
            return data

    def vault_update_vault_item_with_http_info(self, item, vault_item_guid, **kwargs):  # noqa: E501
        """Updates the specified vault item.  # noqa: E501

        Only complete definitions are accepted. Fields not specified will be NULLed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vault_update_vault_item_with_http_info(item, vault_item_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VaultItem item: The complete definition of the vault item that should be updated. (required)
        :param str vault_item_guid: The Guid of the vault item that should be updated. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['item', 'vault_item_guid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vault_update_vault_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'item' is set
        if ('item' not in params or
                params['item'] is None):
            raise ValueError("Missing the required parameter `item` when calling `vault_update_vault_item`")  # noqa: E501
        # verify the required parameter 'vault_item_guid' is set
        if ('vault_item_guid' not in params or
                params['vault_item_guid'] is None):
            raise ValueError("Missing the required parameter `vault_item_guid` when calling `vault_update_vault_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vault_item_guid' in params:
            path_params['vaultItemGuid'] = params['vault_item_guid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'item' in params:
            body_params = params['item']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/VaultItem/{vaultItemGuid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vault_update_vault_section(self, item, vault_section_guid, **kwargs):  # noqa: E501
        """Updates the specified vault section.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vault_update_vault_section(item, vault_section_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VaultSection item: (required)
        :param str vault_section_guid: The Guid of the vault section that should be updated. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.vault_update_vault_section_with_http_info(item, vault_section_guid, **kwargs)  # noqa: E501
        else:
            (data) = self.vault_update_vault_section_with_http_info(item, vault_section_guid, **kwargs)  # noqa: E501
            return data

    def vault_update_vault_section_with_http_info(self, item, vault_section_guid, **kwargs):  # noqa: E501
        """Updates the specified vault section.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vault_update_vault_section_with_http_info(item, vault_section_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VaultSection item: (required)
        :param str vault_section_guid: The Guid of the vault section that should be updated. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['item', 'vault_section_guid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vault_update_vault_section" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'item' is set
        if ('item' not in params or
                params['item'] is None):
            raise ValueError("Missing the required parameter `item` when calling `vault_update_vault_section`")  # noqa: E501
        # verify the required parameter 'vault_section_guid' is set
        if ('vault_section_guid' not in params or
                params['vault_section_guid'] is None):
            raise ValueError("Missing the required parameter `vault_section_guid` when calling `vault_update_vault_section`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vault_section_guid' in params:
            path_params['vaultSectionGuid'] = params['vault_section_guid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'item' in params:
            body_params = params['item']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/VaultSection/{vaultSectionGuid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
