# coding: utf-8

"""
    Uptrends API v4

    This document describes Uptrends API version 4. This Swagger environment also lets you execute API methods directly.  Please note that this is not a sandbox environment: these API methods operate directly on your actual Uptrends account.  For more information, please visit https://www.uptrends.com/api.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from uptrends.api_client import ApiClient


class AlertDefinitionApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def alert_definition_add_monitor_group_to_alert_definition(self, alert_definition_guid, monitor_group_guid, **kwargs):  # noqa: E501
        """Adds a monitor group to the specified alert definition.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.alert_definition_add_monitor_group_to_alert_definition(alert_definition_guid, monitor_group_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str alert_definition_guid: The Guid of the alert definition to modify. (required)
        :param str monitor_group_guid: The Guid of the monitor group to add. (required)
        :return: AlertDefinitionMonitorGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.alert_definition_add_monitor_group_to_alert_definition_with_http_info(alert_definition_guid, monitor_group_guid, **kwargs)  # noqa: E501
        else:
            (data) = self.alert_definition_add_monitor_group_to_alert_definition_with_http_info(alert_definition_guid, monitor_group_guid, **kwargs)  # noqa: E501
            return data

    def alert_definition_add_monitor_group_to_alert_definition_with_http_info(self, alert_definition_guid, monitor_group_guid, **kwargs):  # noqa: E501
        """Adds a monitor group to the specified alert definition.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.alert_definition_add_monitor_group_to_alert_definition_with_http_info(alert_definition_guid, monitor_group_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str alert_definition_guid: The Guid of the alert definition to modify. (required)
        :param str monitor_group_guid: The Guid of the monitor group to add. (required)
        :return: AlertDefinitionMonitorGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['alert_definition_guid', 'monitor_group_guid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method alert_definition_add_monitor_group_to_alert_definition" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'alert_definition_guid' is set
        if ('alert_definition_guid' not in params or
                params['alert_definition_guid'] is None):
            raise ValueError("Missing the required parameter `alert_definition_guid` when calling `alert_definition_add_monitor_group_to_alert_definition`")  # noqa: E501
        # verify the required parameter 'monitor_group_guid' is set
        if ('monitor_group_guid' not in params or
                params['monitor_group_guid'] is None):
            raise ValueError("Missing the required parameter `monitor_group_guid` when calling `alert_definition_add_monitor_group_to_alert_definition`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'alert_definition_guid' in params:
            path_params['alertDefinitionGuid'] = params['alert_definition_guid']  # noqa: E501
        if 'monitor_group_guid' in params:
            path_params['monitorGroupGuid'] = params['monitor_group_guid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/AlertDefinition/{alertDefinitionGuid}/Members/MonitorGroup/{monitorGroupGuid}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AlertDefinitionMonitorGroup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def alert_definition_add_monitor_to_alert_definition(self, alert_definition_guid, monitor_guid, **kwargs):  # noqa: E501
        """Adds a monitor to the specified alert definition.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.alert_definition_add_monitor_to_alert_definition(alert_definition_guid, monitor_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str alert_definition_guid: The Guid of the alert definition to modify. (required)
        :param str monitor_guid: The Guid of the monitor to add. (required)
        :return: AlertDefinitionMonitor
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.alert_definition_add_monitor_to_alert_definition_with_http_info(alert_definition_guid, monitor_guid, **kwargs)  # noqa: E501
        else:
            (data) = self.alert_definition_add_monitor_to_alert_definition_with_http_info(alert_definition_guid, monitor_guid, **kwargs)  # noqa: E501
            return data

    def alert_definition_add_monitor_to_alert_definition_with_http_info(self, alert_definition_guid, monitor_guid, **kwargs):  # noqa: E501
        """Adds a monitor to the specified alert definition.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.alert_definition_add_monitor_to_alert_definition_with_http_info(alert_definition_guid, monitor_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str alert_definition_guid: The Guid of the alert definition to modify. (required)
        :param str monitor_guid: The Guid of the monitor to add. (required)
        :return: AlertDefinitionMonitor
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['alert_definition_guid', 'monitor_guid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method alert_definition_add_monitor_to_alert_definition" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'alert_definition_guid' is set
        if ('alert_definition_guid' not in params or
                params['alert_definition_guid'] is None):
            raise ValueError("Missing the required parameter `alert_definition_guid` when calling `alert_definition_add_monitor_to_alert_definition`")  # noqa: E501
        # verify the required parameter 'monitor_guid' is set
        if ('monitor_guid' not in params or
                params['monitor_guid'] is None):
            raise ValueError("Missing the required parameter `monitor_guid` when calling `alert_definition_add_monitor_to_alert_definition`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'alert_definition_guid' in params:
            path_params['alertDefinitionGuid'] = params['alert_definition_guid']  # noqa: E501
        if 'monitor_guid' in params:
            path_params['monitorGuid'] = params['monitor_guid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/AlertDefinition/{alertDefinitionGuid}/Members/Monitor/{monitorGuid}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AlertDefinitionMonitor',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def alert_definition_add_operator_group_to_escalation_level(self, alert_definition_guid, escalation_level_id, operator_group_guid, **kwargs):  # noqa: E501
        """Adds an operator group to the specified escalation level.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.alert_definition_add_operator_group_to_escalation_level(alert_definition_guid, escalation_level_id, operator_group_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str alert_definition_guid: The Guid of the alert definition. (required)
        :param int escalation_level_id: The escalation level id. (required)
        :param str operator_group_guid: The Guid of the operator group to add. (required)
        :return: AlertDefinitionOperatorGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.alert_definition_add_operator_group_to_escalation_level_with_http_info(alert_definition_guid, escalation_level_id, operator_group_guid, **kwargs)  # noqa: E501
        else:
            (data) = self.alert_definition_add_operator_group_to_escalation_level_with_http_info(alert_definition_guid, escalation_level_id, operator_group_guid, **kwargs)  # noqa: E501
            return data

    def alert_definition_add_operator_group_to_escalation_level_with_http_info(self, alert_definition_guid, escalation_level_id, operator_group_guid, **kwargs):  # noqa: E501
        """Adds an operator group to the specified escalation level.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.alert_definition_add_operator_group_to_escalation_level_with_http_info(alert_definition_guid, escalation_level_id, operator_group_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str alert_definition_guid: The Guid of the alert definition. (required)
        :param int escalation_level_id: The escalation level id. (required)
        :param str operator_group_guid: The Guid of the operator group to add. (required)
        :return: AlertDefinitionOperatorGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['alert_definition_guid', 'escalation_level_id', 'operator_group_guid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method alert_definition_add_operator_group_to_escalation_level" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'alert_definition_guid' is set
        if ('alert_definition_guid' not in params or
                params['alert_definition_guid'] is None):
            raise ValueError("Missing the required parameter `alert_definition_guid` when calling `alert_definition_add_operator_group_to_escalation_level`")  # noqa: E501
        # verify the required parameter 'escalation_level_id' is set
        if ('escalation_level_id' not in params or
                params['escalation_level_id'] is None):
            raise ValueError("Missing the required parameter `escalation_level_id` when calling `alert_definition_add_operator_group_to_escalation_level`")  # noqa: E501
        # verify the required parameter 'operator_group_guid' is set
        if ('operator_group_guid' not in params or
                params['operator_group_guid'] is None):
            raise ValueError("Missing the required parameter `operator_group_guid` when calling `alert_definition_add_operator_group_to_escalation_level`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'alert_definition_guid' in params:
            path_params['alertDefinitionGuid'] = params['alert_definition_guid']  # noqa: E501
        if 'escalation_level_id' in params:
            path_params['escalationLevelId'] = params['escalation_level_id']  # noqa: E501
        if 'operator_group_guid' in params:
            path_params['operatorGroupGuid'] = params['operator_group_guid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/AlertDefinition/{alertDefinitionGuid}/EscalationLevel/{escalationLevelId}/Members/OperatorGroup/{operatorGroupGuid}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AlertDefinitionOperatorGroup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def alert_definition_add_operator_to_escalation_level(self, alert_definition_guid, escalation_level_id, operator_guid, **kwargs):  # noqa: E501
        """Adds an operator to the specified escalation level.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.alert_definition_add_operator_to_escalation_level(alert_definition_guid, escalation_level_id, operator_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str alert_definition_guid: The Guid of the alert definition. (required)
        :param int escalation_level_id: The escalation level id. (required)
        :param str operator_guid: The Guid of the operator to add. (required)
        :return: AlertDefinitionOperator
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.alert_definition_add_operator_to_escalation_level_with_http_info(alert_definition_guid, escalation_level_id, operator_guid, **kwargs)  # noqa: E501
        else:
            (data) = self.alert_definition_add_operator_to_escalation_level_with_http_info(alert_definition_guid, escalation_level_id, operator_guid, **kwargs)  # noqa: E501
            return data

    def alert_definition_add_operator_to_escalation_level_with_http_info(self, alert_definition_guid, escalation_level_id, operator_guid, **kwargs):  # noqa: E501
        """Adds an operator to the specified escalation level.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.alert_definition_add_operator_to_escalation_level_with_http_info(alert_definition_guid, escalation_level_id, operator_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str alert_definition_guid: The Guid of the alert definition. (required)
        :param int escalation_level_id: The escalation level id. (required)
        :param str operator_guid: The Guid of the operator to add. (required)
        :return: AlertDefinitionOperator
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['alert_definition_guid', 'escalation_level_id', 'operator_guid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method alert_definition_add_operator_to_escalation_level" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'alert_definition_guid' is set
        if ('alert_definition_guid' not in params or
                params['alert_definition_guid'] is None):
            raise ValueError("Missing the required parameter `alert_definition_guid` when calling `alert_definition_add_operator_to_escalation_level`")  # noqa: E501
        # verify the required parameter 'escalation_level_id' is set
        if ('escalation_level_id' not in params or
                params['escalation_level_id'] is None):
            raise ValueError("Missing the required parameter `escalation_level_id` when calling `alert_definition_add_operator_to_escalation_level`")  # noqa: E501
        # verify the required parameter 'operator_guid' is set
        if ('operator_guid' not in params or
                params['operator_guid'] is None):
            raise ValueError("Missing the required parameter `operator_guid` when calling `alert_definition_add_operator_to_escalation_level`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'alert_definition_guid' in params:
            path_params['alertDefinitionGuid'] = params['alert_definition_guid']  # noqa: E501
        if 'escalation_level_id' in params:
            path_params['escalationLevelId'] = params['escalation_level_id']  # noqa: E501
        if 'operator_guid' in params:
            path_params['operatorGuid'] = params['operator_guid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/AlertDefinition/{alertDefinitionGuid}/EscalationLevel/{escalationLevelId}/Members/Operator/{operatorGuid}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AlertDefinitionOperator',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def alert_definition_create_alert_definition(self, alert_definition, **kwargs):  # noqa: E501
        """Creates a new alert definition.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.alert_definition_create_alert_definition(alert_definition, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AlertDefinition alert_definition: The details of the alert definition to create. (required)
        :return: AlertDefinition
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.alert_definition_create_alert_definition_with_http_info(alert_definition, **kwargs)  # noqa: E501
        else:
            (data) = self.alert_definition_create_alert_definition_with_http_info(alert_definition, **kwargs)  # noqa: E501
            return data

    def alert_definition_create_alert_definition_with_http_info(self, alert_definition, **kwargs):  # noqa: E501
        """Creates a new alert definition.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.alert_definition_create_alert_definition_with_http_info(alert_definition, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AlertDefinition alert_definition: The details of the alert definition to create. (required)
        :return: AlertDefinition
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['alert_definition']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method alert_definition_create_alert_definition" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'alert_definition' is set
        if ('alert_definition' not in params or
                params['alert_definition'] is None):
            raise ValueError("Missing the required parameter `alert_definition` when calling `alert_definition_create_alert_definition`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'alert_definition' in params:
            body_params = params['alert_definition']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/AlertDefinition', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AlertDefinition',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def alert_definition_delete_alert_definition(self, alert_definition_guid, **kwargs):  # noqa: E501
        """Deletes an existing alert definition.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.alert_definition_delete_alert_definition(alert_definition_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str alert_definition_guid: The Guid of the alert definition to remove. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.alert_definition_delete_alert_definition_with_http_info(alert_definition_guid, **kwargs)  # noqa: E501
        else:
            (data) = self.alert_definition_delete_alert_definition_with_http_info(alert_definition_guid, **kwargs)  # noqa: E501
            return data

    def alert_definition_delete_alert_definition_with_http_info(self, alert_definition_guid, **kwargs):  # noqa: E501
        """Deletes an existing alert definition.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.alert_definition_delete_alert_definition_with_http_info(alert_definition_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str alert_definition_guid: The Guid of the alert definition to remove. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['alert_definition_guid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method alert_definition_delete_alert_definition" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'alert_definition_guid' is set
        if ('alert_definition_guid' not in params or
                params['alert_definition_guid'] is None):
            raise ValueError("Missing the required parameter `alert_definition_guid` when calling `alert_definition_delete_alert_definition`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'alert_definition_guid' in params:
            path_params['alertDefinitionGuid'] = params['alert_definition_guid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/AlertDefinition/{alertDefinitionGuid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def alert_definition_get_all_alert_definitions(self, **kwargs):  # noqa: E501
        """Gets a list of all alert definitions.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.alert_definition_get_all_alert_definitions(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[AlertDefinition]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.alert_definition_get_all_alert_definitions_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.alert_definition_get_all_alert_definitions_with_http_info(**kwargs)  # noqa: E501
            return data

    def alert_definition_get_all_alert_definitions_with_http_info(self, **kwargs):  # noqa: E501
        """Gets a list of all alert definitions.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.alert_definition_get_all_alert_definitions_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[AlertDefinition]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method alert_definition_get_all_alert_definitions" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/AlertDefinition', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AlertDefinition]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def alert_definition_get_all_members(self, alert_definition_guid, **kwargs):  # noqa: E501
        """Gets a list of all monitor and monitor group guids of the specified alert definition.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.alert_definition_get_all_members(alert_definition_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str alert_definition_guid: The Guid of the alert definition for which to return the members. (required)
        :return: list[AlertDefinitionMember]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.alert_definition_get_all_members_with_http_info(alert_definition_guid, **kwargs)  # noqa: E501
        else:
            (data) = self.alert_definition_get_all_members_with_http_info(alert_definition_guid, **kwargs)  # noqa: E501
            return data

    def alert_definition_get_all_members_with_http_info(self, alert_definition_guid, **kwargs):  # noqa: E501
        """Gets a list of all monitor and monitor group guids of the specified alert definition.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.alert_definition_get_all_members_with_http_info(alert_definition_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str alert_definition_guid: The Guid of the alert definition for which to return the members. (required)
        :return: list[AlertDefinitionMember]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['alert_definition_guid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method alert_definition_get_all_members" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'alert_definition_guid' is set
        if ('alert_definition_guid' not in params or
                params['alert_definition_guid'] is None):
            raise ValueError("Missing the required parameter `alert_definition_guid` when calling `alert_definition_get_all_members`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'alert_definition_guid' in params:
            path_params['alertDefinitionGuid'] = params['alert_definition_guid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/AlertDefinition/{alertDefinitionGuid}/Members', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AlertDefinitionMember]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def alert_definition_get_escalation_level(self, alert_definition_guid, escalation_level_id, **kwargs):  # noqa: E501
        """Gets the escalation level information of the specified alert definition.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.alert_definition_get_escalation_level(alert_definition_guid, escalation_level_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str alert_definition_guid: The Guid of the alert definition. (required)
        :param int escalation_level_id: The escalation level id. (required)
        :return: list[EscalationLevel]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.alert_definition_get_escalation_level_with_http_info(alert_definition_guid, escalation_level_id, **kwargs)  # noqa: E501
        else:
            (data) = self.alert_definition_get_escalation_level_with_http_info(alert_definition_guid, escalation_level_id, **kwargs)  # noqa: E501
            return data

    def alert_definition_get_escalation_level_with_http_info(self, alert_definition_guid, escalation_level_id, **kwargs):  # noqa: E501
        """Gets the escalation level information of the specified alert definition.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.alert_definition_get_escalation_level_with_http_info(alert_definition_guid, escalation_level_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str alert_definition_guid: The Guid of the alert definition. (required)
        :param int escalation_level_id: The escalation level id. (required)
        :return: list[EscalationLevel]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['alert_definition_guid', 'escalation_level_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method alert_definition_get_escalation_level" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'alert_definition_guid' is set
        if ('alert_definition_guid' not in params or
                params['alert_definition_guid'] is None):
            raise ValueError("Missing the required parameter `alert_definition_guid` when calling `alert_definition_get_escalation_level`")  # noqa: E501
        # verify the required parameter 'escalation_level_id' is set
        if ('escalation_level_id' not in params or
                params['escalation_level_id'] is None):
            raise ValueError("Missing the required parameter `escalation_level_id` when calling `alert_definition_get_escalation_level`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'alert_definition_guid' in params:
            path_params['alertDefinitionGuid'] = params['alert_definition_guid']  # noqa: E501
        if 'escalation_level_id' in params:
            path_params['escalationLevelId'] = params['escalation_level_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/AlertDefinition/{alertDefinitionGuid}/EscalationLevel/{escalationLevelId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EscalationLevel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def alert_definition_get_escalation_level_integration(self, alert_definition_guid, escalation_level_id, **kwargs):  # noqa: E501
        """Gets the integrations for the specified escalation level.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.alert_definition_get_escalation_level_integration(alert_definition_guid, escalation_level_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str alert_definition_guid: The Guid of the alert definition. (required)
        :param int escalation_level_id: The escalation level id. (required)
        :return: list[Integration]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.alert_definition_get_escalation_level_integration_with_http_info(alert_definition_guid, escalation_level_id, **kwargs)  # noqa: E501
        else:
            (data) = self.alert_definition_get_escalation_level_integration_with_http_info(alert_definition_guid, escalation_level_id, **kwargs)  # noqa: E501
            return data

    def alert_definition_get_escalation_level_integration_with_http_info(self, alert_definition_guid, escalation_level_id, **kwargs):  # noqa: E501
        """Gets the integrations for the specified escalation level.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.alert_definition_get_escalation_level_integration_with_http_info(alert_definition_guid, escalation_level_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str alert_definition_guid: The Guid of the alert definition. (required)
        :param int escalation_level_id: The escalation level id. (required)
        :return: list[Integration]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['alert_definition_guid', 'escalation_level_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method alert_definition_get_escalation_level_integration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'alert_definition_guid' is set
        if ('alert_definition_guid' not in params or
                params['alert_definition_guid'] is None):
            raise ValueError("Missing the required parameter `alert_definition_guid` when calling `alert_definition_get_escalation_level_integration`")  # noqa: E501
        # verify the required parameter 'escalation_level_id' is set
        if ('escalation_level_id' not in params or
                params['escalation_level_id'] is None):
            raise ValueError("Missing the required parameter `escalation_level_id` when calling `alert_definition_get_escalation_level_integration`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'alert_definition_guid' in params:
            path_params['alertDefinitionGuid'] = params['alert_definition_guid']  # noqa: E501
        if 'escalation_level_id' in params:
            path_params['escalationLevelId'] = params['escalation_level_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/AlertDefinition/{alertDefinitionGuid}/EscalationLevel/{escalationLevelId}/Integration', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Integration]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def alert_definition_get_escalation_level_operator(self, alert_definition_guid, escalation_level_id, **kwargs):  # noqa: E501
        """Gets the operator and operator group guids for the specified escalation level.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.alert_definition_get_escalation_level_operator(alert_definition_guid, escalation_level_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str alert_definition_guid: The Guid of the alert definition. (required)
        :param int escalation_level_id: The escalation level id. (required)
        :return: list[AlertEscalationLevelMember]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.alert_definition_get_escalation_level_operator_with_http_info(alert_definition_guid, escalation_level_id, **kwargs)  # noqa: E501
        else:
            (data) = self.alert_definition_get_escalation_level_operator_with_http_info(alert_definition_guid, escalation_level_id, **kwargs)  # noqa: E501
            return data

    def alert_definition_get_escalation_level_operator_with_http_info(self, alert_definition_guid, escalation_level_id, **kwargs):  # noqa: E501
        """Gets the operator and operator group guids for the specified escalation level.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.alert_definition_get_escalation_level_operator_with_http_info(alert_definition_guid, escalation_level_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str alert_definition_guid: The Guid of the alert definition. (required)
        :param int escalation_level_id: The escalation level id. (required)
        :return: list[AlertEscalationLevelMember]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['alert_definition_guid', 'escalation_level_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method alert_definition_get_escalation_level_operator" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'alert_definition_guid' is set
        if ('alert_definition_guid' not in params or
                params['alert_definition_guid'] is None):
            raise ValueError("Missing the required parameter `alert_definition_guid` when calling `alert_definition_get_escalation_level_operator`")  # noqa: E501
        # verify the required parameter 'escalation_level_id' is set
        if ('escalation_level_id' not in params or
                params['escalation_level_id'] is None):
            raise ValueError("Missing the required parameter `escalation_level_id` when calling `alert_definition_get_escalation_level_operator`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'alert_definition_guid' in params:
            path_params['alertDefinitionGuid'] = params['alert_definition_guid']  # noqa: E501
        if 'escalation_level_id' in params:
            path_params['escalationLevelId'] = params['escalation_level_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/AlertDefinition/{alertDefinitionGuid}/EscalationLevel/{escalationLevelId}/Members', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AlertEscalationLevelMember]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def alert_definition_get_specified_alert_definitions(self, alert_definition_guid, **kwargs):  # noqa: E501
        """Gets the specified alert definition.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.alert_definition_get_specified_alert_definitions(alert_definition_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str alert_definition_guid: The Guid of the alert definition. (required)
        :return: AlertDefinition
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.alert_definition_get_specified_alert_definitions_with_http_info(alert_definition_guid, **kwargs)  # noqa: E501
        else:
            (data) = self.alert_definition_get_specified_alert_definitions_with_http_info(alert_definition_guid, **kwargs)  # noqa: E501
            return data

    def alert_definition_get_specified_alert_definitions_with_http_info(self, alert_definition_guid, **kwargs):  # noqa: E501
        """Gets the specified alert definition.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.alert_definition_get_specified_alert_definitions_with_http_info(alert_definition_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str alert_definition_guid: The Guid of the alert definition. (required)
        :return: AlertDefinition
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['alert_definition_guid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method alert_definition_get_specified_alert_definitions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'alert_definition_guid' is set
        if ('alert_definition_guid' not in params or
                params['alert_definition_guid'] is None):
            raise ValueError("Missing the required parameter `alert_definition_guid` when calling `alert_definition_get_specified_alert_definitions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'alert_definition_guid' in params:
            path_params['alertDefinitionGuid'] = params['alert_definition_guid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/AlertDefinition/{alertDefinitionGuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AlertDefinition',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def alert_definition_patch_alert_definition(self, alert_definition, alert_definition_guid, **kwargs):  # noqa: E501
        """Partially updates the definition of the specified alert definition.  # noqa: E501

        This methods accepts parts of an alert definition. Fields that do not require changes can be omitted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.alert_definition_patch_alert_definition(alert_definition, alert_definition_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AlertDefinition alert_definition: The partial definition for the alert definition that should be updated. (required)
        :param str alert_definition_guid: The Guid of the alert definition that should be updated. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.alert_definition_patch_alert_definition_with_http_info(alert_definition, alert_definition_guid, **kwargs)  # noqa: E501
        else:
            (data) = self.alert_definition_patch_alert_definition_with_http_info(alert_definition, alert_definition_guid, **kwargs)  # noqa: E501
            return data

    def alert_definition_patch_alert_definition_with_http_info(self, alert_definition, alert_definition_guid, **kwargs):  # noqa: E501
        """Partially updates the definition of the specified alert definition.  # noqa: E501

        This methods accepts parts of an alert definition. Fields that do not require changes can be omitted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.alert_definition_patch_alert_definition_with_http_info(alert_definition, alert_definition_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AlertDefinition alert_definition: The partial definition for the alert definition that should be updated. (required)
        :param str alert_definition_guid: The Guid of the alert definition that should be updated. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['alert_definition', 'alert_definition_guid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method alert_definition_patch_alert_definition" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'alert_definition' is set
        if ('alert_definition' not in params or
                params['alert_definition'] is None):
            raise ValueError("Missing the required parameter `alert_definition` when calling `alert_definition_patch_alert_definition`")  # noqa: E501
        # verify the required parameter 'alert_definition_guid' is set
        if ('alert_definition_guid' not in params or
                params['alert_definition_guid'] is None):
            raise ValueError("Missing the required parameter `alert_definition_guid` when calling `alert_definition_patch_alert_definition`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'alert_definition_guid' in params:
            path_params['alertDefinitionGuid'] = params['alert_definition_guid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'alert_definition' in params:
            body_params = params['alert_definition']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/AlertDefinition/{alertDefinitionGuid}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def alert_definition_put_alert_definition(self, alert_definition, alert_definition_guid, **kwargs):  # noqa: E501
        """Updates the definition of the specified alert definition.  # noqa: E501

        This methods only accepts a complete alert definition where all fields are specified.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.alert_definition_put_alert_definition(alert_definition, alert_definition_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AlertDefinition alert_definition: The partial definition for the alert definition that should be updated. (required)
        :param str alert_definition_guid: The Guid of the alert definition that should be updated. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.alert_definition_put_alert_definition_with_http_info(alert_definition, alert_definition_guid, **kwargs)  # noqa: E501
        else:
            (data) = self.alert_definition_put_alert_definition_with_http_info(alert_definition, alert_definition_guid, **kwargs)  # noqa: E501
            return data

    def alert_definition_put_alert_definition_with_http_info(self, alert_definition, alert_definition_guid, **kwargs):  # noqa: E501
        """Updates the definition of the specified alert definition.  # noqa: E501

        This methods only accepts a complete alert definition where all fields are specified.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.alert_definition_put_alert_definition_with_http_info(alert_definition, alert_definition_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AlertDefinition alert_definition: The partial definition for the alert definition that should be updated. (required)
        :param str alert_definition_guid: The Guid of the alert definition that should be updated. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['alert_definition', 'alert_definition_guid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method alert_definition_put_alert_definition" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'alert_definition' is set
        if ('alert_definition' not in params or
                params['alert_definition'] is None):
            raise ValueError("Missing the required parameter `alert_definition` when calling `alert_definition_put_alert_definition`")  # noqa: E501
        # verify the required parameter 'alert_definition_guid' is set
        if ('alert_definition_guid' not in params or
                params['alert_definition_guid'] is None):
            raise ValueError("Missing the required parameter `alert_definition_guid` when calling `alert_definition_put_alert_definition`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'alert_definition_guid' in params:
            path_params['alertDefinitionGuid'] = params['alert_definition_guid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'alert_definition' in params:
            body_params = params['alert_definition']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/AlertDefinition/{alertDefinitionGuid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def alert_definition_remove_monitor_from_alert_definition(self, alert_definition_guid, monitor_guid, **kwargs):  # noqa: E501
        """Removes a monitor for the specified alert definition.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.alert_definition_remove_monitor_from_alert_definition(alert_definition_guid, monitor_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str alert_definition_guid: The Guid of the alert definition to modify. (required)
        :param str monitor_guid: The Guid of the monitor to remove. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.alert_definition_remove_monitor_from_alert_definition_with_http_info(alert_definition_guid, monitor_guid, **kwargs)  # noqa: E501
        else:
            (data) = self.alert_definition_remove_monitor_from_alert_definition_with_http_info(alert_definition_guid, monitor_guid, **kwargs)  # noqa: E501
            return data

    def alert_definition_remove_monitor_from_alert_definition_with_http_info(self, alert_definition_guid, monitor_guid, **kwargs):  # noqa: E501
        """Removes a monitor for the specified alert definition.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.alert_definition_remove_monitor_from_alert_definition_with_http_info(alert_definition_guid, monitor_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str alert_definition_guid: The Guid of the alert definition to modify. (required)
        :param str monitor_guid: The Guid of the monitor to remove. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['alert_definition_guid', 'monitor_guid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method alert_definition_remove_monitor_from_alert_definition" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'alert_definition_guid' is set
        if ('alert_definition_guid' not in params or
                params['alert_definition_guid'] is None):
            raise ValueError("Missing the required parameter `alert_definition_guid` when calling `alert_definition_remove_monitor_from_alert_definition`")  # noqa: E501
        # verify the required parameter 'monitor_guid' is set
        if ('monitor_guid' not in params or
                params['monitor_guid'] is None):
            raise ValueError("Missing the required parameter `monitor_guid` when calling `alert_definition_remove_monitor_from_alert_definition`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'alert_definition_guid' in params:
            path_params['alertDefinitionGuid'] = params['alert_definition_guid']  # noqa: E501
        if 'monitor_guid' in params:
            path_params['monitorGuid'] = params['monitor_guid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/AlertDefinition/{alertDefinitionGuid}/Members/Monitor/{monitorGuid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def alert_definition_remove_monitor_group_from_alert_definition(self, alert_definition_guid, monitor_group_guid, **kwargs):  # noqa: E501
        """Removes a monitor group for the specified alert definition.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.alert_definition_remove_monitor_group_from_alert_definition(alert_definition_guid, monitor_group_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str alert_definition_guid: The Guid of the alert definition to modify. (required)
        :param str monitor_group_guid: The Guid of the monitor group to remove. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.alert_definition_remove_monitor_group_from_alert_definition_with_http_info(alert_definition_guid, monitor_group_guid, **kwargs)  # noqa: E501
        else:
            (data) = self.alert_definition_remove_monitor_group_from_alert_definition_with_http_info(alert_definition_guid, monitor_group_guid, **kwargs)  # noqa: E501
            return data

    def alert_definition_remove_monitor_group_from_alert_definition_with_http_info(self, alert_definition_guid, monitor_group_guid, **kwargs):  # noqa: E501
        """Removes a monitor group for the specified alert definition.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.alert_definition_remove_monitor_group_from_alert_definition_with_http_info(alert_definition_guid, monitor_group_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str alert_definition_guid: The Guid of the alert definition to modify. (required)
        :param str monitor_group_guid: The Guid of the monitor group to remove. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['alert_definition_guid', 'monitor_group_guid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method alert_definition_remove_monitor_group_from_alert_definition" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'alert_definition_guid' is set
        if ('alert_definition_guid' not in params or
                params['alert_definition_guid'] is None):
            raise ValueError("Missing the required parameter `alert_definition_guid` when calling `alert_definition_remove_monitor_group_from_alert_definition`")  # noqa: E501
        # verify the required parameter 'monitor_group_guid' is set
        if ('monitor_group_guid' not in params or
                params['monitor_group_guid'] is None):
            raise ValueError("Missing the required parameter `monitor_group_guid` when calling `alert_definition_remove_monitor_group_from_alert_definition`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'alert_definition_guid' in params:
            path_params['alertDefinitionGuid'] = params['alert_definition_guid']  # noqa: E501
        if 'monitor_group_guid' in params:
            path_params['monitorGroupGuid'] = params['monitor_group_guid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/AlertDefinition/{alertDefinitionGuid}/Members/MonitorGroup/{monitorGroupGuid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def alert_definition_remove_operator_from_escalation_level(self, alert_definition_guid, escalation_level_id, operator_guid, **kwargs):  # noqa: E501
        """Removes an operator for the specified escalation level.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.alert_definition_remove_operator_from_escalation_level(alert_definition_guid, escalation_level_id, operator_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str alert_definition_guid: The Guid of the alert definition. (required)
        :param int escalation_level_id: The escalation level id. (required)
        :param str operator_guid: The Guid of the operator to remove. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.alert_definition_remove_operator_from_escalation_level_with_http_info(alert_definition_guid, escalation_level_id, operator_guid, **kwargs)  # noqa: E501
        else:
            (data) = self.alert_definition_remove_operator_from_escalation_level_with_http_info(alert_definition_guid, escalation_level_id, operator_guid, **kwargs)  # noqa: E501
            return data

    def alert_definition_remove_operator_from_escalation_level_with_http_info(self, alert_definition_guid, escalation_level_id, operator_guid, **kwargs):  # noqa: E501
        """Removes an operator for the specified escalation level.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.alert_definition_remove_operator_from_escalation_level_with_http_info(alert_definition_guid, escalation_level_id, operator_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str alert_definition_guid: The Guid of the alert definition. (required)
        :param int escalation_level_id: The escalation level id. (required)
        :param str operator_guid: The Guid of the operator to remove. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['alert_definition_guid', 'escalation_level_id', 'operator_guid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method alert_definition_remove_operator_from_escalation_level" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'alert_definition_guid' is set
        if ('alert_definition_guid' not in params or
                params['alert_definition_guid'] is None):
            raise ValueError("Missing the required parameter `alert_definition_guid` when calling `alert_definition_remove_operator_from_escalation_level`")  # noqa: E501
        # verify the required parameter 'escalation_level_id' is set
        if ('escalation_level_id' not in params or
                params['escalation_level_id'] is None):
            raise ValueError("Missing the required parameter `escalation_level_id` when calling `alert_definition_remove_operator_from_escalation_level`")  # noqa: E501
        # verify the required parameter 'operator_guid' is set
        if ('operator_guid' not in params or
                params['operator_guid'] is None):
            raise ValueError("Missing the required parameter `operator_guid` when calling `alert_definition_remove_operator_from_escalation_level`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'alert_definition_guid' in params:
            path_params['alertDefinitionGuid'] = params['alert_definition_guid']  # noqa: E501
        if 'escalation_level_id' in params:
            path_params['escalationLevelId'] = params['escalation_level_id']  # noqa: E501
        if 'operator_guid' in params:
            path_params['operatorGuid'] = params['operator_guid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/AlertDefinition/{alertDefinitionGuid}/EscalationLevel/{escalationLevelId}/Members/Operator/{operatorGuid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def alert_definition_remove_operator_group_from_escalation_level(self, alert_definition_guid, escalation_level_id, operator_group_guid, **kwargs):  # noqa: E501
        """Removes an operator group for the specified escalation level.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.alert_definition_remove_operator_group_from_escalation_level(alert_definition_guid, escalation_level_id, operator_group_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str alert_definition_guid: The Guid of the alert definition. (required)
        :param int escalation_level_id: The escalation level id. (required)
        :param str operator_group_guid: The Guid of the operator group to remove. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.alert_definition_remove_operator_group_from_escalation_level_with_http_info(alert_definition_guid, escalation_level_id, operator_group_guid, **kwargs)  # noqa: E501
        else:
            (data) = self.alert_definition_remove_operator_group_from_escalation_level_with_http_info(alert_definition_guid, escalation_level_id, operator_group_guid, **kwargs)  # noqa: E501
            return data

    def alert_definition_remove_operator_group_from_escalation_level_with_http_info(self, alert_definition_guid, escalation_level_id, operator_group_guid, **kwargs):  # noqa: E501
        """Removes an operator group for the specified escalation level.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.alert_definition_remove_operator_group_from_escalation_level_with_http_info(alert_definition_guid, escalation_level_id, operator_group_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str alert_definition_guid: The Guid of the alert definition. (required)
        :param int escalation_level_id: The escalation level id. (required)
        :param str operator_group_guid: The Guid of the operator group to remove. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['alert_definition_guid', 'escalation_level_id', 'operator_group_guid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method alert_definition_remove_operator_group_from_escalation_level" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'alert_definition_guid' is set
        if ('alert_definition_guid' not in params or
                params['alert_definition_guid'] is None):
            raise ValueError("Missing the required parameter `alert_definition_guid` when calling `alert_definition_remove_operator_group_from_escalation_level`")  # noqa: E501
        # verify the required parameter 'escalation_level_id' is set
        if ('escalation_level_id' not in params or
                params['escalation_level_id'] is None):
            raise ValueError("Missing the required parameter `escalation_level_id` when calling `alert_definition_remove_operator_group_from_escalation_level`")  # noqa: E501
        # verify the required parameter 'operator_group_guid' is set
        if ('operator_group_guid' not in params or
                params['operator_group_guid'] is None):
            raise ValueError("Missing the required parameter `operator_group_guid` when calling `alert_definition_remove_operator_group_from_escalation_level`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'alert_definition_guid' in params:
            path_params['alertDefinitionGuid'] = params['alert_definition_guid']  # noqa: E501
        if 'escalation_level_id' in params:
            path_params['escalationLevelId'] = params['escalation_level_id']  # noqa: E501
        if 'operator_group_guid' in params:
            path_params['operatorGroupGuid'] = params['operator_group_guid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/AlertDefinition/{alertDefinitionGuid}/EscalationLevel/{escalationLevelId}/Members/OperatorGroup/{operatorGroupGuid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def alert_definition_update_integration_for_escalation_with_patch(self, escalation_level_integration, alert_definition_guid, escalation_level_id, integration_guid, **kwargs):  # noqa: E501
        """Partially updates an integration to the specified escalation level.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.alert_definition_update_integration_for_escalation_with_patch(escalation_level_integration, alert_definition_guid, escalation_level_id, integration_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EscalationLevelIntegration escalation_level_integration: The partial definition for the integration that should be updated. (required)
        :param str alert_definition_guid: The Guid of the alert definition. (required)
        :param int escalation_level_id: The escalation level id. (required)
        :param str integration_guid: The Guid of the integration to update. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.alert_definition_update_integration_for_escalation_with_patch_with_http_info(escalation_level_integration, alert_definition_guid, escalation_level_id, integration_guid, **kwargs)  # noqa: E501
        else:
            (data) = self.alert_definition_update_integration_for_escalation_with_patch_with_http_info(escalation_level_integration, alert_definition_guid, escalation_level_id, integration_guid, **kwargs)  # noqa: E501
            return data

    def alert_definition_update_integration_for_escalation_with_patch_with_http_info(self, escalation_level_integration, alert_definition_guid, escalation_level_id, integration_guid, **kwargs):  # noqa: E501
        """Partially updates an integration to the specified escalation level.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.alert_definition_update_integration_for_escalation_with_patch_with_http_info(escalation_level_integration, alert_definition_guid, escalation_level_id, integration_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EscalationLevelIntegration escalation_level_integration: The partial definition for the integration that should be updated. (required)
        :param str alert_definition_guid: The Guid of the alert definition. (required)
        :param int escalation_level_id: The escalation level id. (required)
        :param str integration_guid: The Guid of the integration to update. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['escalation_level_integration', 'alert_definition_guid', 'escalation_level_id', 'integration_guid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method alert_definition_update_integration_for_escalation_with_patch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'escalation_level_integration' is set
        if ('escalation_level_integration' not in params or
                params['escalation_level_integration'] is None):
            raise ValueError("Missing the required parameter `escalation_level_integration` when calling `alert_definition_update_integration_for_escalation_with_patch`")  # noqa: E501
        # verify the required parameter 'alert_definition_guid' is set
        if ('alert_definition_guid' not in params or
                params['alert_definition_guid'] is None):
            raise ValueError("Missing the required parameter `alert_definition_guid` when calling `alert_definition_update_integration_for_escalation_with_patch`")  # noqa: E501
        # verify the required parameter 'escalation_level_id' is set
        if ('escalation_level_id' not in params or
                params['escalation_level_id'] is None):
            raise ValueError("Missing the required parameter `escalation_level_id` when calling `alert_definition_update_integration_for_escalation_with_patch`")  # noqa: E501
        # verify the required parameter 'integration_guid' is set
        if ('integration_guid' not in params or
                params['integration_guid'] is None):
            raise ValueError("Missing the required parameter `integration_guid` when calling `alert_definition_update_integration_for_escalation_with_patch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'alert_definition_guid' in params:
            path_params['alertDefinitionGuid'] = params['alert_definition_guid']  # noqa: E501
        if 'escalation_level_id' in params:
            path_params['escalationLevelId'] = params['escalation_level_id']  # noqa: E501
        if 'integration_guid' in params:
            path_params['integrationGuid'] = params['integration_guid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'escalation_level_integration' in params:
            body_params = params['escalation_level_integration']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/AlertDefinition/{alertDefinitionGuid}/EscalationLevel/{escalationLevelId}/Integration/{integrationGuid}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def alert_definition_update_integration_for_escalation_with_put(self, escalation_level_integration, alert_definition_guid, escalation_level_id, integration_guid, **kwargs):  # noqa: E501
        """Updates an integration for the specified escalation level.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.alert_definition_update_integration_for_escalation_with_put(escalation_level_integration, alert_definition_guid, escalation_level_id, integration_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EscalationLevelIntegration escalation_level_integration: The definition for the integration that should be updated. (required)
        :param str alert_definition_guid: The Guid of the alert definition. (required)
        :param int escalation_level_id: The escalation level id. (required)
        :param str integration_guid: The Guid of the integration to update. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.alert_definition_update_integration_for_escalation_with_put_with_http_info(escalation_level_integration, alert_definition_guid, escalation_level_id, integration_guid, **kwargs)  # noqa: E501
        else:
            (data) = self.alert_definition_update_integration_for_escalation_with_put_with_http_info(escalation_level_integration, alert_definition_guid, escalation_level_id, integration_guid, **kwargs)  # noqa: E501
            return data

    def alert_definition_update_integration_for_escalation_with_put_with_http_info(self, escalation_level_integration, alert_definition_guid, escalation_level_id, integration_guid, **kwargs):  # noqa: E501
        """Updates an integration for the specified escalation level.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.alert_definition_update_integration_for_escalation_with_put_with_http_info(escalation_level_integration, alert_definition_guid, escalation_level_id, integration_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EscalationLevelIntegration escalation_level_integration: The definition for the integration that should be updated. (required)
        :param str alert_definition_guid: The Guid of the alert definition. (required)
        :param int escalation_level_id: The escalation level id. (required)
        :param str integration_guid: The Guid of the integration to update. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['escalation_level_integration', 'alert_definition_guid', 'escalation_level_id', 'integration_guid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method alert_definition_update_integration_for_escalation_with_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'escalation_level_integration' is set
        if ('escalation_level_integration' not in params or
                params['escalation_level_integration'] is None):
            raise ValueError("Missing the required parameter `escalation_level_integration` when calling `alert_definition_update_integration_for_escalation_with_put`")  # noqa: E501
        # verify the required parameter 'alert_definition_guid' is set
        if ('alert_definition_guid' not in params or
                params['alert_definition_guid'] is None):
            raise ValueError("Missing the required parameter `alert_definition_guid` when calling `alert_definition_update_integration_for_escalation_with_put`")  # noqa: E501
        # verify the required parameter 'escalation_level_id' is set
        if ('escalation_level_id' not in params or
                params['escalation_level_id'] is None):
            raise ValueError("Missing the required parameter `escalation_level_id` when calling `alert_definition_update_integration_for_escalation_with_put`")  # noqa: E501
        # verify the required parameter 'integration_guid' is set
        if ('integration_guid' not in params or
                params['integration_guid'] is None):
            raise ValueError("Missing the required parameter `integration_guid` when calling `alert_definition_update_integration_for_escalation_with_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'alert_definition_guid' in params:
            path_params['alertDefinitionGuid'] = params['alert_definition_guid']  # noqa: E501
        if 'escalation_level_id' in params:
            path_params['escalationLevelId'] = params['escalation_level_id']  # noqa: E501
        if 'integration_guid' in params:
            path_params['integrationGuid'] = params['integration_guid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'escalation_level_integration' in params:
            body_params = params['escalation_level_integration']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/AlertDefinition/{alertDefinitionGuid}/EscalationLevel/{escalationLevelId}/Integration/{integrationGuid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
