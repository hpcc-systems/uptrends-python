# coding: utf-8

"""
    Uptrends API v4

    This document describes Uptrends API version 4. This Swagger environment also lets you execute API methods directly.  Please note that this is not a sandbox environment: these API methods operate directly on your actual Uptrends account.  For more information, please visit https://www.uptrends.com/api.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from uptrends.api_client import ApiClient


class ScheduledReportApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def scheduled_report_create_scheduled_report(self, scheduled_report, **kwargs):  # noqa: E501
        """Creates a new scheduled report.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.scheduled_report_create_scheduled_report(scheduled_report, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ScheduledReport scheduled_report: The details for the scheduled report. (required)
        :return: ScheduledReport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.scheduled_report_create_scheduled_report_with_http_info(scheduled_report, **kwargs)  # noqa: E501
        else:
            (data) = self.scheduled_report_create_scheduled_report_with_http_info(scheduled_report, **kwargs)  # noqa: E501
            return data

    def scheduled_report_create_scheduled_report_with_http_info(self, scheduled_report, **kwargs):  # noqa: E501
        """Creates a new scheduled report.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.scheduled_report_create_scheduled_report_with_http_info(scheduled_report, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ScheduledReport scheduled_report: The details for the scheduled report. (required)
        :return: ScheduledReport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['scheduled_report']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method scheduled_report_create_scheduled_report" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'scheduled_report' is set
        if ('scheduled_report' not in params or
                params['scheduled_report'] is None):
            raise ValueError("Missing the required parameter `scheduled_report` when calling `scheduled_report_create_scheduled_report`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'scheduled_report' in params:
            body_params = params['scheduled_report']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/ScheduledReport', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ScheduledReport',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def scheduled_report_delete_specified_scheduled_report(self, scheduled_report_guid, **kwargs):  # noqa: E501
        """Delete the specified scheduled report.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.scheduled_report_delete_specified_scheduled_report(scheduled_report_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scheduled_report_guid: The guid of the specified scheduled report. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.scheduled_report_delete_specified_scheduled_report_with_http_info(scheduled_report_guid, **kwargs)  # noqa: E501
        else:
            (data) = self.scheduled_report_delete_specified_scheduled_report_with_http_info(scheduled_report_guid, **kwargs)  # noqa: E501
            return data

    def scheduled_report_delete_specified_scheduled_report_with_http_info(self, scheduled_report_guid, **kwargs):  # noqa: E501
        """Delete the specified scheduled report.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.scheduled_report_delete_specified_scheduled_report_with_http_info(scheduled_report_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scheduled_report_guid: The guid of the specified scheduled report. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['scheduled_report_guid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method scheduled_report_delete_specified_scheduled_report" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'scheduled_report_guid' is set
        if ('scheduled_report_guid' not in params or
                params['scheduled_report_guid'] is None):
            raise ValueError("Missing the required parameter `scheduled_report_guid` when calling `scheduled_report_delete_specified_scheduled_report`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'scheduled_report_guid' in params:
            path_params['scheduledReportGuid'] = params['scheduled_report_guid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/ScheduledReport/{scheduledReportGuid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def scheduled_report_get_all_scheduled_reports(self, **kwargs):  # noqa: E501
        """Returns data for all scheduled reports.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.scheduled_report_get_all_scheduled_reports(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[ScheduledReport]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.scheduled_report_get_all_scheduled_reports_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.scheduled_report_get_all_scheduled_reports_with_http_info(**kwargs)  # noqa: E501
            return data

    def scheduled_report_get_all_scheduled_reports_with_http_info(self, **kwargs):  # noqa: E501
        """Returns data for all scheduled reports.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.scheduled_report_get_all_scheduled_reports_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[ScheduledReport]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method scheduled_report_get_all_scheduled_reports" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/ScheduledReport', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ScheduledReport]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def scheduled_report_get_specified_scheduled_report(self, scheduled_report_guid, **kwargs):  # noqa: E501
        """Returns data for the specified scheduled report.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.scheduled_report_get_specified_scheduled_report(scheduled_report_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scheduled_report_guid: The guid of the specified scheduled report. (required)
        :return: ScheduledReport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.scheduled_report_get_specified_scheduled_report_with_http_info(scheduled_report_guid, **kwargs)  # noqa: E501
        else:
            (data) = self.scheduled_report_get_specified_scheduled_report_with_http_info(scheduled_report_guid, **kwargs)  # noqa: E501
            return data

    def scheduled_report_get_specified_scheduled_report_with_http_info(self, scheduled_report_guid, **kwargs):  # noqa: E501
        """Returns data for the specified scheduled report.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.scheduled_report_get_specified_scheduled_report_with_http_info(scheduled_report_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scheduled_report_guid: The guid of the specified scheduled report. (required)
        :return: ScheduledReport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['scheduled_report_guid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method scheduled_report_get_specified_scheduled_report" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'scheduled_report_guid' is set
        if ('scheduled_report_guid' not in params or
                params['scheduled_report_guid'] is None):
            raise ValueError("Missing the required parameter `scheduled_report_guid` when calling `scheduled_report_get_specified_scheduled_report`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'scheduled_report_guid' in params:
            path_params['scheduledReportGuid'] = params['scheduled_report_guid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/ScheduledReport/{scheduledReportGuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ScheduledReport',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def scheduled_report_partially_update_scheduled_report(self, scheduled_report_guid, scheduled_report, **kwargs):  # noqa: E501
        """Partially update the specified scheduled report.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.scheduled_report_partially_update_scheduled_report(scheduled_report_guid, scheduled_report, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scheduled_report_guid: The guid of the specified scheduled report. (required)
        :param ScheduledReport scheduled_report: The details for the scheduled report. (required)
        :return: ScheduledReport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.scheduled_report_partially_update_scheduled_report_with_http_info(scheduled_report_guid, scheduled_report, **kwargs)  # noqa: E501
        else:
            (data) = self.scheduled_report_partially_update_scheduled_report_with_http_info(scheduled_report_guid, scheduled_report, **kwargs)  # noqa: E501
            return data

    def scheduled_report_partially_update_scheduled_report_with_http_info(self, scheduled_report_guid, scheduled_report, **kwargs):  # noqa: E501
        """Partially update the specified scheduled report.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.scheduled_report_partially_update_scheduled_report_with_http_info(scheduled_report_guid, scheduled_report, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scheduled_report_guid: The guid of the specified scheduled report. (required)
        :param ScheduledReport scheduled_report: The details for the scheduled report. (required)
        :return: ScheduledReport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['scheduled_report_guid', 'scheduled_report']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method scheduled_report_partially_update_scheduled_report" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'scheduled_report_guid' is set
        if ('scheduled_report_guid' not in params or
                params['scheduled_report_guid'] is None):
            raise ValueError("Missing the required parameter `scheduled_report_guid` when calling `scheduled_report_partially_update_scheduled_report`")  # noqa: E501
        # verify the required parameter 'scheduled_report' is set
        if ('scheduled_report' not in params or
                params['scheduled_report'] is None):
            raise ValueError("Missing the required parameter `scheduled_report` when calling `scheduled_report_partially_update_scheduled_report`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'scheduled_report_guid' in params:
            path_params['scheduledReportGuid'] = params['scheduled_report_guid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'scheduled_report' in params:
            body_params = params['scheduled_report']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/ScheduledReport/{scheduledReportGuid}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ScheduledReport',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def scheduled_report_update_scheduled_report(self, scheduled_report_guid, scheduled_report, **kwargs):  # noqa: E501
        """Update the specified scheduled report.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.scheduled_report_update_scheduled_report(scheduled_report_guid, scheduled_report, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scheduled_report_guid: The guid of the specified scheduled report. (required)
        :param ScheduledReport scheduled_report: The details for the scheduled report. (required)
        :return: ScheduledReport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.scheduled_report_update_scheduled_report_with_http_info(scheduled_report_guid, scheduled_report, **kwargs)  # noqa: E501
        else:
            (data) = self.scheduled_report_update_scheduled_report_with_http_info(scheduled_report_guid, scheduled_report, **kwargs)  # noqa: E501
            return data

    def scheduled_report_update_scheduled_report_with_http_info(self, scheduled_report_guid, scheduled_report, **kwargs):  # noqa: E501
        """Update the specified scheduled report.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.scheduled_report_update_scheduled_report_with_http_info(scheduled_report_guid, scheduled_report, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scheduled_report_guid: The guid of the specified scheduled report. (required)
        :param ScheduledReport scheduled_report: The details for the scheduled report. (required)
        :return: ScheduledReport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['scheduled_report_guid', 'scheduled_report']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method scheduled_report_update_scheduled_report" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'scheduled_report_guid' is set
        if ('scheduled_report_guid' not in params or
                params['scheduled_report_guid'] is None):
            raise ValueError("Missing the required parameter `scheduled_report_guid` when calling `scheduled_report_update_scheduled_report`")  # noqa: E501
        # verify the required parameter 'scheduled_report' is set
        if ('scheduled_report' not in params or
                params['scheduled_report'] is None):
            raise ValueError("Missing the required parameter `scheduled_report` when calling `scheduled_report_update_scheduled_report`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'scheduled_report_guid' in params:
            path_params['scheduledReportGuid'] = params['scheduled_report_guid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'scheduled_report' in params:
            body_params = params['scheduled_report']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/ScheduledReport/{scheduledReportGuid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ScheduledReport',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
