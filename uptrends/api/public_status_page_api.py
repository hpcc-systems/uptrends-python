# coding: utf-8

"""
    Uptrends API v4

    This document describes Uptrends API version 4. This Swagger environment also lets you execute API methods directly.  Please note that this is not a sandbox environment: these API methods operate directly on your actual Uptrends account.  For more information, please visit https://www.uptrends.com/api.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from uptrends.api_client import ApiClient


class PublicStatusPageApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def public_status_page_add_authorization_to_public_status_page(self, public_status_page_guid, authorization, **kwargs):  # noqa: E501
        """Creates a new authorization for the specified public status page.  # noqa: E501

        The AuthorizationId attribute should be omitted in the request body. The newly created authorization will be returned in the response. An authorization should be granted to either an individual operator, or an operator group. Therefore, either specify the OperatorGuid attribute or the OperatorGroupGuid attribute.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.public_status_page_add_authorization_to_public_status_page(public_status_page_guid, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str public_status_page_guid: The Guid of the public status page. (required)
        :param PSPAuthorization authorization: The complete definition of the authorization that should be created. (required)
        :return: PSPAuthorization
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.public_status_page_add_authorization_to_public_status_page_with_http_info(public_status_page_guid, authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.public_status_page_add_authorization_to_public_status_page_with_http_info(public_status_page_guid, authorization, **kwargs)  # noqa: E501
            return data

    def public_status_page_add_authorization_to_public_status_page_with_http_info(self, public_status_page_guid, authorization, **kwargs):  # noqa: E501
        """Creates a new authorization for the specified public status page.  # noqa: E501

        The AuthorizationId attribute should be omitted in the request body. The newly created authorization will be returned in the response. An authorization should be granted to either an individual operator, or an operator group. Therefore, either specify the OperatorGuid attribute or the OperatorGroupGuid attribute.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.public_status_page_add_authorization_to_public_status_page_with_http_info(public_status_page_guid, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str public_status_page_guid: The Guid of the public status page. (required)
        :param PSPAuthorization authorization: The complete definition of the authorization that should be created. (required)
        :return: PSPAuthorization
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['public_status_page_guid', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method public_status_page_add_authorization_to_public_status_page" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'public_status_page_guid' is set
        if ('public_status_page_guid' not in params or
                params['public_status_page_guid'] is None):
            raise ValueError("Missing the required parameter `public_status_page_guid` when calling `public_status_page_add_authorization_to_public_status_page`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `public_status_page_add_authorization_to_public_status_page`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'public_status_page_guid' in params:
            path_params['publicStatusPageGuid'] = params['public_status_page_guid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'authorization' in params:
            body_params = params['authorization']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/PublicStatusPage/{publicStatusPageGuid}/Authorization', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PSPAuthorization',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def public_status_page_delete_public_status_page(self, public_status_page_guid, **kwargs):  # noqa: E501
        """Deletes the definition of the specified public status page.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.public_status_page_delete_public_status_page(public_status_page_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str public_status_page_guid: The Guid of the public status page that should be updated. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.public_status_page_delete_public_status_page_with_http_info(public_status_page_guid, **kwargs)  # noqa: E501
        else:
            (data) = self.public_status_page_delete_public_status_page_with_http_info(public_status_page_guid, **kwargs)  # noqa: E501
            return data

    def public_status_page_delete_public_status_page_with_http_info(self, public_status_page_guid, **kwargs):  # noqa: E501
        """Deletes the definition of the specified public status page.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.public_status_page_delete_public_status_page_with_http_info(public_status_page_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str public_status_page_guid: The Guid of the public status page that should be updated. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['public_status_page_guid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method public_status_page_delete_public_status_page" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'public_status_page_guid' is set
        if ('public_status_page_guid' not in params or
                params['public_status_page_guid'] is None):
            raise ValueError("Missing the required parameter `public_status_page_guid` when calling `public_status_page_delete_public_status_page`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'public_status_page_guid' in params:
            path_params['publicStatusPageGuid'] = params['public_status_page_guid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/PublicStatusPage/{publicStatusPageGuid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def public_status_page_get_authorizations_for_public_status_page(self, public_status_page_guid, **kwargs):  # noqa: E501
        """Returns all authorizations for the specified public status page.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.public_status_page_get_authorizations_for_public_status_page(public_status_page_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str public_status_page_guid: The Guid of the public status page. (required)
        :return: list[PSPAuthorization]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.public_status_page_get_authorizations_for_public_status_page_with_http_info(public_status_page_guid, **kwargs)  # noqa: E501
        else:
            (data) = self.public_status_page_get_authorizations_for_public_status_page_with_http_info(public_status_page_guid, **kwargs)  # noqa: E501
            return data

    def public_status_page_get_authorizations_for_public_status_page_with_http_info(self, public_status_page_guid, **kwargs):  # noqa: E501
        """Returns all authorizations for the specified public status page.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.public_status_page_get_authorizations_for_public_status_page_with_http_info(public_status_page_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str public_status_page_guid: The Guid of the public status page. (required)
        :return: list[PSPAuthorization]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['public_status_page_guid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method public_status_page_get_authorizations_for_public_status_page" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'public_status_page_guid' is set
        if ('public_status_page_guid' not in params or
                params['public_status_page_guid'] is None):
            raise ValueError("Missing the required parameter `public_status_page_guid` when calling `public_status_page_get_authorizations_for_public_status_page`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'public_status_page_guid' in params:
            path_params['publicStatusPageGuid'] = params['public_status_page_guid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/PublicStatusPage/{publicStatusPageGuid}/Authorization', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[PSPAuthorization]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def public_status_page_get_public_status_page(self, public_status_page_guid, **kwargs):  # noqa: E501
        """Returns the definition of the specified public status page.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.public_status_page_get_public_status_page(public_status_page_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str public_status_page_guid: The Guid of the requested public status page. (required)
        :return: PublicStatusPage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.public_status_page_get_public_status_page_with_http_info(public_status_page_guid, **kwargs)  # noqa: E501
        else:
            (data) = self.public_status_page_get_public_status_page_with_http_info(public_status_page_guid, **kwargs)  # noqa: E501
            return data

    def public_status_page_get_public_status_page_with_http_info(self, public_status_page_guid, **kwargs):  # noqa: E501
        """Returns the definition of the specified public status page.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.public_status_page_get_public_status_page_with_http_info(public_status_page_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str public_status_page_guid: The Guid of the requested public status page. (required)
        :return: PublicStatusPage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['public_status_page_guid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method public_status_page_get_public_status_page" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'public_status_page_guid' is set
        if ('public_status_page_guid' not in params or
                params['public_status_page_guid'] is None):
            raise ValueError("Missing the required parameter `public_status_page_guid` when calling `public_status_page_get_public_status_page`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'public_status_page_guid' in params:
            path_params['publicStatusPageGuid'] = params['public_status_page_guid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/PublicStatusPage/{publicStatusPageGuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PublicStatusPage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def public_status_page_get_public_status_pages(self, **kwargs):  # noqa: E501
        """Returns the definition of all public status pages available in the account.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.public_status_page_get_public_status_pages(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[PublicStatusPage]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.public_status_page_get_public_status_pages_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.public_status_page_get_public_status_pages_with_http_info(**kwargs)  # noqa: E501
            return data

    def public_status_page_get_public_status_pages_with_http_info(self, **kwargs):  # noqa: E501
        """Returns the definition of all public status pages available in the account.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.public_status_page_get_public_status_pages_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[PublicStatusPage]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method public_status_page_get_public_status_pages" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/PublicStatusPage', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[PublicStatusPage]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def public_status_page_patch_public_status_page(self, public_status_page, public_status_page_guid, **kwargs):  # noqa: E501
        """Partially updates the definition of the specified public status page.  # noqa: E501

        This methods accepts parts of a public status page definition. We recommend retrieving the existing definition first (using the GET method). You can then process the changes you want to make and send back these changes only using this PATCH method.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.public_status_page_patch_public_status_page(public_status_page, public_status_page_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PublicStatusPage public_status_page: The partial definition for the public status page that should be updated. (required)
        :param str public_status_page_guid: The Guid of the public status page that should be updated. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.public_status_page_patch_public_status_page_with_http_info(public_status_page, public_status_page_guid, **kwargs)  # noqa: E501
        else:
            (data) = self.public_status_page_patch_public_status_page_with_http_info(public_status_page, public_status_page_guid, **kwargs)  # noqa: E501
            return data

    def public_status_page_patch_public_status_page_with_http_info(self, public_status_page, public_status_page_guid, **kwargs):  # noqa: E501
        """Partially updates the definition of the specified public status page.  # noqa: E501

        This methods accepts parts of a public status page definition. We recommend retrieving the existing definition first (using the GET method). You can then process the changes you want to make and send back these changes only using this PATCH method.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.public_status_page_patch_public_status_page_with_http_info(public_status_page, public_status_page_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PublicStatusPage public_status_page: The partial definition for the public status page that should be updated. (required)
        :param str public_status_page_guid: The Guid of the public status page that should be updated. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['public_status_page', 'public_status_page_guid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method public_status_page_patch_public_status_page" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'public_status_page' is set
        if ('public_status_page' not in params or
                params['public_status_page'] is None):
            raise ValueError("Missing the required parameter `public_status_page` when calling `public_status_page_patch_public_status_page`")  # noqa: E501
        # verify the required parameter 'public_status_page_guid' is set
        if ('public_status_page_guid' not in params or
                params['public_status_page_guid'] is None):
            raise ValueError("Missing the required parameter `public_status_page_guid` when calling `public_status_page_patch_public_status_page`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'public_status_page_guid' in params:
            path_params['publicStatusPageGuid'] = params['public_status_page_guid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'public_status_page' in params:
            body_params = params['public_status_page']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/PublicStatusPage/{publicStatusPageGuid}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def public_status_page_post_public_status_page(self, public_status_page, **kwargs):  # noqa: E501
        """Creates a new public status page.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.public_status_page_post_public_status_page(public_status_page, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PublicStatusPage public_status_page: The complete definition for the public status page that should be updated. (required)
        :return: PublicStatusPage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.public_status_page_post_public_status_page_with_http_info(public_status_page, **kwargs)  # noqa: E501
        else:
            (data) = self.public_status_page_post_public_status_page_with_http_info(public_status_page, **kwargs)  # noqa: E501
            return data

    def public_status_page_post_public_status_page_with_http_info(self, public_status_page, **kwargs):  # noqa: E501
        """Creates a new public status page.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.public_status_page_post_public_status_page_with_http_info(public_status_page, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PublicStatusPage public_status_page: The complete definition for the public status page that should be updated. (required)
        :return: PublicStatusPage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['public_status_page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method public_status_page_post_public_status_page" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'public_status_page' is set
        if ('public_status_page' not in params or
                params['public_status_page'] is None):
            raise ValueError("Missing the required parameter `public_status_page` when calling `public_status_page_post_public_status_page`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'public_status_page' in params:
            body_params = params['public_status_page']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/PublicStatusPage', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PublicStatusPage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def public_status_page_put_public_status_page(self, public_status_page, public_status_page_guid, **kwargs):  # noqa: E501
        """Updates the definition of the specified public status page.  # noqa: E501

        This methods only accepts a complete public status page definition. We recommend retrieving the existing definition first (using the GET method). You can then process the changes you want to make and send back the updated definition using this PUT method.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.public_status_page_put_public_status_page(public_status_page, public_status_page_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PublicStatusPage public_status_page: The complete definition for the public status page that should be updated. (required)
        :param str public_status_page_guid: The Guid of the public status page that should be updated. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.public_status_page_put_public_status_page_with_http_info(public_status_page, public_status_page_guid, **kwargs)  # noqa: E501
        else:
            (data) = self.public_status_page_put_public_status_page_with_http_info(public_status_page, public_status_page_guid, **kwargs)  # noqa: E501
            return data

    def public_status_page_put_public_status_page_with_http_info(self, public_status_page, public_status_page_guid, **kwargs):  # noqa: E501
        """Updates the definition of the specified public status page.  # noqa: E501

        This methods only accepts a complete public status page definition. We recommend retrieving the existing definition first (using the GET method). You can then process the changes you want to make and send back the updated definition using this PUT method.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.public_status_page_put_public_status_page_with_http_info(public_status_page, public_status_page_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PublicStatusPage public_status_page: The complete definition for the public status page that should be updated. (required)
        :param str public_status_page_guid: The Guid of the public status page that should be updated. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['public_status_page', 'public_status_page_guid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method public_status_page_put_public_status_page" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'public_status_page' is set
        if ('public_status_page' not in params or
                params['public_status_page'] is None):
            raise ValueError("Missing the required parameter `public_status_page` when calling `public_status_page_put_public_status_page`")  # noqa: E501
        # verify the required parameter 'public_status_page_guid' is set
        if ('public_status_page_guid' not in params or
                params['public_status_page_guid'] is None):
            raise ValueError("Missing the required parameter `public_status_page_guid` when calling `public_status_page_put_public_status_page`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'public_status_page_guid' in params:
            path_params['publicStatusPageGuid'] = params['public_status_page_guid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'public_status_page' in params:
            body_params = params['public_status_page']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/PublicStatusPage/{publicStatusPageGuid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def public_status_page_remove_authorization_from_public_status_page(self, public_status_page_guid, authorization_guid, **kwargs):  # noqa: E501
        """Removes an authorization from a public status page.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.public_status_page_remove_authorization_from_public_status_page(public_status_page_guid, authorization_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str public_status_page_guid: The Guid of the public status page. (required)
        :param str authorization_guid: The Guid of the authorization. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.public_status_page_remove_authorization_from_public_status_page_with_http_info(public_status_page_guid, authorization_guid, **kwargs)  # noqa: E501
        else:
            (data) = self.public_status_page_remove_authorization_from_public_status_page_with_http_info(public_status_page_guid, authorization_guid, **kwargs)  # noqa: E501
            return data

    def public_status_page_remove_authorization_from_public_status_page_with_http_info(self, public_status_page_guid, authorization_guid, **kwargs):  # noqa: E501
        """Removes an authorization from a public status page.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.public_status_page_remove_authorization_from_public_status_page_with_http_info(public_status_page_guid, authorization_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str public_status_page_guid: The Guid of the public status page. (required)
        :param str authorization_guid: The Guid of the authorization. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['public_status_page_guid', 'authorization_guid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method public_status_page_remove_authorization_from_public_status_page" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'public_status_page_guid' is set
        if ('public_status_page_guid' not in params or
                params['public_status_page_guid'] is None):
            raise ValueError("Missing the required parameter `public_status_page_guid` when calling `public_status_page_remove_authorization_from_public_status_page`")  # noqa: E501
        # verify the required parameter 'authorization_guid' is set
        if ('authorization_guid' not in params or
                params['authorization_guid'] is None):
            raise ValueError("Missing the required parameter `authorization_guid` when calling `public_status_page_remove_authorization_from_public_status_page`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'public_status_page_guid' in params:
            path_params['publicStatusPageGuid'] = params['public_status_page_guid']  # noqa: E501
        if 'authorization_guid' in params:
            path_params['authorizationGuid'] = params['authorization_guid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/PublicStatusPage/{publicStatusPageGuid}/Authorization/{authorizationGuid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
