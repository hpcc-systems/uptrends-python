# coding: utf-8

"""
    Uptrends API v4

    This document describes Uptrends API version 4. This Swagger environment also lets you execute API methods directly.  Please note that this is not a sandbox environment: these API methods operate directly on your actual Uptrends account.  For more information, please visit https://www.uptrends.com/api.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from uptrends.api_client import ApiClient


class MonitorCheckApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def monitor_check_get_account_monitor_checks(self, **kwargs):  # noqa: E501
        """Returns all monitor check data.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.monitor_check_get_account_monitor_checks(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str error_level: Error level filter that should be applied. (default = NoError and above)
        :param str cursor: A cursor value that should be used for traversing the dataset.
        :param str sorting: Sorting direction based on timestamp.
        :param int take: The number of records to return (Max value = 100)
        :param datetime start: The start of a custom period (can't be used together with the PresetPeriod parameter)
        :param datetime end: The end of a custom period
        :param str preset_period: The requested time period.
        :return: MonitorCheckResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.monitor_check_get_account_monitor_checks_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.monitor_check_get_account_monitor_checks_with_http_info(**kwargs)  # noqa: E501
            return data

    def monitor_check_get_account_monitor_checks_with_http_info(self, **kwargs):  # noqa: E501
        """Returns all monitor check data.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.monitor_check_get_account_monitor_checks_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str error_level: Error level filter that should be applied. (default = NoError and above)
        :param str cursor: A cursor value that should be used for traversing the dataset.
        :param str sorting: Sorting direction based on timestamp.
        :param int take: The number of records to return (Max value = 100)
        :param datetime start: The start of a custom period (can't be used together with the PresetPeriod parameter)
        :param datetime end: The end of a custom period
        :param str preset_period: The requested time period.
        :return: MonitorCheckResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['error_level', 'cursor', 'sorting', 'take', 'start', 'end', 'preset_period']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method monitor_check_get_account_monitor_checks" % key
                )
            params[key] = val
        del params['kwargs']

        if 'take' in params and params['take'] > 100:  # noqa: E501
            raise ValueError("Invalid value for parameter `take` when calling `monitor_check_get_account_monitor_checks`, must be a value less than or equal to `100`")  # noqa: E501
        if 'take' in params and params['take'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `take` when calling `monitor_check_get_account_monitor_checks`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'error_level' in params:
            query_params.append(('ErrorLevel', params['error_level']))  # noqa: E501
        if 'cursor' in params:
            query_params.append(('Cursor', params['cursor']))  # noqa: E501
        if 'sorting' in params:
            query_params.append(('Sorting', params['sorting']))  # noqa: E501
        if 'take' in params:
            query_params.append(('Take', params['take']))  # noqa: E501
        if 'start' in params:
            query_params.append(('Start', params['start']))  # noqa: E501
        if 'end' in params:
            query_params.append(('End', params['end']))  # noqa: E501
        if 'preset_period' in params:
            query_params.append(('PresetPeriod', params['preset_period']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/MonitorCheck', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MonitorCheckResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def monitor_check_get_http_details(self, monitor_check_id, **kwargs):  # noqa: E501
        """Returns HTTP details for a monitor check.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.monitor_check_get_http_details(monitor_check_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int monitor_check_id: The monitor check Id to get the detailed data for. (required)
        :return: HttpDetailsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.monitor_check_get_http_details_with_http_info(monitor_check_id, **kwargs)  # noqa: E501
        else:
            (data) = self.monitor_check_get_http_details_with_http_info(monitor_check_id, **kwargs)  # noqa: E501
            return data

    def monitor_check_get_http_details_with_http_info(self, monitor_check_id, **kwargs):  # noqa: E501
        """Returns HTTP details for a monitor check.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.monitor_check_get_http_details_with_http_info(monitor_check_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int monitor_check_id: The monitor check Id to get the detailed data for. (required)
        :return: HttpDetailsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['monitor_check_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method monitor_check_get_http_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'monitor_check_id' is set
        if ('monitor_check_id' not in params or
                params['monitor_check_id'] is None):
            raise ValueError("Missing the required parameter `monitor_check_id` when calling `monitor_check_get_http_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'monitor_check_id' in params:
            path_params['monitorCheckId'] = params['monitor_check_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/MonitorCheck/{monitorCheckId}/Http', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HttpDetailsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def monitor_check_get_monitor_check(self, monitor_guid, **kwargs):  # noqa: E501
        """Returns monitor check data for a specific monitor.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.monitor_check_get_monitor_check(monitor_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str monitor_guid: The Guid of the monitor to get monitor checks for. (required)
        :param str error_level: Error level filter that should be applied. (default = NoError and above)
        :param str cursor: A cursor value that should be used for traversing the dataset.
        :param str sorting: Sorting direction based on timestamp.
        :param int take: The number of records to return (Max value = 100)
        :param datetime start: The start of a custom period (can't be used together with the PresetPeriod parameter)
        :param datetime end: The end of a custom period
        :param str preset_period: The requested time period.
        :return: MonitorCheckResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.monitor_check_get_monitor_check_with_http_info(monitor_guid, **kwargs)  # noqa: E501
        else:
            (data) = self.monitor_check_get_monitor_check_with_http_info(monitor_guid, **kwargs)  # noqa: E501
            return data

    def monitor_check_get_monitor_check_with_http_info(self, monitor_guid, **kwargs):  # noqa: E501
        """Returns monitor check data for a specific monitor.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.monitor_check_get_monitor_check_with_http_info(monitor_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str monitor_guid: The Guid of the monitor to get monitor checks for. (required)
        :param str error_level: Error level filter that should be applied. (default = NoError and above)
        :param str cursor: A cursor value that should be used for traversing the dataset.
        :param str sorting: Sorting direction based on timestamp.
        :param int take: The number of records to return (Max value = 100)
        :param datetime start: The start of a custom period (can't be used together with the PresetPeriod parameter)
        :param datetime end: The end of a custom period
        :param str preset_period: The requested time period.
        :return: MonitorCheckResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['monitor_guid', 'error_level', 'cursor', 'sorting', 'take', 'start', 'end', 'preset_period']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method monitor_check_get_monitor_check" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'monitor_guid' is set
        if ('monitor_guid' not in params or
                params['monitor_guid'] is None):
            raise ValueError("Missing the required parameter `monitor_guid` when calling `monitor_check_get_monitor_check`")  # noqa: E501

        if 'take' in params and params['take'] > 100:  # noqa: E501
            raise ValueError("Invalid value for parameter `take` when calling `monitor_check_get_monitor_check`, must be a value less than or equal to `100`")  # noqa: E501
        if 'take' in params and params['take'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `take` when calling `monitor_check_get_monitor_check`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'monitor_guid' in params:
            path_params['monitorGuid'] = params['monitor_guid']  # noqa: E501

        query_params = []
        if 'error_level' in params:
            query_params.append(('ErrorLevel', params['error_level']))  # noqa: E501
        if 'cursor' in params:
            query_params.append(('Cursor', params['cursor']))  # noqa: E501
        if 'sorting' in params:
            query_params.append(('Sorting', params['sorting']))  # noqa: E501
        if 'take' in params:
            query_params.append(('Take', params['take']))  # noqa: E501
        if 'start' in params:
            query_params.append(('Start', params['start']))  # noqa: E501
        if 'end' in params:
            query_params.append(('End', params['end']))  # noqa: E501
        if 'preset_period' in params:
            query_params.append(('PresetPeriod', params['preset_period']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/MonitorCheck/Monitor/{monitorGuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MonitorCheckResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def monitor_check_get_monitor_group_data(self, monitor_group_guid, **kwargs):  # noqa: E501
        """Returns monitor check data for a specific monitor group.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.monitor_check_get_monitor_group_data(monitor_group_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str monitor_group_guid: The Guid of the monitor group to get monitor checks for. (required)
        :param str error_level: Error level filter that should be applied. (default = NoError and above)
        :param str cursor: A cursor value that should be used for traversing the dataset.
        :param str sorting: Sorting direction based on timestamp.
        :param int take: The number of records to return (Max value = 100)
        :param datetime start: The start of a custom period (can't be used together with the PresetPeriod parameter)
        :param datetime end: The end of a custom period
        :param str preset_period: The requested time period.
        :return: MonitorCheckResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.monitor_check_get_monitor_group_data_with_http_info(monitor_group_guid, **kwargs)  # noqa: E501
        else:
            (data) = self.monitor_check_get_monitor_group_data_with_http_info(monitor_group_guid, **kwargs)  # noqa: E501
            return data

    def monitor_check_get_monitor_group_data_with_http_info(self, monitor_group_guid, **kwargs):  # noqa: E501
        """Returns monitor check data for a specific monitor group.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.monitor_check_get_monitor_group_data_with_http_info(monitor_group_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str monitor_group_guid: The Guid of the monitor group to get monitor checks for. (required)
        :param str error_level: Error level filter that should be applied. (default = NoError and above)
        :param str cursor: A cursor value that should be used for traversing the dataset.
        :param str sorting: Sorting direction based on timestamp.
        :param int take: The number of records to return (Max value = 100)
        :param datetime start: The start of a custom period (can't be used together with the PresetPeriod parameter)
        :param datetime end: The end of a custom period
        :param str preset_period: The requested time period.
        :return: MonitorCheckResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['monitor_group_guid', 'error_level', 'cursor', 'sorting', 'take', 'start', 'end', 'preset_period']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method monitor_check_get_monitor_group_data" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'monitor_group_guid' is set
        if ('monitor_group_guid' not in params or
                params['monitor_group_guid'] is None):
            raise ValueError("Missing the required parameter `monitor_group_guid` when calling `monitor_check_get_monitor_group_data`")  # noqa: E501

        if 'take' in params and params['take'] > 100:  # noqa: E501
            raise ValueError("Invalid value for parameter `take` when calling `monitor_check_get_monitor_group_data`, must be a value less than or equal to `100`")  # noqa: E501
        if 'take' in params and params['take'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `take` when calling `monitor_check_get_monitor_group_data`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'monitor_group_guid' in params:
            path_params['monitorGroupGuid'] = params['monitor_group_guid']  # noqa: E501

        query_params = []
        if 'error_level' in params:
            query_params.append(('ErrorLevel', params['error_level']))  # noqa: E501
        if 'cursor' in params:
            query_params.append(('Cursor', params['cursor']))  # noqa: E501
        if 'sorting' in params:
            query_params.append(('Sorting', params['sorting']))  # noqa: E501
        if 'take' in params:
            query_params.append(('Take', params['take']))  # noqa: E501
        if 'start' in params:
            query_params.append(('Start', params['start']))  # noqa: E501
        if 'end' in params:
            query_params.append(('End', params['end']))  # noqa: E501
        if 'preset_period' in params:
            query_params.append(('PresetPeriod', params['preset_period']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/MonitorCheck/MonitorGroup/{monitorGroupGuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MonitorCheckResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def monitor_check_get_multistep_details(self, monitor_check_id, **kwargs):  # noqa: E501
        """Returns Multi-Step API details for a monitor check.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.monitor_check_get_multistep_details(monitor_check_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int monitor_check_id: The monitor check Id to get the detailed data for. (required)
        :return: MsaDetailsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.monitor_check_get_multistep_details_with_http_info(monitor_check_id, **kwargs)  # noqa: E501
        else:
            (data) = self.monitor_check_get_multistep_details_with_http_info(monitor_check_id, **kwargs)  # noqa: E501
            return data

    def monitor_check_get_multistep_details_with_http_info(self, monitor_check_id, **kwargs):  # noqa: E501
        """Returns Multi-Step API details for a monitor check.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.monitor_check_get_multistep_details_with_http_info(monitor_check_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int monitor_check_id: The monitor check Id to get the detailed data for. (required)
        :return: MsaDetailsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['monitor_check_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method monitor_check_get_multistep_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'monitor_check_id' is set
        if ('monitor_check_id' not in params or
                params['monitor_check_id'] is None):
            raise ValueError("Missing the required parameter `monitor_check_id` when calling `monitor_check_get_multistep_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'monitor_check_id' in params:
            path_params['monitorCheckId'] = params['monitor_check_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/MonitorCheck/{monitorCheckId}/MultiStepAPI', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MsaDetailsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def monitor_check_get_screenshots(self, monitor_check_id, screenshot_id, **kwargs):  # noqa: E501
        """Gets a specific screenshot for a specified monitor check  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.monitor_check_get_screenshots(monitor_check_id, screenshot_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int monitor_check_id: The monitor check Id to get the screenshot data for. (required)
        :param str screenshot_id: The screenshot Id of the screenshot to get. (required)
        :return: ScreenshotResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.monitor_check_get_screenshots_with_http_info(monitor_check_id, screenshot_id, **kwargs)  # noqa: E501
        else:
            (data) = self.monitor_check_get_screenshots_with_http_info(monitor_check_id, screenshot_id, **kwargs)  # noqa: E501
            return data

    def monitor_check_get_screenshots_with_http_info(self, monitor_check_id, screenshot_id, **kwargs):  # noqa: E501
        """Gets a specific screenshot for a specified monitor check  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.monitor_check_get_screenshots_with_http_info(monitor_check_id, screenshot_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int monitor_check_id: The monitor check Id to get the screenshot data for. (required)
        :param str screenshot_id: The screenshot Id of the screenshot to get. (required)
        :return: ScreenshotResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['monitor_check_id', 'screenshot_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method monitor_check_get_screenshots" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'monitor_check_id' is set
        if ('monitor_check_id' not in params or
                params['monitor_check_id'] is None):
            raise ValueError("Missing the required parameter `monitor_check_id` when calling `monitor_check_get_screenshots`")  # noqa: E501
        # verify the required parameter 'screenshot_id' is set
        if ('screenshot_id' not in params or
                params['screenshot_id'] is None):
            raise ValueError("Missing the required parameter `screenshot_id` when calling `monitor_check_get_screenshots`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'monitor_check_id' in params:
            path_params['monitorCheckId'] = params['monitor_check_id']  # noqa: E501
        if 'screenshot_id' in params:
            path_params['screenshotId'] = params['screenshot_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/MonitorCheck/{monitorCheckId}/Screenshot/{screenshotId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ScreenshotResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def monitor_check_get_single_monitor_check(self, monitor_check_id, **kwargs):  # noqa: E501
        """Returns a single monitor check.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.monitor_check_get_single_monitor_check(monitor_check_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int monitor_check_id: The Id of the monitor check to get the data for. (required)
        :return: SingleMonitorCheckResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.monitor_check_get_single_monitor_check_with_http_info(monitor_check_id, **kwargs)  # noqa: E501
        else:
            (data) = self.monitor_check_get_single_monitor_check_with_http_info(monitor_check_id, **kwargs)  # noqa: E501
            return data

    def monitor_check_get_single_monitor_check_with_http_info(self, monitor_check_id, **kwargs):  # noqa: E501
        """Returns a single monitor check.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.monitor_check_get_single_monitor_check_with_http_info(monitor_check_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int monitor_check_id: The Id of the monitor check to get the data for. (required)
        :return: SingleMonitorCheckResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['monitor_check_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method monitor_check_get_single_monitor_check" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'monitor_check_id' is set
        if ('monitor_check_id' not in params or
                params['monitor_check_id'] is None):
            raise ValueError("Missing the required parameter `monitor_check_id` when calling `monitor_check_get_single_monitor_check`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'monitor_check_id' in params:
            path_params['monitorCheckId'] = params['monitor_check_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/MonitorCheck/{monitorCheckId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SingleMonitorCheckResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def monitor_check_get_transaction_details(self, monitor_check_id, **kwargs):  # noqa: E501
        """Returns transaction step details for a monitor check.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.monitor_check_get_transaction_details(monitor_check_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int monitor_check_id: The monitor check Id to get the detailed data for. (required)
        :return: TransactionDetailsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.monitor_check_get_transaction_details_with_http_info(monitor_check_id, **kwargs)  # noqa: E501
        else:
            (data) = self.monitor_check_get_transaction_details_with_http_info(monitor_check_id, **kwargs)  # noqa: E501
            return data

    def monitor_check_get_transaction_details_with_http_info(self, monitor_check_id, **kwargs):  # noqa: E501
        """Returns transaction step details for a monitor check.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.monitor_check_get_transaction_details_with_http_info(monitor_check_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int monitor_check_id: The monitor check Id to get the detailed data for. (required)
        :return: TransactionDetailsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['monitor_check_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method monitor_check_get_transaction_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'monitor_check_id' is set
        if ('monitor_check_id' not in params or
                params['monitor_check_id'] is None):
            raise ValueError("Missing the required parameter `monitor_check_id` when calling `monitor_check_get_transaction_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'monitor_check_id' in params:
            path_params['monitorCheckId'] = params['monitor_check_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/MonitorCheck/{monitorCheckId}/Transaction', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TransactionDetailsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def monitor_check_get_waterfall_info(self, monitor_check_id, **kwargs):  # noqa: E501
        """Returns waterfall information for a monitor check.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.monitor_check_get_waterfall_info(monitor_check_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int monitor_check_id: The monitor check Id to get the detailed data for. (required)
        :param int step: For transaction waterfalls only: the transaction step to get the waterfall for.
        :return: WaterfallResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.monitor_check_get_waterfall_info_with_http_info(monitor_check_id, **kwargs)  # noqa: E501
        else:
            (data) = self.monitor_check_get_waterfall_info_with_http_info(monitor_check_id, **kwargs)  # noqa: E501
            return data

    def monitor_check_get_waterfall_info_with_http_info(self, monitor_check_id, **kwargs):  # noqa: E501
        """Returns waterfall information for a monitor check.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.monitor_check_get_waterfall_info_with_http_info(monitor_check_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int monitor_check_id: The monitor check Id to get the detailed data for. (required)
        :param int step: For transaction waterfalls only: the transaction step to get the waterfall for.
        :return: WaterfallResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['monitor_check_id', 'step']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method monitor_check_get_waterfall_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'monitor_check_id' is set
        if ('monitor_check_id' not in params or
                params['monitor_check_id'] is None):
            raise ValueError("Missing the required parameter `monitor_check_id` when calling `monitor_check_get_waterfall_info`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'monitor_check_id' in params:
            path_params['monitorCheckId'] = params['monitor_check_id']  # noqa: E501

        query_params = []
        if 'step' in params:
            query_params.append(('step', params['step']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicauth']  # noqa: E501

        return self.api_client.call_api(
            '/MonitorCheck/{monitorCheckId}/Waterfall', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WaterfallResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
