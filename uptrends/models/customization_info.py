# coding: utf-8

"""
    Uptrends API v4

    This document describes Uptrends API version 4. This Swagger environment also lets you execute API methods directly.  Please note that this is not a sandbox environment: these API methods operate directly on your actual Uptrends account.  For more information, please visit https://www.uptrends.com/api.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CustomizationInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'main_color': 'str',
        'background_color': 'str',
        'text_color': 'str',
        'title_text': 'str',
        'footer_text': 'str',
        'sort_columns_new_to_old': 'bool',
        'sort_rows_property': 'SortOrderEnum',
        'comment_title': 'str',
        'comment_text': 'str'
    }

    attribute_map = {
        'main_color': 'MainColor',
        'background_color': 'BackgroundColor',
        'text_color': 'TextColor',
        'title_text': 'TitleText',
        'footer_text': 'FooterText',
        'sort_columns_new_to_old': 'SortColumnsNewToOld',
        'sort_rows_property': 'SortRowsProperty',
        'comment_title': 'CommentTitle',
        'comment_text': 'CommentText'
    }

    def __init__(self, main_color=None, background_color=None, text_color=None, title_text=None, footer_text=None, sort_columns_new_to_old=None, sort_rows_property=None, comment_title=None, comment_text=None):  # noqa: E501
        """CustomizationInfo - a model defined in Swagger"""  # noqa: E501

        self._main_color = None
        self._background_color = None
        self._text_color = None
        self._title_text = None
        self._footer_text = None
        self._sort_columns_new_to_old = None
        self._sort_rows_property = None
        self._comment_title = None
        self._comment_text = None
        self.discriminator = None

        if main_color is not None:
            self.main_color = main_color
        if background_color is not None:
            self.background_color = background_color
        if text_color is not None:
            self.text_color = text_color
        if title_text is not None:
            self.title_text = title_text
        if footer_text is not None:
            self.footer_text = footer_text
        self.sort_columns_new_to_old = sort_columns_new_to_old
        self.sort_rows_property = sort_rows_property
        if comment_title is not None:
            self.comment_title = comment_title
        if comment_text is not None:
            self.comment_text = comment_text

    @property
    def main_color(self):
        """Gets the main_color of this CustomizationInfo.  # noqa: E501


        :return: The main_color of this CustomizationInfo.  # noqa: E501
        :rtype: str
        """
        return self._main_color

    @main_color.setter
    def main_color(self, main_color):
        """Sets the main_color of this CustomizationInfo.


        :param main_color: The main_color of this CustomizationInfo.  # noqa: E501
        :type: str
        """

        self._main_color = main_color

    @property
    def background_color(self):
        """Gets the background_color of this CustomizationInfo.  # noqa: E501


        :return: The background_color of this CustomizationInfo.  # noqa: E501
        :rtype: str
        """
        return self._background_color

    @background_color.setter
    def background_color(self, background_color):
        """Sets the background_color of this CustomizationInfo.


        :param background_color: The background_color of this CustomizationInfo.  # noqa: E501
        :type: str
        """

        self._background_color = background_color

    @property
    def text_color(self):
        """Gets the text_color of this CustomizationInfo.  # noqa: E501


        :return: The text_color of this CustomizationInfo.  # noqa: E501
        :rtype: str
        """
        return self._text_color

    @text_color.setter
    def text_color(self, text_color):
        """Sets the text_color of this CustomizationInfo.


        :param text_color: The text_color of this CustomizationInfo.  # noqa: E501
        :type: str
        """

        self._text_color = text_color

    @property
    def title_text(self):
        """Gets the title_text of this CustomizationInfo.  # noqa: E501


        :return: The title_text of this CustomizationInfo.  # noqa: E501
        :rtype: str
        """
        return self._title_text

    @title_text.setter
    def title_text(self, title_text):
        """Sets the title_text of this CustomizationInfo.


        :param title_text: The title_text of this CustomizationInfo.  # noqa: E501
        :type: str
        """

        self._title_text = title_text

    @property
    def footer_text(self):
        """Gets the footer_text of this CustomizationInfo.  # noqa: E501


        :return: The footer_text of this CustomizationInfo.  # noqa: E501
        :rtype: str
        """
        return self._footer_text

    @footer_text.setter
    def footer_text(self, footer_text):
        """Sets the footer_text of this CustomizationInfo.


        :param footer_text: The footer_text of this CustomizationInfo.  # noqa: E501
        :type: str
        """

        self._footer_text = footer_text

    @property
    def sort_columns_new_to_old(self):
        """Gets the sort_columns_new_to_old of this CustomizationInfo.  # noqa: E501


        :return: The sort_columns_new_to_old of this CustomizationInfo.  # noqa: E501
        :rtype: bool
        """
        return self._sort_columns_new_to_old

    @sort_columns_new_to_old.setter
    def sort_columns_new_to_old(self, sort_columns_new_to_old):
        """Sets the sort_columns_new_to_old of this CustomizationInfo.


        :param sort_columns_new_to_old: The sort_columns_new_to_old of this CustomizationInfo.  # noqa: E501
        :type: bool
        """
        if sort_columns_new_to_old is None:
            raise ValueError("Invalid value for `sort_columns_new_to_old`, must not be `None`")  # noqa: E501

        self._sort_columns_new_to_old = sort_columns_new_to_old

    @property
    def sort_rows_property(self):
        """Gets the sort_rows_property of this CustomizationInfo.  # noqa: E501


        :return: The sort_rows_property of this CustomizationInfo.  # noqa: E501
        :rtype: SortOrderEnum
        """
        return self._sort_rows_property

    @sort_rows_property.setter
    def sort_rows_property(self, sort_rows_property):
        """Sets the sort_rows_property of this CustomizationInfo.


        :param sort_rows_property: The sort_rows_property of this CustomizationInfo.  # noqa: E501
        :type: SortOrderEnum
        """
        if sort_rows_property is None:
            raise ValueError("Invalid value for `sort_rows_property`, must not be `None`")  # noqa: E501

        self._sort_rows_property = sort_rows_property

    @property
    def comment_title(self):
        """Gets the comment_title of this CustomizationInfo.  # noqa: E501


        :return: The comment_title of this CustomizationInfo.  # noqa: E501
        :rtype: str
        """
        return self._comment_title

    @comment_title.setter
    def comment_title(self, comment_title):
        """Sets the comment_title of this CustomizationInfo.


        :param comment_title: The comment_title of this CustomizationInfo.  # noqa: E501
        :type: str
        """

        self._comment_title = comment_title

    @property
    def comment_text(self):
        """Gets the comment_text of this CustomizationInfo.  # noqa: E501


        :return: The comment_text of this CustomizationInfo.  # noqa: E501
        :rtype: str
        """
        return self._comment_text

    @comment_text.setter
    def comment_text(self, comment_text):
        """Sets the comment_text of this CustomizationInfo.


        :param comment_text: The comment_text of this CustomizationInfo.  # noqa: E501
        :type: str
        """

        self._comment_text = comment_text

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustomizationInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomizationInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
