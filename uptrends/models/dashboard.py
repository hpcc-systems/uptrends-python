# coding: utf-8

"""
    Uptrends API v4

    This document describes Uptrends API version 4. This Swagger environment also lets you execute API methods directly.  Please note that this is not a sandbox environment: these API methods operate directly on your actual Uptrends account.  For more information, please visit https://www.uptrends.com/api.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Dashboard(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dashboard_guid': 'str',
        'name': 'str',
        'dashboard_filter': 'DashboardFilter',
        'auto_refresh': 'bool'
    }

    attribute_map = {
        'dashboard_guid': 'DashboardGuid',
        'name': 'Name',
        'dashboard_filter': 'DashboardFilter',
        'auto_refresh': 'AutoRefresh'
    }

    def __init__(self, dashboard_guid=None, name=None, dashboard_filter=None, auto_refresh=None):  # noqa: E501
        """Dashboard - a model defined in Swagger"""  # noqa: E501

        self._dashboard_guid = None
        self._name = None
        self._dashboard_filter = None
        self._auto_refresh = None
        self.discriminator = None

        if dashboard_guid is not None:
            self.dashboard_guid = dashboard_guid
        if name is not None:
            self.name = name
        if dashboard_filter is not None:
            self.dashboard_filter = dashboard_filter
        if auto_refresh is not None:
            self.auto_refresh = auto_refresh

    @property
    def dashboard_guid(self):
        """Gets the dashboard_guid of this Dashboard.  # noqa: E501


        :return: The dashboard_guid of this Dashboard.  # noqa: E501
        :rtype: str
        """
        return self._dashboard_guid

    @dashboard_guid.setter
    def dashboard_guid(self, dashboard_guid):
        """Sets the dashboard_guid of this Dashboard.


        :param dashboard_guid: The dashboard_guid of this Dashboard.  # noqa: E501
        :type: str
        """

        self._dashboard_guid = dashboard_guid

    @property
    def name(self):
        """Gets the name of this Dashboard.  # noqa: E501


        :return: The name of this Dashboard.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Dashboard.


        :param name: The name of this Dashboard.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def dashboard_filter(self):
        """Gets the dashboard_filter of this Dashboard.  # noqa: E501


        :return: The dashboard_filter of this Dashboard.  # noqa: E501
        :rtype: DashboardFilter
        """
        return self._dashboard_filter

    @dashboard_filter.setter
    def dashboard_filter(self, dashboard_filter):
        """Sets the dashboard_filter of this Dashboard.


        :param dashboard_filter: The dashboard_filter of this Dashboard.  # noqa: E501
        :type: DashboardFilter
        """

        self._dashboard_filter = dashboard_filter

    @property
    def auto_refresh(self):
        """Gets the auto_refresh of this Dashboard.  # noqa: E501


        :return: The auto_refresh of this Dashboard.  # noqa: E501
        :rtype: bool
        """
        return self._auto_refresh

    @auto_refresh.setter
    def auto_refresh(self, auto_refresh):
        """Sets the auto_refresh of this Dashboard.


        :param auto_refresh: The auto_refresh of this Dashboard.  # noqa: E501
        :type: bool
        """

        self._auto_refresh = auto_refresh

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Dashboard, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Dashboard):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
