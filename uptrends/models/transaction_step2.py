# coding: utf-8

"""
    Uptrends API v4

    This document describes Uptrends API version 4. This Swagger environment also lets you execute API methods directly.  Please note that this is not a sandbox environment: these API methods operate directly on your actual Uptrends account.  For more information, please visit https://www.uptrends.com/api.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TransactionStep2(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'has_screenshot': 'bool',
        'has_waterfall': 'bool',
        'sub_steps': 'list[TransactionSubStep]'
    }

    attribute_map = {
        'name': 'Name',
        'has_screenshot': 'HasScreenshot',
        'has_waterfall': 'HasWaterfall',
        'sub_steps': 'SubSteps'
    }

    def __init__(self, name=None, has_screenshot=None, has_waterfall=None, sub_steps=None):  # noqa: E501
        """TransactionStep2 - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._has_screenshot = None
        self._has_waterfall = None
        self._sub_steps = None
        self.discriminator = None

        if name is not None:
            self.name = name
        self.has_screenshot = has_screenshot
        self.has_waterfall = has_waterfall
        if sub_steps is not None:
            self.sub_steps = sub_steps

    @property
    def name(self):
        """Gets the name of this TransactionStep2.  # noqa: E501


        :return: The name of this TransactionStep2.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TransactionStep2.


        :param name: The name of this TransactionStep2.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def has_screenshot(self):
        """Gets the has_screenshot of this TransactionStep2.  # noqa: E501


        :return: The has_screenshot of this TransactionStep2.  # noqa: E501
        :rtype: bool
        """
        return self._has_screenshot

    @has_screenshot.setter
    def has_screenshot(self, has_screenshot):
        """Sets the has_screenshot of this TransactionStep2.


        :param has_screenshot: The has_screenshot of this TransactionStep2.  # noqa: E501
        :type: bool
        """
        if has_screenshot is None:
            raise ValueError("Invalid value for `has_screenshot`, must not be `None`")  # noqa: E501

        self._has_screenshot = has_screenshot

    @property
    def has_waterfall(self):
        """Gets the has_waterfall of this TransactionStep2.  # noqa: E501


        :return: The has_waterfall of this TransactionStep2.  # noqa: E501
        :rtype: bool
        """
        return self._has_waterfall

    @has_waterfall.setter
    def has_waterfall(self, has_waterfall):
        """Sets the has_waterfall of this TransactionStep2.


        :param has_waterfall: The has_waterfall of this TransactionStep2.  # noqa: E501
        :type: bool
        """
        if has_waterfall is None:
            raise ValueError("Invalid value for `has_waterfall`, must not be `None`")  # noqa: E501

        self._has_waterfall = has_waterfall

    @property
    def sub_steps(self):
        """Gets the sub_steps of this TransactionStep2.  # noqa: E501


        :return: The sub_steps of this TransactionStep2.  # noqa: E501
        :rtype: list[TransactionSubStep]
        """
        return self._sub_steps

    @sub_steps.setter
    def sub_steps(self, sub_steps):
        """Sets the sub_steps of this TransactionStep2.


        :param sub_steps: The sub_steps of this TransactionStep2.  # noqa: E501
        :type: list[TransactionSubStep]
        """

        self._sub_steps = sub_steps

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TransactionStep2, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TransactionStep2):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
