# coding: utf-8

"""
    Uptrends API v4

    This document describes Uptrends API version 4. This Swagger environment also lets you execute API methods directly.  Please note that this is not a sandbox environment: these API methods operate directly on your actual Uptrends account.  For more information, please visit https://www.uptrends.com/api.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class MonitorCheckAttributes(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'monitor_guid': 'str',
        'timestamp': 'datetime',
        'error_code': 'int',
        'total_time': 'float',
        'resolve_time': 'float',
        'connection_time': 'float',
        'download_time': 'float',
        'total_bytes': 'int',
        'resolved_ip_address': 'str',
        'error_level': 'object',
        'error_description': 'str',
        'error_message': 'str',
        'staging_mode': 'bool',
        'server_id': 'int',
        'http_status_code': 'int'
    }

    attribute_map = {
        'monitor_guid': 'MonitorGuid',
        'timestamp': 'Timestamp',
        'error_code': 'ErrorCode',
        'total_time': 'TotalTime',
        'resolve_time': 'ResolveTime',
        'connection_time': 'ConnectionTime',
        'download_time': 'DownloadTime',
        'total_bytes': 'TotalBytes',
        'resolved_ip_address': 'ResolvedIpAddress',
        'error_level': 'ErrorLevel',
        'error_description': 'ErrorDescription',
        'error_message': 'ErrorMessage',
        'staging_mode': 'StagingMode',
        'server_id': 'ServerId',
        'http_status_code': 'HttpStatusCode'
    }

    def __init__(self, monitor_guid=None, timestamp=None, error_code=None, total_time=None, resolve_time=None, connection_time=None, download_time=None, total_bytes=None, resolved_ip_address=None, error_level=None, error_description=None, error_message=None, staging_mode=None, server_id=None, http_status_code=None):  # noqa: E501
        """MonitorCheckAttributes - a model defined in Swagger"""  # noqa: E501

        self._monitor_guid = None
        self._timestamp = None
        self._error_code = None
        self._total_time = None
        self._resolve_time = None
        self._connection_time = None
        self._download_time = None
        self._total_bytes = None
        self._resolved_ip_address = None
        self._error_level = None
        self._error_description = None
        self._error_message = None
        self._staging_mode = None
        self._server_id = None
        self._http_status_code = None
        self.discriminator = None

        self.monitor_guid = monitor_guid
        self.timestamp = timestamp
        self.error_code = error_code
        self.total_time = total_time
        self.resolve_time = resolve_time
        self.connection_time = connection_time
        self.download_time = download_time
        if total_bytes is not None:
            self.total_bytes = total_bytes
        if resolved_ip_address is not None:
            self.resolved_ip_address = resolved_ip_address
        self.error_level = error_level
        if error_description is not None:
            self.error_description = error_description
        if error_message is not None:
            self.error_message = error_message
        self.staging_mode = staging_mode
        self.server_id = server_id
        if http_status_code is not None:
            self.http_status_code = http_status_code

    @property
    def monitor_guid(self):
        """Gets the monitor_guid of this MonitorCheckAttributes.  # noqa: E501

        Monitor identifier  # noqa: E501

        :return: The monitor_guid of this MonitorCheckAttributes.  # noqa: E501
        :rtype: str
        """
        return self._monitor_guid

    @monitor_guid.setter
    def monitor_guid(self, monitor_guid):
        """Sets the monitor_guid of this MonitorCheckAttributes.

        Monitor identifier  # noqa: E501

        :param monitor_guid: The monitor_guid of this MonitorCheckAttributes.  # noqa: E501
        :type: str
        """
        if monitor_guid is None:
            raise ValueError("Invalid value for `monitor_guid`, must not be `None`")  # noqa: E501

        self._monitor_guid = monitor_guid

    @property
    def timestamp(self):
        """Gets the timestamp of this MonitorCheckAttributes.  # noqa: E501

        Date/time stamp of the check  # noqa: E501

        :return: The timestamp of this MonitorCheckAttributes.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this MonitorCheckAttributes.

        Date/time stamp of the check  # noqa: E501

        :param timestamp: The timestamp of this MonitorCheckAttributes.  # noqa: E501
        :type: datetime
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def error_code(self):
        """Gets the error_code of this MonitorCheckAttributes.  # noqa: E501

        The numeric Uptrends error code in case of an error result, or 0 in case of an OK result.  # noqa: E501

        :return: The error_code of this MonitorCheckAttributes.  # noqa: E501
        :rtype: int
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this MonitorCheckAttributes.

        The numeric Uptrends error code in case of an error result, or 0 in case of an OK result.  # noqa: E501

        :param error_code: The error_code of this MonitorCheckAttributes.  # noqa: E501
        :type: int
        """
        if error_code is None:
            raise ValueError("Invalid value for `error_code`, must not be `None`")  # noqa: E501

        self._error_code = error_code

    @property
    def total_time(self):
        """Gets the total_time of this MonitorCheckAttributes.  # noqa: E501

        The number of milliseconds needed to complete the monitor check.  # noqa: E501

        :return: The total_time of this MonitorCheckAttributes.  # noqa: E501
        :rtype: float
        """
        return self._total_time

    @total_time.setter
    def total_time(self, total_time):
        """Sets the total_time of this MonitorCheckAttributes.

        The number of milliseconds needed to complete the monitor check.  # noqa: E501

        :param total_time: The total_time of this MonitorCheckAttributes.  # noqa: E501
        :type: float
        """
        if total_time is None:
            raise ValueError("Invalid value for `total_time`, must not be `None`")  # noqa: E501

        self._total_time = total_time

    @property
    def resolve_time(self):
        """Gets the resolve_time of this MonitorCheckAttributes.  # noqa: E501

        The number of milliseconds needed to perform the DNS query for this check, when appropriate.  # noqa: E501

        :return: The resolve_time of this MonitorCheckAttributes.  # noqa: E501
        :rtype: float
        """
        return self._resolve_time

    @resolve_time.setter
    def resolve_time(self, resolve_time):
        """Sets the resolve_time of this MonitorCheckAttributes.

        The number of milliseconds needed to perform the DNS query for this check, when appropriate.  # noqa: E501

        :param resolve_time: The resolve_time of this MonitorCheckAttributes.  # noqa: E501
        :type: float
        """
        if resolve_time is None:
            raise ValueError("Invalid value for `resolve_time`, must not be `None`")  # noqa: E501

        self._resolve_time = resolve_time

    @property
    def connection_time(self):
        """Gets the connection_time of this MonitorCheckAttributes.  # noqa: E501

        The number of milliseconds needed to establish a connection.  # noqa: E501

        :return: The connection_time of this MonitorCheckAttributes.  # noqa: E501
        :rtype: float
        """
        return self._connection_time

    @connection_time.setter
    def connection_time(self, connection_time):
        """Sets the connection_time of this MonitorCheckAttributes.

        The number of milliseconds needed to establish a connection.  # noqa: E501

        :param connection_time: The connection_time of this MonitorCheckAttributes.  # noqa: E501
        :type: float
        """
        if connection_time is None:
            raise ValueError("Invalid value for `connection_time`, must not be `None`")  # noqa: E501

        self._connection_time = connection_time

    @property
    def download_time(self):
        """Gets the download_time of this MonitorCheckAttributes.  # noqa: E501

        The number of milliseconds needed to download the response data.  # noqa: E501

        :return: The download_time of this MonitorCheckAttributes.  # noqa: E501
        :rtype: float
        """
        return self._download_time

    @download_time.setter
    def download_time(self, download_time):
        """Sets the download_time of this MonitorCheckAttributes.

        The number of milliseconds needed to download the response data.  # noqa: E501

        :param download_time: The download_time of this MonitorCheckAttributes.  # noqa: E501
        :type: float
        """
        if download_time is None:
            raise ValueError("Invalid value for `download_time`, must not be `None`")  # noqa: E501

        self._download_time = download_time

    @property
    def total_bytes(self):
        """Gets the total_bytes of this MonitorCheckAttributes.  # noqa: E501

        The number of downloaded bytes for this check.  # noqa: E501

        :return: The total_bytes of this MonitorCheckAttributes.  # noqa: E501
        :rtype: int
        """
        return self._total_bytes

    @total_bytes.setter
    def total_bytes(self, total_bytes):
        """Sets the total_bytes of this MonitorCheckAttributes.

        The number of downloaded bytes for this check.  # noqa: E501

        :param total_bytes: The total_bytes of this MonitorCheckAttributes.  # noqa: E501
        :type: int
        """

        self._total_bytes = total_bytes

    @property
    def resolved_ip_address(self):
        """Gets the resolved_ip_address of this MonitorCheckAttributes.  # noqa: E501

        The IP address that was found for the specified domain name as part of this monitor check.  # noqa: E501

        :return: The resolved_ip_address of this MonitorCheckAttributes.  # noqa: E501
        :rtype: str
        """
        return self._resolved_ip_address

    @resolved_ip_address.setter
    def resolved_ip_address(self, resolved_ip_address):
        """Sets the resolved_ip_address of this MonitorCheckAttributes.

        The IP address that was found for the specified domain name as part of this monitor check.  # noqa: E501

        :param resolved_ip_address: The resolved_ip_address of this MonitorCheckAttributes.  # noqa: E501
        :type: str
        """

        self._resolved_ip_address = resolved_ip_address

    @property
    def error_level(self):
        """Gets the error_level of this MonitorCheckAttributes.  # noqa: E501

        A value that represents the OK/Error state for this check: NoError if the result was OK, Unconfirmed if an error was found, Confirmed if an error was found as a double check, right after an Unconfirmed error.  # noqa: E501

        :return: The error_level of this MonitorCheckAttributes.  # noqa: E501
        :rtype: object
        """
        return self._error_level

    @error_level.setter
    def error_level(self, error_level):
        """Sets the error_level of this MonitorCheckAttributes.

        A value that represents the OK/Error state for this check: NoError if the result was OK, Unconfirmed if an error was found, Confirmed if an error was found as a double check, right after an Unconfirmed error.  # noqa: E501

        :param error_level: The error_level of this MonitorCheckAttributes.  # noqa: E501
        :type: object
        """
        if error_level is None:
            raise ValueError("Invalid value for `error_level`, must not be `None`")  # noqa: E501

        self._error_level = error_level

    @property
    def error_description(self):
        """Gets the error_description of this MonitorCheckAttributes.  # noqa: E501

        A text value that describes the error that was found, or OK if no error was found.  # noqa: E501

        :return: The error_description of this MonitorCheckAttributes.  # noqa: E501
        :rtype: str
        """
        return self._error_description

    @error_description.setter
    def error_description(self, error_description):
        """Sets the error_description of this MonitorCheckAttributes.

        A text value that describes the error that was found, or OK if no error was found.  # noqa: E501

        :param error_description: The error_description of this MonitorCheckAttributes.  # noqa: E501
        :type: str
        """

        self._error_description = error_description

    @property
    def error_message(self):
        """Gets the error_message of this MonitorCheckAttributes.  # noqa: E501

        Any additional error information, if available.  # noqa: E501

        :return: The error_message of this MonitorCheckAttributes.  # noqa: E501
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this MonitorCheckAttributes.

        Any additional error information, if available.  # noqa: E501

        :param error_message: The error_message of this MonitorCheckAttributes.  # noqa: E501
        :type: str
        """

        self._error_message = error_message

    @property
    def staging_mode(self):
        """Gets the staging_mode of this MonitorCheckAttributes.  # noqa: E501

        Did the check come from a staging monitor?  # noqa: E501

        :return: The staging_mode of this MonitorCheckAttributes.  # noqa: E501
        :rtype: bool
        """
        return self._staging_mode

    @staging_mode.setter
    def staging_mode(self, staging_mode):
        """Sets the staging_mode of this MonitorCheckAttributes.

        Did the check come from a staging monitor?  # noqa: E501

        :param staging_mode: The staging_mode of this MonitorCheckAttributes.  # noqa: E501
        :type: bool
        """
        if staging_mode is None:
            raise ValueError("Invalid value for `staging_mode`, must not be `None`")  # noqa: E501

        self._staging_mode = staging_mode

    @property
    def server_id(self):
        """Gets the server_id of this MonitorCheckAttributes.  # noqa: E501

        The Id of the Uptrends checkpoint server that performed this check.  # noqa: E501

        :return: The server_id of this MonitorCheckAttributes.  # noqa: E501
        :rtype: int
        """
        return self._server_id

    @server_id.setter
    def server_id(self, server_id):
        """Sets the server_id of this MonitorCheckAttributes.

        The Id of the Uptrends checkpoint server that performed this check.  # noqa: E501

        :param server_id: The server_id of this MonitorCheckAttributes.  # noqa: E501
        :type: int
        """
        if server_id is None:
            raise ValueError("Invalid value for `server_id`, must not be `None`")  # noqa: E501

        self._server_id = server_id

    @property
    def http_status_code(self):
        """Gets the http_status_code of this MonitorCheckAttributes.  # noqa: E501

        The HTTP status code returned (if applicable)  # noqa: E501

        :return: The http_status_code of this MonitorCheckAttributes.  # noqa: E501
        :rtype: int
        """
        return self._http_status_code

    @http_status_code.setter
    def http_status_code(self, http_status_code):
        """Sets the http_status_code of this MonitorCheckAttributes.

        The HTTP status code returned (if applicable)  # noqa: E501

        :param http_status_code: The http_status_code of this MonitorCheckAttributes.  # noqa: E501
        :type: int
        """

        self._http_status_code = http_status_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MonitorCheckAttributes, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MonitorCheckAttributes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
