# coding: utf-8

"""
    Uptrends API v4

    This document describes Uptrends API version 4. This Swagger environment also lets you execute API methods directly.  Please note that this is not a sandbox environment: these API methods operate directly on your actual Uptrends account.  For more information, please visit https://www.uptrends.com/api.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Monitor(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'monitor_guid': 'str',
        'name': 'str',
        'monitor_type': 'MonitorType',
        'generate_alert': 'bool',
        'is_active': 'bool',
        'is_locked': 'bool',
        'custom_fields': 'list[CustomField]',
        'selected_checkpoints': 'SelectedCheckpoints',
        'use_primary_checkpoints_only': 'bool',
        'check_interval': 'int',
        'monitor_mode': 'MonitorMode',
        'notes': 'str',
        'hash': 'str',
        'predefined_variables': 'list[PredefinedVariable]',
        'custom_metrics': 'list[CustomMetric]',
        'credits': 'int',
        'msa_steps': 'list[MsaStep]',
        'self_service_transaction_script': 'str',
        'alert_on_load_time_limit1': 'bool',
        'load_time_limit1': 'int',
        'alert_on_load_time_limit2': 'bool',
        'load_time_limit2': 'int',
        'block_google_analytics': 'bool',
        'block_uptrends_rum': 'bool',
        'block_urls': 'list[str]',
        'request_headers': 'list[RequestHeader]',
        'user_agent': 'str',
        'username': 'str',
        'password': 'str',
        'authentication_type': 'ApiHttpAuthenticationType',
        'throttling_options': 'ThrottlingOptions',
        'transaction_step_definition': 'object',
        'certificate_name': 'str',
        'certificate_organization': 'str',
        'certificate_organizational_unit': 'str',
        'certificate_serial_number': 'str',
        'certificate_fingerprint': 'str',
        'certificate_issuer_name': 'str',
        'certificate_issuer_company_name': 'str',
        'certificate_issuer_organizational_unit': 'str',
        'certificate_expiration_warning_days': 'int',
        'check_certificate_errors': 'bool',
        'alert_on_maximum_bytes': 'bool',
        'maximum_bytes': 'int',
        'alert_on_maximum_size': 'bool',
        'element_maximum_size': 'int',
        'ignore_external_elements': 'bool',
        'alert_on_percentage_fail': 'bool',
        'failed_object_percentage': 'int',
        'domain_group_guid': 'str',
        'domain_group_guid_specified': 'bool',
        'dns_server': 'str',
        'dns_query': 'DnsQuery',
        'dns_expected_result': 'str',
        'dns_test_value': 'str',
        'port': 'int',
        'ip_version': 'IpVersion',
        'native_i_pv6_only': 'bool',
        'alert_on_minimum_bytes': 'bool',
        'minimum_bytes': 'int',
        'database_name': 'str',
        'network_address': 'str',
        'imap_secure_connection': 'bool',
        'sftp_action': 'SftpAction',
        'sftp_action_path': 'str',
        'http_method': 'HttpMethod',
        'expected_http_status_code': 'int',
        'expected_http_status_code_specified': 'bool',
        'tls_version': 'TlsVersion',
        'request_body': 'str',
        'match_patterns': 'list[PatternMatch]',
        'url': 'str',
        'browser_type': 'BrowserType',
        'browser_window_dimensions': 'BrowserWindowDimensions'
    }

    attribute_map = {
        'monitor_guid': 'MonitorGuid',
        'name': 'Name',
        'monitor_type': 'MonitorType',
        'generate_alert': 'GenerateAlert',
        'is_active': 'IsActive',
        'is_locked': 'IsLocked',
        'custom_fields': 'CustomFields',
        'selected_checkpoints': 'SelectedCheckpoints',
        'use_primary_checkpoints_only': 'UsePrimaryCheckpointsOnly',
        'check_interval': 'CheckInterval',
        'monitor_mode': 'MonitorMode',
        'notes': 'Notes',
        'hash': 'Hash',
        'predefined_variables': 'PredefinedVariables',
        'custom_metrics': 'CustomMetrics',
        'credits': 'Credits',
        'msa_steps': 'MsaSteps',
        'self_service_transaction_script': 'SelfServiceTransactionScript',
        'alert_on_load_time_limit1': 'AlertOnLoadTimeLimit1',
        'load_time_limit1': 'LoadTimeLimit1',
        'alert_on_load_time_limit2': 'AlertOnLoadTimeLimit2',
        'load_time_limit2': 'LoadTimeLimit2',
        'block_google_analytics': 'BlockGoogleAnalytics',
        'block_uptrends_rum': 'BlockUptrendsRum',
        'block_urls': 'BlockUrls',
        'request_headers': 'RequestHeaders',
        'user_agent': 'UserAgent',
        'username': 'Username',
        'password': 'Password',
        'authentication_type': 'AuthenticationType',
        'throttling_options': 'ThrottlingOptions',
        'transaction_step_definition': 'TransactionStepDefinition',
        'certificate_name': 'CertificateName',
        'certificate_organization': 'CertificateOrganization',
        'certificate_organizational_unit': 'CertificateOrganizationalUnit',
        'certificate_serial_number': 'CertificateSerialNumber',
        'certificate_fingerprint': 'CertificateFingerprint',
        'certificate_issuer_name': 'CertificateIssuerName',
        'certificate_issuer_company_name': 'CertificateIssuerCompanyName',
        'certificate_issuer_organizational_unit': 'CertificateIssuerOrganizationalUnit',
        'certificate_expiration_warning_days': 'CertificateExpirationWarningDays',
        'check_certificate_errors': 'CheckCertificateErrors',
        'alert_on_maximum_bytes': 'AlertOnMaximumBytes',
        'maximum_bytes': 'MaximumBytes',
        'alert_on_maximum_size': 'AlertOnMaximumSize',
        'element_maximum_size': 'ElementMaximumSize',
        'ignore_external_elements': 'IgnoreExternalElements',
        'alert_on_percentage_fail': 'AlertOnPercentageFail',
        'failed_object_percentage': 'FailedObjectPercentage',
        'domain_group_guid': 'DomainGroupGuid',
        'domain_group_guid_specified': 'DomainGroupGuidSpecified',
        'dns_server': 'DnsServer',
        'dns_query': 'DnsQuery',
        'dns_expected_result': 'DnsExpectedResult',
        'dns_test_value': 'DnsTestValue',
        'port': 'Port',
        'ip_version': 'IpVersion',
        'native_i_pv6_only': 'NativeIPv6Only',
        'alert_on_minimum_bytes': 'AlertOnMinimumBytes',
        'minimum_bytes': 'MinimumBytes',
        'database_name': 'DatabaseName',
        'network_address': 'NetworkAddress',
        'imap_secure_connection': 'ImapSecureConnection',
        'sftp_action': 'SftpAction',
        'sftp_action_path': 'SftpActionPath',
        'http_method': 'HttpMethod',
        'expected_http_status_code': 'ExpectedHttpStatusCode',
        'expected_http_status_code_specified': 'ExpectedHttpStatusCodeSpecified',
        'tls_version': 'TlsVersion',
        'request_body': 'RequestBody',
        'match_patterns': 'MatchPatterns',
        'url': 'Url',
        'browser_type': 'BrowserType',
        'browser_window_dimensions': 'BrowserWindowDimensions'
    }

    def __init__(self, monitor_guid=None, name=None, monitor_type=None, generate_alert=None, is_active=None, is_locked=None, custom_fields=None, selected_checkpoints=None, use_primary_checkpoints_only=None, check_interval=None, monitor_mode=None, notes=None, hash=None, predefined_variables=None, custom_metrics=None, credits=None, msa_steps=None, self_service_transaction_script=None, alert_on_load_time_limit1=None, load_time_limit1=None, alert_on_load_time_limit2=None, load_time_limit2=None, block_google_analytics=None, block_uptrends_rum=None, block_urls=None, request_headers=None, user_agent=None, username=None, password=None, authentication_type=None, throttling_options=None, transaction_step_definition=None, certificate_name=None, certificate_organization=None, certificate_organizational_unit=None, certificate_serial_number=None, certificate_fingerprint=None, certificate_issuer_name=None, certificate_issuer_company_name=None, certificate_issuer_organizational_unit=None, certificate_expiration_warning_days=None, check_certificate_errors=None, alert_on_maximum_bytes=None, maximum_bytes=None, alert_on_maximum_size=None, element_maximum_size=None, ignore_external_elements=None, alert_on_percentage_fail=None, failed_object_percentage=None, domain_group_guid=None, domain_group_guid_specified=None, dns_server=None, dns_query=None, dns_expected_result=None, dns_test_value=None, port=None, ip_version=None, native_i_pv6_only=None, alert_on_minimum_bytes=None, minimum_bytes=None, database_name=None, network_address=None, imap_secure_connection=None, sftp_action=None, sftp_action_path=None, http_method=None, expected_http_status_code=None, expected_http_status_code_specified=None, tls_version=None, request_body=None, match_patterns=None, url=None, browser_type=None, browser_window_dimensions=None):  # noqa: E501
        """Monitor - a model defined in Swagger"""  # noqa: E501

        self._monitor_guid = None
        self._name = None
        self._monitor_type = None
        self._generate_alert = None
        self._is_active = None
        self._is_locked = None
        self._custom_fields = None
        self._selected_checkpoints = None
        self._use_primary_checkpoints_only = None
        self._check_interval = None
        self._monitor_mode = None
        self._notes = None
        self._hash = None
        self._predefined_variables = None
        self._custom_metrics = None
        self._credits = None
        self._msa_steps = None
        self._self_service_transaction_script = None
        self._alert_on_load_time_limit1 = None
        self._load_time_limit1 = None
        self._alert_on_load_time_limit2 = None
        self._load_time_limit2 = None
        self._block_google_analytics = None
        self._block_uptrends_rum = None
        self._block_urls = None
        self._request_headers = None
        self._user_agent = None
        self._username = None
        self._password = None
        self._authentication_type = None
        self._throttling_options = None
        self._transaction_step_definition = None
        self._certificate_name = None
        self._certificate_organization = None
        self._certificate_organizational_unit = None
        self._certificate_serial_number = None
        self._certificate_fingerprint = None
        self._certificate_issuer_name = None
        self._certificate_issuer_company_name = None
        self._certificate_issuer_organizational_unit = None
        self._certificate_expiration_warning_days = None
        self._check_certificate_errors = None
        self._alert_on_maximum_bytes = None
        self._maximum_bytes = None
        self._alert_on_maximum_size = None
        self._element_maximum_size = None
        self._ignore_external_elements = None
        self._alert_on_percentage_fail = None
        self._failed_object_percentage = None
        self._domain_group_guid = None
        self._domain_group_guid_specified = None
        self._dns_server = None
        self._dns_query = None
        self._dns_expected_result = None
        self._dns_test_value = None
        self._port = None
        self._ip_version = None
        self._native_i_pv6_only = None
        self._alert_on_minimum_bytes = None
        self._minimum_bytes = None
        self._database_name = None
        self._network_address = None
        self._imap_secure_connection = None
        self._sftp_action = None
        self._sftp_action_path = None
        self._http_method = None
        self._expected_http_status_code = None
        self._expected_http_status_code_specified = None
        self._tls_version = None
        self._request_body = None
        self._match_patterns = None
        self._url = None
        self._browser_type = None
        self._browser_window_dimensions = None
        self.discriminator = None

        if monitor_guid is not None:
            self.monitor_guid = monitor_guid
        if name is not None:
            self.name = name
        if monitor_type is not None:
            self.monitor_type = monitor_type
        if generate_alert is not None:
            self.generate_alert = generate_alert
        if is_active is not None:
            self.is_active = is_active
        if is_locked is not None:
            self.is_locked = is_locked
        if custom_fields is not None:
            self.custom_fields = custom_fields
        if selected_checkpoints is not None:
            self.selected_checkpoints = selected_checkpoints
        if use_primary_checkpoints_only is not None:
            self.use_primary_checkpoints_only = use_primary_checkpoints_only
        if check_interval is not None:
            self.check_interval = check_interval
        if monitor_mode is not None:
            self.monitor_mode = monitor_mode
        if notes is not None:
            self.notes = notes
        if hash is not None:
            self.hash = hash
        if predefined_variables is not None:
            self.predefined_variables = predefined_variables
        if custom_metrics is not None:
            self.custom_metrics = custom_metrics
        if credits is not None:
            self.credits = credits
        if msa_steps is not None:
            self.msa_steps = msa_steps
        if self_service_transaction_script is not None:
            self.self_service_transaction_script = self_service_transaction_script
        if alert_on_load_time_limit1 is not None:
            self.alert_on_load_time_limit1 = alert_on_load_time_limit1
        if load_time_limit1 is not None:
            self.load_time_limit1 = load_time_limit1
        if alert_on_load_time_limit2 is not None:
            self.alert_on_load_time_limit2 = alert_on_load_time_limit2
        if load_time_limit2 is not None:
            self.load_time_limit2 = load_time_limit2
        if block_google_analytics is not None:
            self.block_google_analytics = block_google_analytics
        if block_uptrends_rum is not None:
            self.block_uptrends_rum = block_uptrends_rum
        if block_urls is not None:
            self.block_urls = block_urls
        if request_headers is not None:
            self.request_headers = request_headers
        if user_agent is not None:
            self.user_agent = user_agent
        if username is not None:
            self.username = username
        if password is not None:
            self.password = password
        if authentication_type is not None:
            self.authentication_type = authentication_type
        if throttling_options is not None:
            self.throttling_options = throttling_options
        if transaction_step_definition is not None:
            self.transaction_step_definition = transaction_step_definition
        if certificate_name is not None:
            self.certificate_name = certificate_name
        if certificate_organization is not None:
            self.certificate_organization = certificate_organization
        if certificate_organizational_unit is not None:
            self.certificate_organizational_unit = certificate_organizational_unit
        if certificate_serial_number is not None:
            self.certificate_serial_number = certificate_serial_number
        if certificate_fingerprint is not None:
            self.certificate_fingerprint = certificate_fingerprint
        if certificate_issuer_name is not None:
            self.certificate_issuer_name = certificate_issuer_name
        if certificate_issuer_company_name is not None:
            self.certificate_issuer_company_name = certificate_issuer_company_name
        if certificate_issuer_organizational_unit is not None:
            self.certificate_issuer_organizational_unit = certificate_issuer_organizational_unit
        if certificate_expiration_warning_days is not None:
            self.certificate_expiration_warning_days = certificate_expiration_warning_days
        if check_certificate_errors is not None:
            self.check_certificate_errors = check_certificate_errors
        if alert_on_maximum_bytes is not None:
            self.alert_on_maximum_bytes = alert_on_maximum_bytes
        if maximum_bytes is not None:
            self.maximum_bytes = maximum_bytes
        if alert_on_maximum_size is not None:
            self.alert_on_maximum_size = alert_on_maximum_size
        if element_maximum_size is not None:
            self.element_maximum_size = element_maximum_size
        if ignore_external_elements is not None:
            self.ignore_external_elements = ignore_external_elements
        if alert_on_percentage_fail is not None:
            self.alert_on_percentage_fail = alert_on_percentage_fail
        if failed_object_percentage is not None:
            self.failed_object_percentage = failed_object_percentage
        if domain_group_guid is not None:
            self.domain_group_guid = domain_group_guid
        if domain_group_guid_specified is not None:
            self.domain_group_guid_specified = domain_group_guid_specified
        if dns_server is not None:
            self.dns_server = dns_server
        if dns_query is not None:
            self.dns_query = dns_query
        if dns_expected_result is not None:
            self.dns_expected_result = dns_expected_result
        if dns_test_value is not None:
            self.dns_test_value = dns_test_value
        if port is not None:
            self.port = port
        if ip_version is not None:
            self.ip_version = ip_version
        if native_i_pv6_only is not None:
            self.native_i_pv6_only = native_i_pv6_only
        if alert_on_minimum_bytes is not None:
            self.alert_on_minimum_bytes = alert_on_minimum_bytes
        if minimum_bytes is not None:
            self.minimum_bytes = minimum_bytes
        if database_name is not None:
            self.database_name = database_name
        if network_address is not None:
            self.network_address = network_address
        if imap_secure_connection is not None:
            self.imap_secure_connection = imap_secure_connection
        if sftp_action is not None:
            self.sftp_action = sftp_action
        if sftp_action_path is not None:
            self.sftp_action_path = sftp_action_path
        if http_method is not None:
            self.http_method = http_method
        if expected_http_status_code is not None:
            self.expected_http_status_code = expected_http_status_code
        if expected_http_status_code_specified is not None:
            self.expected_http_status_code_specified = expected_http_status_code_specified
        if tls_version is not None:
            self.tls_version = tls_version
        if request_body is not None:
            self.request_body = request_body
        if match_patterns is not None:
            self.match_patterns = match_patterns
        if url is not None:
            self.url = url
        if browser_type is not None:
            self.browser_type = browser_type
        if browser_window_dimensions is not None:
            self.browser_window_dimensions = browser_window_dimensions

    @property
    def monitor_guid(self):
        """Gets the monitor_guid of this Monitor.  # noqa: E501

        The unique key of this monitor.  # noqa: E501

        :return: The monitor_guid of this Monitor.  # noqa: E501
        :rtype: str
        """
        return self._monitor_guid

    @monitor_guid.setter
    def monitor_guid(self, monitor_guid):
        """Sets the monitor_guid of this Monitor.

        The unique key of this monitor.  # noqa: E501

        :param monitor_guid: The monitor_guid of this Monitor.  # noqa: E501
        :type: str
        """

        self._monitor_guid = monitor_guid

    @property
    def name(self):
        """Gets the name of this Monitor.  # noqa: E501

        The name of this monitor.  # noqa: E501

        :return: The name of this Monitor.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Monitor.

        The name of this monitor.  # noqa: E501

        :param name: The name of this Monitor.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def monitor_type(self):
        """Gets the monitor_type of this Monitor.  # noqa: E501


        :return: The monitor_type of this Monitor.  # noqa: E501
        :rtype: MonitorType
        """
        return self._monitor_type

    @monitor_type.setter
    def monitor_type(self, monitor_type):
        """Sets the monitor_type of this Monitor.


        :param monitor_type: The monitor_type of this Monitor.  # noqa: E501
        :type: MonitorType
        """

        self._monitor_type = monitor_type

    @property
    def generate_alert(self):
        """Gets the generate_alert of this Monitor.  # noqa: E501

        Indicates whether this monitor should generate alerts.  # noqa: E501

        :return: The generate_alert of this Monitor.  # noqa: E501
        :rtype: bool
        """
        return self._generate_alert

    @generate_alert.setter
    def generate_alert(self, generate_alert):
        """Sets the generate_alert of this Monitor.

        Indicates whether this monitor should generate alerts.  # noqa: E501

        :param generate_alert: The generate_alert of this Monitor.  # noqa: E501
        :type: bool
        """

        self._generate_alert = generate_alert

    @property
    def is_active(self):
        """Gets the is_active of this Monitor.  # noqa: E501

        Indicates whether this monitor is actively running according to the monitoring interval.  # noqa: E501

        :return: The is_active of this Monitor.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this Monitor.

        Indicates whether this monitor is actively running according to the monitoring interval.  # noqa: E501

        :param is_active: The is_active of this Monitor.  # noqa: E501
        :type: bool
        """

        self._is_active = is_active

    @property
    def is_locked(self):
        """Gets the is_locked of this Monitor.  # noqa: E501

        Indicates whether this monitor is locked.  # noqa: E501

        :return: The is_locked of this Monitor.  # noqa: E501
        :rtype: bool
        """
        return self._is_locked

    @is_locked.setter
    def is_locked(self, is_locked):
        """Sets the is_locked of this Monitor.

        Indicates whether this monitor is locked.  # noqa: E501

        :param is_locked: The is_locked of this Monitor.  # noqa: E501
        :type: bool
        """

        self._is_locked = is_locked

    @property
    def custom_fields(self):
        """Gets the custom_fields of this Monitor.  # noqa: E501


        :return: The custom_fields of this Monitor.  # noqa: E501
        :rtype: list[CustomField]
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this Monitor.


        :param custom_fields: The custom_fields of this Monitor.  # noqa: E501
        :type: list[CustomField]
        """

        self._custom_fields = custom_fields

    @property
    def selected_checkpoints(self):
        """Gets the selected_checkpoints of this Monitor.  # noqa: E501


        :return: The selected_checkpoints of this Monitor.  # noqa: E501
        :rtype: SelectedCheckpoints
        """
        return self._selected_checkpoints

    @selected_checkpoints.setter
    def selected_checkpoints(self, selected_checkpoints):
        """Sets the selected_checkpoints of this Monitor.


        :param selected_checkpoints: The selected_checkpoints of this Monitor.  # noqa: E501
        :type: SelectedCheckpoints
        """

        self._selected_checkpoints = selected_checkpoints

    @property
    def use_primary_checkpoints_only(self):
        """Gets the use_primary_checkpoints_only of this Monitor.  # noqa: E501


        :return: The use_primary_checkpoints_only of this Monitor.  # noqa: E501
        :rtype: bool
        """
        return self._use_primary_checkpoints_only

    @use_primary_checkpoints_only.setter
    def use_primary_checkpoints_only(self, use_primary_checkpoints_only):
        """Sets the use_primary_checkpoints_only of this Monitor.


        :param use_primary_checkpoints_only: The use_primary_checkpoints_only of this Monitor.  # noqa: E501
        :type: bool
        """

        self._use_primary_checkpoints_only = use_primary_checkpoints_only

    @property
    def check_interval(self):
        """Gets the check_interval of this Monitor.  # noqa: E501

        Indicates the interval in seconds  # noqa: E501

        :return: The check_interval of this Monitor.  # noqa: E501
        :rtype: int
        """
        return self._check_interval

    @check_interval.setter
    def check_interval(self, check_interval):
        """Sets the check_interval of this Monitor.

        Indicates the interval in seconds  # noqa: E501

        :param check_interval: The check_interval of this Monitor.  # noqa: E501
        :type: int
        """

        self._check_interval = check_interval

    @property
    def monitor_mode(self):
        """Gets the monitor_mode of this Monitor.  # noqa: E501


        :return: The monitor_mode of this Monitor.  # noqa: E501
        :rtype: MonitorMode
        """
        return self._monitor_mode

    @monitor_mode.setter
    def monitor_mode(self, monitor_mode):
        """Sets the monitor_mode of this Monitor.


        :param monitor_mode: The monitor_mode of this Monitor.  # noqa: E501
        :type: MonitorMode
        """

        self._monitor_mode = monitor_mode

    @property
    def notes(self):
        """Gets the notes of this Monitor.  # noqa: E501


        :return: The notes of this Monitor.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this Monitor.


        :param notes: The notes of this Monitor.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def hash(self):
        """Gets the hash of this Monitor.  # noqa: E501

        Hash corresponding with this monitor.  # noqa: E501

        :return: The hash of this Monitor.  # noqa: E501
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this Monitor.

        Hash corresponding with this monitor.  # noqa: E501

        :param hash: The hash of this Monitor.  # noqa: E501
        :type: str
        """

        self._hash = hash

    @property
    def predefined_variables(self):
        """Gets the predefined_variables of this Monitor.  # noqa: E501


        :return: The predefined_variables of this Monitor.  # noqa: E501
        :rtype: list[PredefinedVariable]
        """
        return self._predefined_variables

    @predefined_variables.setter
    def predefined_variables(self, predefined_variables):
        """Sets the predefined_variables of this Monitor.


        :param predefined_variables: The predefined_variables of this Monitor.  # noqa: E501
        :type: list[PredefinedVariable]
        """

        self._predefined_variables = predefined_variables

    @property
    def custom_metrics(self):
        """Gets the custom_metrics of this Monitor.  # noqa: E501


        :return: The custom_metrics of this Monitor.  # noqa: E501
        :rtype: list[CustomMetric]
        """
        return self._custom_metrics

    @custom_metrics.setter
    def custom_metrics(self, custom_metrics):
        """Sets the custom_metrics of this Monitor.


        :param custom_metrics: The custom_metrics of this Monitor.  # noqa: E501
        :type: list[CustomMetric]
        """

        self._custom_metrics = custom_metrics

    @property
    def credits(self):
        """Gets the credits of this Monitor.  # noqa: E501


        :return: The credits of this Monitor.  # noqa: E501
        :rtype: int
        """
        return self._credits

    @credits.setter
    def credits(self, credits):
        """Sets the credits of this Monitor.


        :param credits: The credits of this Monitor.  # noqa: E501
        :type: int
        """

        self._credits = credits

    @property
    def msa_steps(self):
        """Gets the msa_steps of this Monitor.  # noqa: E501


        :return: The msa_steps of this Monitor.  # noqa: E501
        :rtype: list[MsaStep]
        """
        return self._msa_steps

    @msa_steps.setter
    def msa_steps(self, msa_steps):
        """Sets the msa_steps of this Monitor.


        :param msa_steps: The msa_steps of this Monitor.  # noqa: E501
        :type: list[MsaStep]
        """

        self._msa_steps = msa_steps

    @property
    def self_service_transaction_script(self):
        """Gets the self_service_transaction_script of this Monitor.  # noqa: E501


        :return: The self_service_transaction_script of this Monitor.  # noqa: E501
        :rtype: str
        """
        return self._self_service_transaction_script

    @self_service_transaction_script.setter
    def self_service_transaction_script(self, self_service_transaction_script):
        """Sets the self_service_transaction_script of this Monitor.


        :param self_service_transaction_script: The self_service_transaction_script of this Monitor.  # noqa: E501
        :type: str
        """

        self._self_service_transaction_script = self_service_transaction_script

    @property
    def alert_on_load_time_limit1(self):
        """Gets the alert_on_load_time_limit1 of this Monitor.  # noqa: E501


        :return: The alert_on_load_time_limit1 of this Monitor.  # noqa: E501
        :rtype: bool
        """
        return self._alert_on_load_time_limit1

    @alert_on_load_time_limit1.setter
    def alert_on_load_time_limit1(self, alert_on_load_time_limit1):
        """Sets the alert_on_load_time_limit1 of this Monitor.


        :param alert_on_load_time_limit1: The alert_on_load_time_limit1 of this Monitor.  # noqa: E501
        :type: bool
        """

        self._alert_on_load_time_limit1 = alert_on_load_time_limit1

    @property
    def load_time_limit1(self):
        """Gets the load_time_limit1 of this Monitor.  # noqa: E501


        :return: The load_time_limit1 of this Monitor.  # noqa: E501
        :rtype: int
        """
        return self._load_time_limit1

    @load_time_limit1.setter
    def load_time_limit1(self, load_time_limit1):
        """Sets the load_time_limit1 of this Monitor.


        :param load_time_limit1: The load_time_limit1 of this Monitor.  # noqa: E501
        :type: int
        """

        self._load_time_limit1 = load_time_limit1

    @property
    def alert_on_load_time_limit2(self):
        """Gets the alert_on_load_time_limit2 of this Monitor.  # noqa: E501


        :return: The alert_on_load_time_limit2 of this Monitor.  # noqa: E501
        :rtype: bool
        """
        return self._alert_on_load_time_limit2

    @alert_on_load_time_limit2.setter
    def alert_on_load_time_limit2(self, alert_on_load_time_limit2):
        """Sets the alert_on_load_time_limit2 of this Monitor.


        :param alert_on_load_time_limit2: The alert_on_load_time_limit2 of this Monitor.  # noqa: E501
        :type: bool
        """

        self._alert_on_load_time_limit2 = alert_on_load_time_limit2

    @property
    def load_time_limit2(self):
        """Gets the load_time_limit2 of this Monitor.  # noqa: E501


        :return: The load_time_limit2 of this Monitor.  # noqa: E501
        :rtype: int
        """
        return self._load_time_limit2

    @load_time_limit2.setter
    def load_time_limit2(self, load_time_limit2):
        """Sets the load_time_limit2 of this Monitor.


        :param load_time_limit2: The load_time_limit2 of this Monitor.  # noqa: E501
        :type: int
        """

        self._load_time_limit2 = load_time_limit2

    @property
    def block_google_analytics(self):
        """Gets the block_google_analytics of this Monitor.  # noqa: E501


        :return: The block_google_analytics of this Monitor.  # noqa: E501
        :rtype: bool
        """
        return self._block_google_analytics

    @block_google_analytics.setter
    def block_google_analytics(self, block_google_analytics):
        """Sets the block_google_analytics of this Monitor.


        :param block_google_analytics: The block_google_analytics of this Monitor.  # noqa: E501
        :type: bool
        """

        self._block_google_analytics = block_google_analytics

    @property
    def block_uptrends_rum(self):
        """Gets the block_uptrends_rum of this Monitor.  # noqa: E501


        :return: The block_uptrends_rum of this Monitor.  # noqa: E501
        :rtype: bool
        """
        return self._block_uptrends_rum

    @block_uptrends_rum.setter
    def block_uptrends_rum(self, block_uptrends_rum):
        """Sets the block_uptrends_rum of this Monitor.


        :param block_uptrends_rum: The block_uptrends_rum of this Monitor.  # noqa: E501
        :type: bool
        """

        self._block_uptrends_rum = block_uptrends_rum

    @property
    def block_urls(self):
        """Gets the block_urls of this Monitor.  # noqa: E501


        :return: The block_urls of this Monitor.  # noqa: E501
        :rtype: list[str]
        """
        return self._block_urls

    @block_urls.setter
    def block_urls(self, block_urls):
        """Sets the block_urls of this Monitor.


        :param block_urls: The block_urls of this Monitor.  # noqa: E501
        :type: list[str]
        """

        self._block_urls = block_urls

    @property
    def request_headers(self):
        """Gets the request_headers of this Monitor.  # noqa: E501


        :return: The request_headers of this Monitor.  # noqa: E501
        :rtype: list[RequestHeader]
        """
        return self._request_headers

    @request_headers.setter
    def request_headers(self, request_headers):
        """Sets the request_headers of this Monitor.


        :param request_headers: The request_headers of this Monitor.  # noqa: E501
        :type: list[RequestHeader]
        """

        self._request_headers = request_headers

    @property
    def user_agent(self):
        """Gets the user_agent of this Monitor.  # noqa: E501


        :return: The user_agent of this Monitor.  # noqa: E501
        :rtype: str
        """
        return self._user_agent

    @user_agent.setter
    def user_agent(self, user_agent):
        """Sets the user_agent of this Monitor.


        :param user_agent: The user_agent of this Monitor.  # noqa: E501
        :type: str
        """

        self._user_agent = user_agent

    @property
    def username(self):
        """Gets the username of this Monitor.  # noqa: E501


        :return: The username of this Monitor.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this Monitor.


        :param username: The username of this Monitor.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def password(self):
        """Gets the password of this Monitor.  # noqa: E501


        :return: The password of this Monitor.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this Monitor.


        :param password: The password of this Monitor.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def authentication_type(self):
        """Gets the authentication_type of this Monitor.  # noqa: E501


        :return: The authentication_type of this Monitor.  # noqa: E501
        :rtype: ApiHttpAuthenticationType
        """
        return self._authentication_type

    @authentication_type.setter
    def authentication_type(self, authentication_type):
        """Sets the authentication_type of this Monitor.


        :param authentication_type: The authentication_type of this Monitor.  # noqa: E501
        :type: ApiHttpAuthenticationType
        """

        self._authentication_type = authentication_type

    @property
    def throttling_options(self):
        """Gets the throttling_options of this Monitor.  # noqa: E501


        :return: The throttling_options of this Monitor.  # noqa: E501
        :rtype: ThrottlingOptions
        """
        return self._throttling_options

    @throttling_options.setter
    def throttling_options(self, throttling_options):
        """Sets the throttling_options of this Monitor.


        :param throttling_options: The throttling_options of this Monitor.  # noqa: E501
        :type: ThrottlingOptions
        """

        self._throttling_options = throttling_options

    @property
    def transaction_step_definition(self):
        """Gets the transaction_step_definition of this Monitor.  # noqa: E501

        Only valid for Transaction monitors: the data structure that specifies the transaction steps (and sub steps) to execute.  # noqa: E501

        :return: The transaction_step_definition of this Monitor.  # noqa: E501
        :rtype: object
        """
        return self._transaction_step_definition

    @transaction_step_definition.setter
    def transaction_step_definition(self, transaction_step_definition):
        """Sets the transaction_step_definition of this Monitor.

        Only valid for Transaction monitors: the data structure that specifies the transaction steps (and sub steps) to execute.  # noqa: E501

        :param transaction_step_definition: The transaction_step_definition of this Monitor.  # noqa: E501
        :type: object
        """

        self._transaction_step_definition = transaction_step_definition

    @property
    def certificate_name(self):
        """Gets the certificate_name of this Monitor.  # noqa: E501


        :return: The certificate_name of this Monitor.  # noqa: E501
        :rtype: str
        """
        return self._certificate_name

    @certificate_name.setter
    def certificate_name(self, certificate_name):
        """Sets the certificate_name of this Monitor.


        :param certificate_name: The certificate_name of this Monitor.  # noqa: E501
        :type: str
        """

        self._certificate_name = certificate_name

    @property
    def certificate_organization(self):
        """Gets the certificate_organization of this Monitor.  # noqa: E501


        :return: The certificate_organization of this Monitor.  # noqa: E501
        :rtype: str
        """
        return self._certificate_organization

    @certificate_organization.setter
    def certificate_organization(self, certificate_organization):
        """Sets the certificate_organization of this Monitor.


        :param certificate_organization: The certificate_organization of this Monitor.  # noqa: E501
        :type: str
        """

        self._certificate_organization = certificate_organization

    @property
    def certificate_organizational_unit(self):
        """Gets the certificate_organizational_unit of this Monitor.  # noqa: E501


        :return: The certificate_organizational_unit of this Monitor.  # noqa: E501
        :rtype: str
        """
        return self._certificate_organizational_unit

    @certificate_organizational_unit.setter
    def certificate_organizational_unit(self, certificate_organizational_unit):
        """Sets the certificate_organizational_unit of this Monitor.


        :param certificate_organizational_unit: The certificate_organizational_unit of this Monitor.  # noqa: E501
        :type: str
        """

        self._certificate_organizational_unit = certificate_organizational_unit

    @property
    def certificate_serial_number(self):
        """Gets the certificate_serial_number of this Monitor.  # noqa: E501


        :return: The certificate_serial_number of this Monitor.  # noqa: E501
        :rtype: str
        """
        return self._certificate_serial_number

    @certificate_serial_number.setter
    def certificate_serial_number(self, certificate_serial_number):
        """Sets the certificate_serial_number of this Monitor.


        :param certificate_serial_number: The certificate_serial_number of this Monitor.  # noqa: E501
        :type: str
        """

        self._certificate_serial_number = certificate_serial_number

    @property
    def certificate_fingerprint(self):
        """Gets the certificate_fingerprint of this Monitor.  # noqa: E501


        :return: The certificate_fingerprint of this Monitor.  # noqa: E501
        :rtype: str
        """
        return self._certificate_fingerprint

    @certificate_fingerprint.setter
    def certificate_fingerprint(self, certificate_fingerprint):
        """Sets the certificate_fingerprint of this Monitor.


        :param certificate_fingerprint: The certificate_fingerprint of this Monitor.  # noqa: E501
        :type: str
        """

        self._certificate_fingerprint = certificate_fingerprint

    @property
    def certificate_issuer_name(self):
        """Gets the certificate_issuer_name of this Monitor.  # noqa: E501


        :return: The certificate_issuer_name of this Monitor.  # noqa: E501
        :rtype: str
        """
        return self._certificate_issuer_name

    @certificate_issuer_name.setter
    def certificate_issuer_name(self, certificate_issuer_name):
        """Sets the certificate_issuer_name of this Monitor.


        :param certificate_issuer_name: The certificate_issuer_name of this Monitor.  # noqa: E501
        :type: str
        """

        self._certificate_issuer_name = certificate_issuer_name

    @property
    def certificate_issuer_company_name(self):
        """Gets the certificate_issuer_company_name of this Monitor.  # noqa: E501


        :return: The certificate_issuer_company_name of this Monitor.  # noqa: E501
        :rtype: str
        """
        return self._certificate_issuer_company_name

    @certificate_issuer_company_name.setter
    def certificate_issuer_company_name(self, certificate_issuer_company_name):
        """Sets the certificate_issuer_company_name of this Monitor.


        :param certificate_issuer_company_name: The certificate_issuer_company_name of this Monitor.  # noqa: E501
        :type: str
        """

        self._certificate_issuer_company_name = certificate_issuer_company_name

    @property
    def certificate_issuer_organizational_unit(self):
        """Gets the certificate_issuer_organizational_unit of this Monitor.  # noqa: E501


        :return: The certificate_issuer_organizational_unit of this Monitor.  # noqa: E501
        :rtype: str
        """
        return self._certificate_issuer_organizational_unit

    @certificate_issuer_organizational_unit.setter
    def certificate_issuer_organizational_unit(self, certificate_issuer_organizational_unit):
        """Sets the certificate_issuer_organizational_unit of this Monitor.


        :param certificate_issuer_organizational_unit: The certificate_issuer_organizational_unit of this Monitor.  # noqa: E501
        :type: str
        """

        self._certificate_issuer_organizational_unit = certificate_issuer_organizational_unit

    @property
    def certificate_expiration_warning_days(self):
        """Gets the certificate_expiration_warning_days of this Monitor.  # noqa: E501


        :return: The certificate_expiration_warning_days of this Monitor.  # noqa: E501
        :rtype: int
        """
        return self._certificate_expiration_warning_days

    @certificate_expiration_warning_days.setter
    def certificate_expiration_warning_days(self, certificate_expiration_warning_days):
        """Sets the certificate_expiration_warning_days of this Monitor.


        :param certificate_expiration_warning_days: The certificate_expiration_warning_days of this Monitor.  # noqa: E501
        :type: int
        """

        self._certificate_expiration_warning_days = certificate_expiration_warning_days

    @property
    def check_certificate_errors(self):
        """Gets the check_certificate_errors of this Monitor.  # noqa: E501


        :return: The check_certificate_errors of this Monitor.  # noqa: E501
        :rtype: bool
        """
        return self._check_certificate_errors

    @check_certificate_errors.setter
    def check_certificate_errors(self, check_certificate_errors):
        """Sets the check_certificate_errors of this Monitor.


        :param check_certificate_errors: The check_certificate_errors of this Monitor.  # noqa: E501
        :type: bool
        """

        self._check_certificate_errors = check_certificate_errors

    @property
    def alert_on_maximum_bytes(self):
        """Gets the alert_on_maximum_bytes of this Monitor.  # noqa: E501


        :return: The alert_on_maximum_bytes of this Monitor.  # noqa: E501
        :rtype: bool
        """
        return self._alert_on_maximum_bytes

    @alert_on_maximum_bytes.setter
    def alert_on_maximum_bytes(self, alert_on_maximum_bytes):
        """Sets the alert_on_maximum_bytes of this Monitor.


        :param alert_on_maximum_bytes: The alert_on_maximum_bytes of this Monitor.  # noqa: E501
        :type: bool
        """

        self._alert_on_maximum_bytes = alert_on_maximum_bytes

    @property
    def maximum_bytes(self):
        """Gets the maximum_bytes of this Monitor.  # noqa: E501


        :return: The maximum_bytes of this Monitor.  # noqa: E501
        :rtype: int
        """
        return self._maximum_bytes

    @maximum_bytes.setter
    def maximum_bytes(self, maximum_bytes):
        """Sets the maximum_bytes of this Monitor.


        :param maximum_bytes: The maximum_bytes of this Monitor.  # noqa: E501
        :type: int
        """

        self._maximum_bytes = maximum_bytes

    @property
    def alert_on_maximum_size(self):
        """Gets the alert_on_maximum_size of this Monitor.  # noqa: E501


        :return: The alert_on_maximum_size of this Monitor.  # noqa: E501
        :rtype: bool
        """
        return self._alert_on_maximum_size

    @alert_on_maximum_size.setter
    def alert_on_maximum_size(self, alert_on_maximum_size):
        """Sets the alert_on_maximum_size of this Monitor.


        :param alert_on_maximum_size: The alert_on_maximum_size of this Monitor.  # noqa: E501
        :type: bool
        """

        self._alert_on_maximum_size = alert_on_maximum_size

    @property
    def element_maximum_size(self):
        """Gets the element_maximum_size of this Monitor.  # noqa: E501


        :return: The element_maximum_size of this Monitor.  # noqa: E501
        :rtype: int
        """
        return self._element_maximum_size

    @element_maximum_size.setter
    def element_maximum_size(self, element_maximum_size):
        """Sets the element_maximum_size of this Monitor.


        :param element_maximum_size: The element_maximum_size of this Monitor.  # noqa: E501
        :type: int
        """

        self._element_maximum_size = element_maximum_size

    @property
    def ignore_external_elements(self):
        """Gets the ignore_external_elements of this Monitor.  # noqa: E501


        :return: The ignore_external_elements of this Monitor.  # noqa: E501
        :rtype: bool
        """
        return self._ignore_external_elements

    @ignore_external_elements.setter
    def ignore_external_elements(self, ignore_external_elements):
        """Sets the ignore_external_elements of this Monitor.


        :param ignore_external_elements: The ignore_external_elements of this Monitor.  # noqa: E501
        :type: bool
        """

        self._ignore_external_elements = ignore_external_elements

    @property
    def alert_on_percentage_fail(self):
        """Gets the alert_on_percentage_fail of this Monitor.  # noqa: E501


        :return: The alert_on_percentage_fail of this Monitor.  # noqa: E501
        :rtype: bool
        """
        return self._alert_on_percentage_fail

    @alert_on_percentage_fail.setter
    def alert_on_percentage_fail(self, alert_on_percentage_fail):
        """Sets the alert_on_percentage_fail of this Monitor.


        :param alert_on_percentage_fail: The alert_on_percentage_fail of this Monitor.  # noqa: E501
        :type: bool
        """

        self._alert_on_percentage_fail = alert_on_percentage_fail

    @property
    def failed_object_percentage(self):
        """Gets the failed_object_percentage of this Monitor.  # noqa: E501


        :return: The failed_object_percentage of this Monitor.  # noqa: E501
        :rtype: int
        """
        return self._failed_object_percentage

    @failed_object_percentage.setter
    def failed_object_percentage(self, failed_object_percentage):
        """Sets the failed_object_percentage of this Monitor.


        :param failed_object_percentage: The failed_object_percentage of this Monitor.  # noqa: E501
        :type: int
        """

        self._failed_object_percentage = failed_object_percentage

    @property
    def domain_group_guid(self):
        """Gets the domain_group_guid of this Monitor.  # noqa: E501


        :return: The domain_group_guid of this Monitor.  # noqa: E501
        :rtype: str
        """
        return self._domain_group_guid

    @domain_group_guid.setter
    def domain_group_guid(self, domain_group_guid):
        """Sets the domain_group_guid of this Monitor.


        :param domain_group_guid: The domain_group_guid of this Monitor.  # noqa: E501
        :type: str
        """

        self._domain_group_guid = domain_group_guid

    @property
    def domain_group_guid_specified(self):
        """Gets the domain_group_guid_specified of this Monitor.  # noqa: E501


        :return: The domain_group_guid_specified of this Monitor.  # noqa: E501
        :rtype: bool
        """
        return self._domain_group_guid_specified

    @domain_group_guid_specified.setter
    def domain_group_guid_specified(self, domain_group_guid_specified):
        """Sets the domain_group_guid_specified of this Monitor.


        :param domain_group_guid_specified: The domain_group_guid_specified of this Monitor.  # noqa: E501
        :type: bool
        """

        self._domain_group_guid_specified = domain_group_guid_specified

    @property
    def dns_server(self):
        """Gets the dns_server of this Monitor.  # noqa: E501


        :return: The dns_server of this Monitor.  # noqa: E501
        :rtype: str
        """
        return self._dns_server

    @dns_server.setter
    def dns_server(self, dns_server):
        """Sets the dns_server of this Monitor.


        :param dns_server: The dns_server of this Monitor.  # noqa: E501
        :type: str
        """

        self._dns_server = dns_server

    @property
    def dns_query(self):
        """Gets the dns_query of this Monitor.  # noqa: E501


        :return: The dns_query of this Monitor.  # noqa: E501
        :rtype: DnsQuery
        """
        return self._dns_query

    @dns_query.setter
    def dns_query(self, dns_query):
        """Sets the dns_query of this Monitor.


        :param dns_query: The dns_query of this Monitor.  # noqa: E501
        :type: DnsQuery
        """

        self._dns_query = dns_query

    @property
    def dns_expected_result(self):
        """Gets the dns_expected_result of this Monitor.  # noqa: E501


        :return: The dns_expected_result of this Monitor.  # noqa: E501
        :rtype: str
        """
        return self._dns_expected_result

    @dns_expected_result.setter
    def dns_expected_result(self, dns_expected_result):
        """Sets the dns_expected_result of this Monitor.


        :param dns_expected_result: The dns_expected_result of this Monitor.  # noqa: E501
        :type: str
        """

        self._dns_expected_result = dns_expected_result

    @property
    def dns_test_value(self):
        """Gets the dns_test_value of this Monitor.  # noqa: E501


        :return: The dns_test_value of this Monitor.  # noqa: E501
        :rtype: str
        """
        return self._dns_test_value

    @dns_test_value.setter
    def dns_test_value(self, dns_test_value):
        """Sets the dns_test_value of this Monitor.


        :param dns_test_value: The dns_test_value of this Monitor.  # noqa: E501
        :type: str
        """

        self._dns_test_value = dns_test_value

    @property
    def port(self):
        """Gets the port of this Monitor.  # noqa: E501


        :return: The port of this Monitor.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this Monitor.


        :param port: The port of this Monitor.  # noqa: E501
        :type: int
        """

        self._port = port

    @property
    def ip_version(self):
        """Gets the ip_version of this Monitor.  # noqa: E501


        :return: The ip_version of this Monitor.  # noqa: E501
        :rtype: IpVersion
        """
        return self._ip_version

    @ip_version.setter
    def ip_version(self, ip_version):
        """Sets the ip_version of this Monitor.


        :param ip_version: The ip_version of this Monitor.  # noqa: E501
        :type: IpVersion
        """

        self._ip_version = ip_version

    @property
    def native_i_pv6_only(self):
        """Gets the native_i_pv6_only of this Monitor.  # noqa: E501


        :return: The native_i_pv6_only of this Monitor.  # noqa: E501
        :rtype: bool
        """
        return self._native_i_pv6_only

    @native_i_pv6_only.setter
    def native_i_pv6_only(self, native_i_pv6_only):
        """Sets the native_i_pv6_only of this Monitor.


        :param native_i_pv6_only: The native_i_pv6_only of this Monitor.  # noqa: E501
        :type: bool
        """

        self._native_i_pv6_only = native_i_pv6_only

    @property
    def alert_on_minimum_bytes(self):
        """Gets the alert_on_minimum_bytes of this Monitor.  # noqa: E501


        :return: The alert_on_minimum_bytes of this Monitor.  # noqa: E501
        :rtype: bool
        """
        return self._alert_on_minimum_bytes

    @alert_on_minimum_bytes.setter
    def alert_on_minimum_bytes(self, alert_on_minimum_bytes):
        """Sets the alert_on_minimum_bytes of this Monitor.


        :param alert_on_minimum_bytes: The alert_on_minimum_bytes of this Monitor.  # noqa: E501
        :type: bool
        """

        self._alert_on_minimum_bytes = alert_on_minimum_bytes

    @property
    def minimum_bytes(self):
        """Gets the minimum_bytes of this Monitor.  # noqa: E501


        :return: The minimum_bytes of this Monitor.  # noqa: E501
        :rtype: int
        """
        return self._minimum_bytes

    @minimum_bytes.setter
    def minimum_bytes(self, minimum_bytes):
        """Sets the minimum_bytes of this Monitor.


        :param minimum_bytes: The minimum_bytes of this Monitor.  # noqa: E501
        :type: int
        """

        self._minimum_bytes = minimum_bytes

    @property
    def database_name(self):
        """Gets the database_name of this Monitor.  # noqa: E501


        :return: The database_name of this Monitor.  # noqa: E501
        :rtype: str
        """
        return self._database_name

    @database_name.setter
    def database_name(self, database_name):
        """Sets the database_name of this Monitor.


        :param database_name: The database_name of this Monitor.  # noqa: E501
        :type: str
        """

        self._database_name = database_name

    @property
    def network_address(self):
        """Gets the network_address of this Monitor.  # noqa: E501


        :return: The network_address of this Monitor.  # noqa: E501
        :rtype: str
        """
        return self._network_address

    @network_address.setter
    def network_address(self, network_address):
        """Sets the network_address of this Monitor.


        :param network_address: The network_address of this Monitor.  # noqa: E501
        :type: str
        """

        self._network_address = network_address

    @property
    def imap_secure_connection(self):
        """Gets the imap_secure_connection of this Monitor.  # noqa: E501


        :return: The imap_secure_connection of this Monitor.  # noqa: E501
        :rtype: bool
        """
        return self._imap_secure_connection

    @imap_secure_connection.setter
    def imap_secure_connection(self, imap_secure_connection):
        """Sets the imap_secure_connection of this Monitor.


        :param imap_secure_connection: The imap_secure_connection of this Monitor.  # noqa: E501
        :type: bool
        """

        self._imap_secure_connection = imap_secure_connection

    @property
    def sftp_action(self):
        """Gets the sftp_action of this Monitor.  # noqa: E501


        :return: The sftp_action of this Monitor.  # noqa: E501
        :rtype: SftpAction
        """
        return self._sftp_action

    @sftp_action.setter
    def sftp_action(self, sftp_action):
        """Sets the sftp_action of this Monitor.


        :param sftp_action: The sftp_action of this Monitor.  # noqa: E501
        :type: SftpAction
        """

        self._sftp_action = sftp_action

    @property
    def sftp_action_path(self):
        """Gets the sftp_action_path of this Monitor.  # noqa: E501


        :return: The sftp_action_path of this Monitor.  # noqa: E501
        :rtype: str
        """
        return self._sftp_action_path

    @sftp_action_path.setter
    def sftp_action_path(self, sftp_action_path):
        """Sets the sftp_action_path of this Monitor.


        :param sftp_action_path: The sftp_action_path of this Monitor.  # noqa: E501
        :type: str
        """

        self._sftp_action_path = sftp_action_path

    @property
    def http_method(self):
        """Gets the http_method of this Monitor.  # noqa: E501


        :return: The http_method of this Monitor.  # noqa: E501
        :rtype: HttpMethod
        """
        return self._http_method

    @http_method.setter
    def http_method(self, http_method):
        """Sets the http_method of this Monitor.


        :param http_method: The http_method of this Monitor.  # noqa: E501
        :type: HttpMethod
        """

        self._http_method = http_method

    @property
    def expected_http_status_code(self):
        """Gets the expected_http_status_code of this Monitor.  # noqa: E501


        :return: The expected_http_status_code of this Monitor.  # noqa: E501
        :rtype: int
        """
        return self._expected_http_status_code

    @expected_http_status_code.setter
    def expected_http_status_code(self, expected_http_status_code):
        """Sets the expected_http_status_code of this Monitor.


        :param expected_http_status_code: The expected_http_status_code of this Monitor.  # noqa: E501
        :type: int
        """

        self._expected_http_status_code = expected_http_status_code

    @property
    def expected_http_status_code_specified(self):
        """Gets the expected_http_status_code_specified of this Monitor.  # noqa: E501


        :return: The expected_http_status_code_specified of this Monitor.  # noqa: E501
        :rtype: bool
        """
        return self._expected_http_status_code_specified

    @expected_http_status_code_specified.setter
    def expected_http_status_code_specified(self, expected_http_status_code_specified):
        """Sets the expected_http_status_code_specified of this Monitor.


        :param expected_http_status_code_specified: The expected_http_status_code_specified of this Monitor.  # noqa: E501
        :type: bool
        """

        self._expected_http_status_code_specified = expected_http_status_code_specified

    @property
    def tls_version(self):
        """Gets the tls_version of this Monitor.  # noqa: E501


        :return: The tls_version of this Monitor.  # noqa: E501
        :rtype: TlsVersion
        """
        return self._tls_version

    @tls_version.setter
    def tls_version(self, tls_version):
        """Sets the tls_version of this Monitor.


        :param tls_version: The tls_version of this Monitor.  # noqa: E501
        :type: TlsVersion
        """

        self._tls_version = tls_version

    @property
    def request_body(self):
        """Gets the request_body of this Monitor.  # noqa: E501


        :return: The request_body of this Monitor.  # noqa: E501
        :rtype: str
        """
        return self._request_body

    @request_body.setter
    def request_body(self, request_body):
        """Sets the request_body of this Monitor.


        :param request_body: The request_body of this Monitor.  # noqa: E501
        :type: str
        """

        self._request_body = request_body

    @property
    def match_patterns(self):
        """Gets the match_patterns of this Monitor.  # noqa: E501


        :return: The match_patterns of this Monitor.  # noqa: E501
        :rtype: list[PatternMatch]
        """
        return self._match_patterns

    @match_patterns.setter
    def match_patterns(self, match_patterns):
        """Sets the match_patterns of this Monitor.


        :param match_patterns: The match_patterns of this Monitor.  # noqa: E501
        :type: list[PatternMatch]
        """

        self._match_patterns = match_patterns

    @property
    def url(self):
        """Gets the url of this Monitor.  # noqa: E501


        :return: The url of this Monitor.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Monitor.


        :param url: The url of this Monitor.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def browser_type(self):
        """Gets the browser_type of this Monitor.  # noqa: E501


        :return: The browser_type of this Monitor.  # noqa: E501
        :rtype: BrowserType
        """
        return self._browser_type

    @browser_type.setter
    def browser_type(self, browser_type):
        """Sets the browser_type of this Monitor.


        :param browser_type: The browser_type of this Monitor.  # noqa: E501
        :type: BrowserType
        """

        self._browser_type = browser_type

    @property
    def browser_window_dimensions(self):
        """Gets the browser_window_dimensions of this Monitor.  # noqa: E501


        :return: The browser_window_dimensions of this Monitor.  # noqa: E501
        :rtype: BrowserWindowDimensions
        """
        return self._browser_window_dimensions

    @browser_window_dimensions.setter
    def browser_window_dimensions(self, browser_window_dimensions):
        """Sets the browser_window_dimensions of this Monitor.


        :param browser_window_dimensions: The browser_window_dimensions of this Monitor.  # noqa: E501
        :type: BrowserWindowDimensions
        """

        self._browser_window_dimensions = browser_window_dimensions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Monitor, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Monitor):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
