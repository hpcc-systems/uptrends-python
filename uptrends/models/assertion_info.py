# coding: utf-8

"""
    Uptrends API v4

    This document describes Uptrends API version 4. This Swagger environment also lets you execute API methods directly.  Please note that this is not a sandbox environment: these API methods operate directly on your actual Uptrends account.  For more information, please visit https://www.uptrends.com/api.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AssertionInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'completed': 'bool',
        'passed': 'bool',
        'description': 'str',
        'exception_description': 'str'
    }

    attribute_map = {
        'completed': 'Completed',
        'passed': 'Passed',
        'description': 'Description',
        'exception_description': 'ExceptionDescription'
    }

    def __init__(self, completed=None, passed=None, description=None, exception_description=None):  # noqa: E501
        """AssertionInfo - a model defined in Swagger"""  # noqa: E501

        self._completed = None
        self._passed = None
        self._description = None
        self._exception_description = None
        self.discriminator = None

        self.completed = completed
        self.passed = passed
        if description is not None:
            self.description = description
        if exception_description is not None:
            self.exception_description = exception_description

    @property
    def completed(self):
        """Gets the completed of this AssertionInfo.  # noqa: E501

        Was the assertion completed?  # noqa: E501

        :return: The completed of this AssertionInfo.  # noqa: E501
        :rtype: bool
        """
        return self._completed

    @completed.setter
    def completed(self, completed):
        """Sets the completed of this AssertionInfo.

        Was the assertion completed?  # noqa: E501

        :param completed: The completed of this AssertionInfo.  # noqa: E501
        :type: bool
        """
        if completed is None:
            raise ValueError("Invalid value for `completed`, must not be `None`")  # noqa: E501

        self._completed = completed

    @property
    def passed(self):
        """Gets the passed of this AssertionInfo.  # noqa: E501

        Did the assertion pass?  # noqa: E501

        :return: The passed of this AssertionInfo.  # noqa: E501
        :rtype: bool
        """
        return self._passed

    @passed.setter
    def passed(self, passed):
        """Sets the passed of this AssertionInfo.

        Did the assertion pass?  # noqa: E501

        :param passed: The passed of this AssertionInfo.  # noqa: E501
        :type: bool
        """
        if passed is None:
            raise ValueError("Invalid value for `passed`, must not be `None`")  # noqa: E501

        self._passed = passed

    @property
    def description(self):
        """Gets the description of this AssertionInfo.  # noqa: E501

        Description  # noqa: E501

        :return: The description of this AssertionInfo.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AssertionInfo.

        Description  # noqa: E501

        :param description: The description of this AssertionInfo.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def exception_description(self):
        """Gets the exception_description of this AssertionInfo.  # noqa: E501

        Discription of the exception trown if applicable  # noqa: E501

        :return: The exception_description of this AssertionInfo.  # noqa: E501
        :rtype: str
        """
        return self._exception_description

    @exception_description.setter
    def exception_description(self, exception_description):
        """Sets the exception_description of this AssertionInfo.

        Discription of the exception trown if applicable  # noqa: E501

        :param exception_description: The exception_description of this AssertionInfo.  # noqa: E501
        :type: str
        """

        self._exception_description = exception_description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AssertionInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AssertionInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
