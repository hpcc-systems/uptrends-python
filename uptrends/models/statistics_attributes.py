# coding: utf-8

"""
    Uptrends API v4

    This document describes Uptrends API version 4. This Swagger environment also lets you execute API methods directly.  Please note that this is not a sandbox environment: these API methods operate directly on your actual Uptrends account.  For more information, please visit https://www.uptrends.com/api.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class StatisticsAttributes(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'start_date_time': 'datetime',
        'end_date_time': 'datetime',
        'alerts': 'int',
        'sla_target': 'float',
        'sla_target_total_time': 'float',
        'operator_response_target': 'float',
        'operator_response_time': 'float',
        'downtime_percentage': 'float',
        'uptime_percentage': 'float',
        'checks': 'int',
        'confirmed_errors': 'int',
        'unconfirmed_errors': 'int',
        'uptime': 'int',
        'downtime': 'int',
        'total_time': 'float',
        'resolve_time': 'float',
        'connection_time': 'float',
        'download_time': 'float',
        'total_bytes': 'int'
    }

    attribute_map = {
        'start_date_time': 'StartDateTime',
        'end_date_time': 'EndDateTime',
        'alerts': 'Alerts',
        'sla_target': 'SlaTarget',
        'sla_target_total_time': 'SlaTargetTotalTime',
        'operator_response_target': 'OperatorResponseTarget',
        'operator_response_time': 'OperatorResponseTime',
        'downtime_percentage': 'DowntimePercentage',
        'uptime_percentage': 'UptimePercentage',
        'checks': 'Checks',
        'confirmed_errors': 'ConfirmedErrors',
        'unconfirmed_errors': 'UnconfirmedErrors',
        'uptime': 'Uptime',
        'downtime': 'Downtime',
        'total_time': 'TotalTime',
        'resolve_time': 'ResolveTime',
        'connection_time': 'ConnectionTime',
        'download_time': 'DownloadTime',
        'total_bytes': 'TotalBytes'
    }

    def __init__(self, start_date_time=None, end_date_time=None, alerts=None, sla_target=None, sla_target_total_time=None, operator_response_target=None, operator_response_time=None, downtime_percentage=None, uptime_percentage=None, checks=None, confirmed_errors=None, unconfirmed_errors=None, uptime=None, downtime=None, total_time=None, resolve_time=None, connection_time=None, download_time=None, total_bytes=None):  # noqa: E501
        """StatisticsAttributes - a model defined in Swagger"""  # noqa: E501

        self._start_date_time = None
        self._end_date_time = None
        self._alerts = None
        self._sla_target = None
        self._sla_target_total_time = None
        self._operator_response_target = None
        self._operator_response_time = None
        self._downtime_percentage = None
        self._uptime_percentage = None
        self._checks = None
        self._confirmed_errors = None
        self._unconfirmed_errors = None
        self._uptime = None
        self._downtime = None
        self._total_time = None
        self._resolve_time = None
        self._connection_time = None
        self._download_time = None
        self._total_bytes = None
        self.discriminator = None

        self.start_date_time = start_date_time
        self.end_date_time = end_date_time
        if alerts is not None:
            self.alerts = alerts
        if sla_target is not None:
            self.sla_target = sla_target
        if sla_target_total_time is not None:
            self.sla_target_total_time = sla_target_total_time
        if operator_response_target is not None:
            self.operator_response_target = operator_response_target
        if operator_response_time is not None:
            self.operator_response_time = operator_response_time
        if downtime_percentage is not None:
            self.downtime_percentage = downtime_percentage
        if uptime_percentage is not None:
            self.uptime_percentage = uptime_percentage
        if checks is not None:
            self.checks = checks
        if confirmed_errors is not None:
            self.confirmed_errors = confirmed_errors
        if unconfirmed_errors is not None:
            self.unconfirmed_errors = unconfirmed_errors
        if uptime is not None:
            self.uptime = uptime
        if downtime is not None:
            self.downtime = downtime
        if total_time is not None:
            self.total_time = total_time
        if resolve_time is not None:
            self.resolve_time = resolve_time
        if connection_time is not None:
            self.connection_time = connection_time
        if download_time is not None:
            self.download_time = download_time
        if total_bytes is not None:
            self.total_bytes = total_bytes

    @property
    def start_date_time(self):
        """Gets the start_date_time of this StatisticsAttributes.  # noqa: E501


        :return: The start_date_time of this StatisticsAttributes.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date_time

    @start_date_time.setter
    def start_date_time(self, start_date_time):
        """Sets the start_date_time of this StatisticsAttributes.


        :param start_date_time: The start_date_time of this StatisticsAttributes.  # noqa: E501
        :type: datetime
        """
        if start_date_time is None:
            raise ValueError("Invalid value for `start_date_time`, must not be `None`")  # noqa: E501

        self._start_date_time = start_date_time

    @property
    def end_date_time(self):
        """Gets the end_date_time of this StatisticsAttributes.  # noqa: E501


        :return: The end_date_time of this StatisticsAttributes.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date_time

    @end_date_time.setter
    def end_date_time(self, end_date_time):
        """Sets the end_date_time of this StatisticsAttributes.


        :param end_date_time: The end_date_time of this StatisticsAttributes.  # noqa: E501
        :type: datetime
        """
        if end_date_time is None:
            raise ValueError("Invalid value for `end_date_time`, must not be `None`")  # noqa: E501

        self._end_date_time = end_date_time

    @property
    def alerts(self):
        """Gets the alerts of this StatisticsAttributes.  # noqa: E501


        :return: The alerts of this StatisticsAttributes.  # noqa: E501
        :rtype: int
        """
        return self._alerts

    @alerts.setter
    def alerts(self, alerts):
        """Sets the alerts of this StatisticsAttributes.


        :param alerts: The alerts of this StatisticsAttributes.  # noqa: E501
        :type: int
        """

        self._alerts = alerts

    @property
    def sla_target(self):
        """Gets the sla_target of this StatisticsAttributes.  # noqa: E501


        :return: The sla_target of this StatisticsAttributes.  # noqa: E501
        :rtype: float
        """
        return self._sla_target

    @sla_target.setter
    def sla_target(self, sla_target):
        """Sets the sla_target of this StatisticsAttributes.


        :param sla_target: The sla_target of this StatisticsAttributes.  # noqa: E501
        :type: float
        """

        self._sla_target = sla_target

    @property
    def sla_target_total_time(self):
        """Gets the sla_target_total_time of this StatisticsAttributes.  # noqa: E501


        :return: The sla_target_total_time of this StatisticsAttributes.  # noqa: E501
        :rtype: float
        """
        return self._sla_target_total_time

    @sla_target_total_time.setter
    def sla_target_total_time(self, sla_target_total_time):
        """Sets the sla_target_total_time of this StatisticsAttributes.


        :param sla_target_total_time: The sla_target_total_time of this StatisticsAttributes.  # noqa: E501
        :type: float
        """

        self._sla_target_total_time = sla_target_total_time

    @property
    def operator_response_target(self):
        """Gets the operator_response_target of this StatisticsAttributes.  # noqa: E501


        :return: The operator_response_target of this StatisticsAttributes.  # noqa: E501
        :rtype: float
        """
        return self._operator_response_target

    @operator_response_target.setter
    def operator_response_target(self, operator_response_target):
        """Sets the operator_response_target of this StatisticsAttributes.


        :param operator_response_target: The operator_response_target of this StatisticsAttributes.  # noqa: E501
        :type: float
        """

        self._operator_response_target = operator_response_target

    @property
    def operator_response_time(self):
        """Gets the operator_response_time of this StatisticsAttributes.  # noqa: E501


        :return: The operator_response_time of this StatisticsAttributes.  # noqa: E501
        :rtype: float
        """
        return self._operator_response_time

    @operator_response_time.setter
    def operator_response_time(self, operator_response_time):
        """Sets the operator_response_time of this StatisticsAttributes.


        :param operator_response_time: The operator_response_time of this StatisticsAttributes.  # noqa: E501
        :type: float
        """

        self._operator_response_time = operator_response_time

    @property
    def downtime_percentage(self):
        """Gets the downtime_percentage of this StatisticsAttributes.  # noqa: E501


        :return: The downtime_percentage of this StatisticsAttributes.  # noqa: E501
        :rtype: float
        """
        return self._downtime_percentage

    @downtime_percentage.setter
    def downtime_percentage(self, downtime_percentage):
        """Sets the downtime_percentage of this StatisticsAttributes.


        :param downtime_percentage: The downtime_percentage of this StatisticsAttributes.  # noqa: E501
        :type: float
        """

        self._downtime_percentage = downtime_percentage

    @property
    def uptime_percentage(self):
        """Gets the uptime_percentage of this StatisticsAttributes.  # noqa: E501


        :return: The uptime_percentage of this StatisticsAttributes.  # noqa: E501
        :rtype: float
        """
        return self._uptime_percentage

    @uptime_percentage.setter
    def uptime_percentage(self, uptime_percentage):
        """Sets the uptime_percentage of this StatisticsAttributes.


        :param uptime_percentage: The uptime_percentage of this StatisticsAttributes.  # noqa: E501
        :type: float
        """

        self._uptime_percentage = uptime_percentage

    @property
    def checks(self):
        """Gets the checks of this StatisticsAttributes.  # noqa: E501


        :return: The checks of this StatisticsAttributes.  # noqa: E501
        :rtype: int
        """
        return self._checks

    @checks.setter
    def checks(self, checks):
        """Sets the checks of this StatisticsAttributes.


        :param checks: The checks of this StatisticsAttributes.  # noqa: E501
        :type: int
        """

        self._checks = checks

    @property
    def confirmed_errors(self):
        """Gets the confirmed_errors of this StatisticsAttributes.  # noqa: E501


        :return: The confirmed_errors of this StatisticsAttributes.  # noqa: E501
        :rtype: int
        """
        return self._confirmed_errors

    @confirmed_errors.setter
    def confirmed_errors(self, confirmed_errors):
        """Sets the confirmed_errors of this StatisticsAttributes.


        :param confirmed_errors: The confirmed_errors of this StatisticsAttributes.  # noqa: E501
        :type: int
        """

        self._confirmed_errors = confirmed_errors

    @property
    def unconfirmed_errors(self):
        """Gets the unconfirmed_errors of this StatisticsAttributes.  # noqa: E501


        :return: The unconfirmed_errors of this StatisticsAttributes.  # noqa: E501
        :rtype: int
        """
        return self._unconfirmed_errors

    @unconfirmed_errors.setter
    def unconfirmed_errors(self, unconfirmed_errors):
        """Sets the unconfirmed_errors of this StatisticsAttributes.


        :param unconfirmed_errors: The unconfirmed_errors of this StatisticsAttributes.  # noqa: E501
        :type: int
        """

        self._unconfirmed_errors = unconfirmed_errors

    @property
    def uptime(self):
        """Gets the uptime of this StatisticsAttributes.  # noqa: E501


        :return: The uptime of this StatisticsAttributes.  # noqa: E501
        :rtype: int
        """
        return self._uptime

    @uptime.setter
    def uptime(self, uptime):
        """Sets the uptime of this StatisticsAttributes.


        :param uptime: The uptime of this StatisticsAttributes.  # noqa: E501
        :type: int
        """

        self._uptime = uptime

    @property
    def downtime(self):
        """Gets the downtime of this StatisticsAttributes.  # noqa: E501


        :return: The downtime of this StatisticsAttributes.  # noqa: E501
        :rtype: int
        """
        return self._downtime

    @downtime.setter
    def downtime(self, downtime):
        """Sets the downtime of this StatisticsAttributes.


        :param downtime: The downtime of this StatisticsAttributes.  # noqa: E501
        :type: int
        """

        self._downtime = downtime

    @property
    def total_time(self):
        """Gets the total_time of this StatisticsAttributes.  # noqa: E501


        :return: The total_time of this StatisticsAttributes.  # noqa: E501
        :rtype: float
        """
        return self._total_time

    @total_time.setter
    def total_time(self, total_time):
        """Sets the total_time of this StatisticsAttributes.


        :param total_time: The total_time of this StatisticsAttributes.  # noqa: E501
        :type: float
        """

        self._total_time = total_time

    @property
    def resolve_time(self):
        """Gets the resolve_time of this StatisticsAttributes.  # noqa: E501


        :return: The resolve_time of this StatisticsAttributes.  # noqa: E501
        :rtype: float
        """
        return self._resolve_time

    @resolve_time.setter
    def resolve_time(self, resolve_time):
        """Sets the resolve_time of this StatisticsAttributes.


        :param resolve_time: The resolve_time of this StatisticsAttributes.  # noqa: E501
        :type: float
        """

        self._resolve_time = resolve_time

    @property
    def connection_time(self):
        """Gets the connection_time of this StatisticsAttributes.  # noqa: E501


        :return: The connection_time of this StatisticsAttributes.  # noqa: E501
        :rtype: float
        """
        return self._connection_time

    @connection_time.setter
    def connection_time(self, connection_time):
        """Sets the connection_time of this StatisticsAttributes.


        :param connection_time: The connection_time of this StatisticsAttributes.  # noqa: E501
        :type: float
        """

        self._connection_time = connection_time

    @property
    def download_time(self):
        """Gets the download_time of this StatisticsAttributes.  # noqa: E501


        :return: The download_time of this StatisticsAttributes.  # noqa: E501
        :rtype: float
        """
        return self._download_time

    @download_time.setter
    def download_time(self, download_time):
        """Sets the download_time of this StatisticsAttributes.


        :param download_time: The download_time of this StatisticsAttributes.  # noqa: E501
        :type: float
        """

        self._download_time = download_time

    @property
    def total_bytes(self):
        """Gets the total_bytes of this StatisticsAttributes.  # noqa: E501


        :return: The total_bytes of this StatisticsAttributes.  # noqa: E501
        :rtype: int
        """
        return self._total_bytes

    @total_bytes.setter
    def total_bytes(self, total_bytes):
        """Sets the total_bytes of this StatisticsAttributes.


        :param total_bytes: The total_bytes of this StatisticsAttributes.  # noqa: E501
        :type: int
        """

        self._total_bytes = total_bytes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StatisticsAttributes, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StatisticsAttributes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
