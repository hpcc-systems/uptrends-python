# coding: utf-8

"""
    Uptrends API v4

    This document describes Uptrends API version 4. This Swagger environment also lets you execute API methods directly.  Please note that this is not a sandbox environment: these API methods operate directly on your actual Uptrends account.  For more information, please visit https://www.uptrends.com/api.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CheckpointServer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'checkpoint_server_id': 'int',
        'ipv4_address': 'str',
        'ipv6_address': 'str',
        'capabilities': 'list[CapabilityFilter]'
    }

    attribute_map = {
        'checkpoint_server_id': 'CheckpointServerId',
        'ipv4_address': 'Ipv4Address',
        'ipv6_address': 'Ipv6Address',
        'capabilities': 'Capabilities'
    }

    def __init__(self, checkpoint_server_id=None, ipv4_address=None, ipv6_address=None, capabilities=None):  # noqa: E501
        """CheckpointServer - a model defined in Swagger"""  # noqa: E501

        self._checkpoint_server_id = None
        self._ipv4_address = None
        self._ipv6_address = None
        self._capabilities = None
        self.discriminator = None

        self.checkpoint_server_id = checkpoint_server_id
        if ipv4_address is not None:
            self.ipv4_address = ipv4_address
        if ipv6_address is not None:
            self.ipv6_address = ipv6_address
        if capabilities is not None:
            self.capabilities = capabilities

    @property
    def checkpoint_server_id(self):
        """Gets the checkpoint_server_id of this CheckpointServer.  # noqa: E501

        The Id of the checkpoint server  # noqa: E501

        :return: The checkpoint_server_id of this CheckpointServer.  # noqa: E501
        :rtype: int
        """
        return self._checkpoint_server_id

    @checkpoint_server_id.setter
    def checkpoint_server_id(self, checkpoint_server_id):
        """Sets the checkpoint_server_id of this CheckpointServer.

        The Id of the checkpoint server  # noqa: E501

        :param checkpoint_server_id: The checkpoint_server_id of this CheckpointServer.  # noqa: E501
        :type: int
        """
        if checkpoint_server_id is None:
            raise ValueError("Invalid value for `checkpoint_server_id`, must not be `None`")  # noqa: E501

        self._checkpoint_server_id = checkpoint_server_id

    @property
    def ipv4_address(self):
        """Gets the ipv4_address of this CheckpointServer.  # noqa: E501

        The IPv4 address of the checkpoint server  # noqa: E501

        :return: The ipv4_address of this CheckpointServer.  # noqa: E501
        :rtype: str
        """
        return self._ipv4_address

    @ipv4_address.setter
    def ipv4_address(self, ipv4_address):
        """Sets the ipv4_address of this CheckpointServer.

        The IPv4 address of the checkpoint server  # noqa: E501

        :param ipv4_address: The ipv4_address of this CheckpointServer.  # noqa: E501
        :type: str
        """

        self._ipv4_address = ipv4_address

    @property
    def ipv6_address(self):
        """Gets the ipv6_address of this CheckpointServer.  # noqa: E501

        The IPv6 address of this checkpoint server  # noqa: E501

        :return: The ipv6_address of this CheckpointServer.  # noqa: E501
        :rtype: str
        """
        return self._ipv6_address

    @ipv6_address.setter
    def ipv6_address(self, ipv6_address):
        """Sets the ipv6_address of this CheckpointServer.

        The IPv6 address of this checkpoint server  # noqa: E501

        :param ipv6_address: The ipv6_address of this CheckpointServer.  # noqa: E501
        :type: str
        """

        self._ipv6_address = ipv6_address

    @property
    def capabilities(self):
        """Gets the capabilities of this CheckpointServer.  # noqa: E501

        The list of capabilities of this checkpoint server  # noqa: E501

        :return: The capabilities of this CheckpointServer.  # noqa: E501
        :rtype: list[CapabilityFilter]
        """
        return self._capabilities

    @capabilities.setter
    def capabilities(self, capabilities):
        """Sets the capabilities of this CheckpointServer.

        The list of capabilities of this checkpoint server  # noqa: E501

        :param capabilities: The capabilities of this CheckpointServer.  # noqa: E501
        :type: list[CapabilityFilter]
        """

        self._capabilities = capabilities

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CheckpointServer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CheckpointServer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
