# coding: utf-8

"""
    Uptrends API v4

    This document describes Uptrends API version 4. This Swagger environment also lets you execute API methods directly.  Please note that this is not a sandbox environment: these API methods operate directly on your actual Uptrends account.  For more information, please visit https://www.uptrends.com/api.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Sla(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sla_guid': 'str',
        'hash': 'str',
        'description': 'str',
        'uptime_error_threshold': 'float',
        'uptime_warning_threshold': 'float',
        'load_time_error_threshold': 'float',
        'operator_reponse_time_threshold': 'int'
    }

    attribute_map = {
        'sla_guid': 'SlaGuid',
        'hash': 'Hash',
        'description': 'Description',
        'uptime_error_threshold': 'UptimeErrorThreshold',
        'uptime_warning_threshold': 'UptimeWarningThreshold',
        'load_time_error_threshold': 'LoadTimeErrorThreshold',
        'operator_reponse_time_threshold': 'OperatorReponseTimeThreshold'
    }

    def __init__(self, sla_guid=None, hash=None, description=None, uptime_error_threshold=None, uptime_warning_threshold=None, load_time_error_threshold=None, operator_reponse_time_threshold=None):  # noqa: E501
        """Sla - a model defined in Swagger"""  # noqa: E501

        self._sla_guid = None
        self._hash = None
        self._description = None
        self._uptime_error_threshold = None
        self._uptime_warning_threshold = None
        self._load_time_error_threshold = None
        self._operator_reponse_time_threshold = None
        self.discriminator = None

        if sla_guid is not None:
            self.sla_guid = sla_guid
        if hash is not None:
            self.hash = hash
        if description is not None:
            self.description = description
        if uptime_error_threshold is not None:
            self.uptime_error_threshold = uptime_error_threshold
        if uptime_warning_threshold is not None:
            self.uptime_warning_threshold = uptime_warning_threshold
        if load_time_error_threshold is not None:
            self.load_time_error_threshold = load_time_error_threshold
        if operator_reponse_time_threshold is not None:
            self.operator_reponse_time_threshold = operator_reponse_time_threshold

    @property
    def sla_guid(self):
        """Gets the sla_guid of this Sla.  # noqa: E501

        The unique key of this sla.  # noqa: E501

        :return: The sla_guid of this Sla.  # noqa: E501
        :rtype: str
        """
        return self._sla_guid

    @sla_guid.setter
    def sla_guid(self, sla_guid):
        """Sets the sla_guid of this Sla.

        The unique key of this sla.  # noqa: E501

        :param sla_guid: The sla_guid of this Sla.  # noqa: E501
        :type: str
        """

        self._sla_guid = sla_guid

    @property
    def hash(self):
        """Gets the hash of this Sla.  # noqa: E501

        Hash corresponding with this sla.  # noqa: E501

        :return: The hash of this Sla.  # noqa: E501
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this Sla.

        Hash corresponding with this sla.  # noqa: E501

        :param hash: The hash of this Sla.  # noqa: E501
        :type: str
        """

        self._hash = hash

    @property
    def description(self):
        """Gets the description of this Sla.  # noqa: E501

        The description name of this sla.  # noqa: E501

        :return: The description of this Sla.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Sla.

        The description name of this sla.  # noqa: E501

        :param description: The description of this Sla.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def uptime_error_threshold(self):
        """Gets the uptime_error_threshold of this Sla.  # noqa: E501


        :return: The uptime_error_threshold of this Sla.  # noqa: E501
        :rtype: float
        """
        return self._uptime_error_threshold

    @uptime_error_threshold.setter
    def uptime_error_threshold(self, uptime_error_threshold):
        """Sets the uptime_error_threshold of this Sla.


        :param uptime_error_threshold: The uptime_error_threshold of this Sla.  # noqa: E501
        :type: float
        """

        self._uptime_error_threshold = uptime_error_threshold

    @property
    def uptime_warning_threshold(self):
        """Gets the uptime_warning_threshold of this Sla.  # noqa: E501


        :return: The uptime_warning_threshold of this Sla.  # noqa: E501
        :rtype: float
        """
        return self._uptime_warning_threshold

    @uptime_warning_threshold.setter
    def uptime_warning_threshold(self, uptime_warning_threshold):
        """Sets the uptime_warning_threshold of this Sla.


        :param uptime_warning_threshold: The uptime_warning_threshold of this Sla.  # noqa: E501
        :type: float
        """

        self._uptime_warning_threshold = uptime_warning_threshold

    @property
    def load_time_error_threshold(self):
        """Gets the load_time_error_threshold of this Sla.  # noqa: E501


        :return: The load_time_error_threshold of this Sla.  # noqa: E501
        :rtype: float
        """
        return self._load_time_error_threshold

    @load_time_error_threshold.setter
    def load_time_error_threshold(self, load_time_error_threshold):
        """Sets the load_time_error_threshold of this Sla.


        :param load_time_error_threshold: The load_time_error_threshold of this Sla.  # noqa: E501
        :type: float
        """

        self._load_time_error_threshold = load_time_error_threshold

    @property
    def operator_reponse_time_threshold(self):
        """Gets the operator_reponse_time_threshold of this Sla.  # noqa: E501


        :return: The operator_reponse_time_threshold of this Sla.  # noqa: E501
        :rtype: int
        """
        return self._operator_reponse_time_threshold

    @operator_reponse_time_threshold.setter
    def operator_reponse_time_threshold(self, operator_reponse_time_threshold):
        """Sets the operator_reponse_time_threshold of this Sla.


        :param operator_reponse_time_threshold: The operator_reponse_time_threshold of this Sla.  # noqa: E501
        :type: int
        """

        self._operator_reponse_time_threshold = operator_reponse_time_threshold

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Sla, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Sla):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
