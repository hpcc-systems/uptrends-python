# coding: utf-8

"""
    Uptrends API v4

    This document describes Uptrends API version 4. This Swagger environment also lets you execute API methods directly.  Please note that this is not a sandbox environment: these API methods operate directly on your actual Uptrends account.  For more information, please visit https://www.uptrends.com/api.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Timezone(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'timezone_id': 'int',
        'description': 'str',
        'offset_from_utc': 'int',
        'has_daylight_saving': 'bool',
        'daylight_saving_offset': 'int'
    }

    attribute_map = {
        'timezone_id': 'TimezoneId',
        'description': 'Description',
        'offset_from_utc': 'OffsetFromUtc',
        'has_daylight_saving': 'HasDaylightSaving',
        'daylight_saving_offset': 'DaylightSavingOffset'
    }

    def __init__(self, timezone_id=None, description=None, offset_from_utc=None, has_daylight_saving=None, daylight_saving_offset=None):  # noqa: E501
        """Timezone - a model defined in Swagger"""  # noqa: E501

        self._timezone_id = None
        self._description = None
        self._offset_from_utc = None
        self._has_daylight_saving = None
        self._daylight_saving_offset = None
        self.discriminator = None

        self.timezone_id = timezone_id
        if description is not None:
            self.description = description
        self.offset_from_utc = offset_from_utc
        self.has_daylight_saving = has_daylight_saving
        if daylight_saving_offset is not None:
            self.daylight_saving_offset = daylight_saving_offset

    @property
    def timezone_id(self):
        """Gets the timezone_id of this Timezone.  # noqa: E501

        The time zone unique identifier  # noqa: E501

        :return: The timezone_id of this Timezone.  # noqa: E501
        :rtype: int
        """
        return self._timezone_id

    @timezone_id.setter
    def timezone_id(self, timezone_id):
        """Sets the timezone_id of this Timezone.

        The time zone unique identifier  # noqa: E501

        :param timezone_id: The timezone_id of this Timezone.  # noqa: E501
        :type: int
        """
        if timezone_id is None:
            raise ValueError("Invalid value for `timezone_id`, must not be `None`")  # noqa: E501

        self._timezone_id = timezone_id

    @property
    def description(self):
        """Gets the description of this Timezone.  # noqa: E501

        The description of the time zone  # noqa: E501

        :return: The description of this Timezone.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Timezone.

        The description of the time zone  # noqa: E501

        :param description: The description of this Timezone.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def offset_from_utc(self):
        """Gets the offset_from_utc of this Timezone.  # noqa: E501

        The offset from UTC in minutes (if this time zone runs behind UTC, the number is negative)  # noqa: E501

        :return: The offset_from_utc of this Timezone.  # noqa: E501
        :rtype: int
        """
        return self._offset_from_utc

    @offset_from_utc.setter
    def offset_from_utc(self, offset_from_utc):
        """Sets the offset_from_utc of this Timezone.

        The offset from UTC in minutes (if this time zone runs behind UTC, the number is negative)  # noqa: E501

        :param offset_from_utc: The offset_from_utc of this Timezone.  # noqa: E501
        :type: int
        """
        if offset_from_utc is None:
            raise ValueError("Invalid value for `offset_from_utc`, must not be `None`")  # noqa: E501

        self._offset_from_utc = offset_from_utc

    @property
    def has_daylight_saving(self):
        """Gets the has_daylight_saving of this Timezone.  # noqa: E501

        Indicates whether or not this time zone uses Daylight Saving Time  # noqa: E501

        :return: The has_daylight_saving of this Timezone.  # noqa: E501
        :rtype: bool
        """
        return self._has_daylight_saving

    @has_daylight_saving.setter
    def has_daylight_saving(self, has_daylight_saving):
        """Sets the has_daylight_saving of this Timezone.

        Indicates whether or not this time zone uses Daylight Saving Time  # noqa: E501

        :param has_daylight_saving: The has_daylight_saving of this Timezone.  # noqa: E501
        :type: bool
        """
        if has_daylight_saving is None:
            raise ValueError("Invalid value for `has_daylight_saving`, must not be `None`")  # noqa: E501

        self._has_daylight_saving = has_daylight_saving

    @property
    def daylight_saving_offset(self):
        """Gets the daylight_saving_offset of this Timezone.  # noqa: E501

        The time offset for Daylight Saving Time in minutes  # noqa: E501

        :return: The daylight_saving_offset of this Timezone.  # noqa: E501
        :rtype: int
        """
        return self._daylight_saving_offset

    @daylight_saving_offset.setter
    def daylight_saving_offset(self, daylight_saving_offset):
        """Sets the daylight_saving_offset of this Timezone.

        The time offset for Daylight Saving Time in minutes  # noqa: E501

        :param daylight_saving_offset: The daylight_saving_offset of this Timezone.  # noqa: E501
        :type: int
        """

        self._daylight_saving_offset = daylight_saving_offset

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Timezone, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Timezone):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
