# coding: utf-8

"""
    Uptrends API v4

    This document describes Uptrends API version 4. This Swagger environment also lets you execute API methods directly.  Please note that this is not a sandbox environment: these API methods operate directly on your actual Uptrends account.  For more information, please visit https://www.uptrends.com/api.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DashboardFilter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'selected_period': 'SelectedPeriod',
        'monitors': 'list[str]',
        'monitor_groups': 'list[str]',
        'checkpoints': 'list[int]'
    }

    attribute_map = {
        'selected_period': 'SelectedPeriod',
        'monitors': 'Monitors',
        'monitor_groups': 'MonitorGroups',
        'checkpoints': 'Checkpoints'
    }

    def __init__(self, selected_period=None, monitors=None, monitor_groups=None, checkpoints=None):  # noqa: E501
        """DashboardFilter - a model defined in Swagger"""  # noqa: E501

        self._selected_period = None
        self._monitors = None
        self._monitor_groups = None
        self._checkpoints = None
        self.discriminator = None

        if selected_period is not None:
            self.selected_period = selected_period
        if monitors is not None:
            self.monitors = monitors
        if monitor_groups is not None:
            self.monitor_groups = monitor_groups
        if checkpoints is not None:
            self.checkpoints = checkpoints

    @property
    def selected_period(self):
        """Gets the selected_period of this DashboardFilter.  # noqa: E501


        :return: The selected_period of this DashboardFilter.  # noqa: E501
        :rtype: SelectedPeriod
        """
        return self._selected_period

    @selected_period.setter
    def selected_period(self, selected_period):
        """Sets the selected_period of this DashboardFilter.


        :param selected_period: The selected_period of this DashboardFilter.  # noqa: E501
        :type: SelectedPeriod
        """

        self._selected_period = selected_period

    @property
    def monitors(self):
        """Gets the monitors of this DashboardFilter.  # noqa: E501


        :return: The monitors of this DashboardFilter.  # noqa: E501
        :rtype: list[str]
        """
        return self._monitors

    @monitors.setter
    def monitors(self, monitors):
        """Sets the monitors of this DashboardFilter.


        :param monitors: The monitors of this DashboardFilter.  # noqa: E501
        :type: list[str]
        """

        self._monitors = monitors

    @property
    def monitor_groups(self):
        """Gets the monitor_groups of this DashboardFilter.  # noqa: E501


        :return: The monitor_groups of this DashboardFilter.  # noqa: E501
        :rtype: list[str]
        """
        return self._monitor_groups

    @monitor_groups.setter
    def monitor_groups(self, monitor_groups):
        """Sets the monitor_groups of this DashboardFilter.


        :param monitor_groups: The monitor_groups of this DashboardFilter.  # noqa: E501
        :type: list[str]
        """

        self._monitor_groups = monitor_groups

    @property
    def checkpoints(self):
        """Gets the checkpoints of this DashboardFilter.  # noqa: E501


        :return: The checkpoints of this DashboardFilter.  # noqa: E501
        :rtype: list[int]
        """
        return self._checkpoints

    @checkpoints.setter
    def checkpoints(self, checkpoints):
        """Sets the checkpoints of this DashboardFilter.


        :param checkpoints: The checkpoints of this DashboardFilter.  # noqa: E501
        :type: list[int]
        """

        self._checkpoints = checkpoints

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DashboardFilter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DashboardFilter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
