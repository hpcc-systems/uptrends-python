# coding: utf-8

"""
    Uptrends API v4

    This document describes Uptrends API version 4. This Swagger environment also lets you execute API methods directly.  Please note that this is not a sandbox environment: these API methods operate directly on your actual Uptrends account.  For more information, please visit https://www.uptrends.com/api.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CertificateArchive(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'issuer': 'str',
        'not_before': 'datetime',
        'not_after': 'datetime',
        'password': 'str',
        'archive_data': 'str'
    }

    attribute_map = {
        'issuer': 'Issuer',
        'not_before': 'NotBefore',
        'not_after': 'NotAfter',
        'password': 'Password',
        'archive_data': 'ArchiveData'
    }

    def __init__(self, issuer=None, not_before=None, not_after=None, password=None, archive_data=None):  # noqa: E501
        """CertificateArchive - a model defined in Swagger"""  # noqa: E501

        self._issuer = None
        self._not_before = None
        self._not_after = None
        self._password = None
        self._archive_data = None
        self.discriminator = None

        if issuer is not None:
            self.issuer = issuer
        self.not_before = not_before
        self.not_after = not_after
        if password is not None:
            self.password = password
        if archive_data is not None:
            self.archive_data = archive_data

    @property
    def issuer(self):
        """Gets the issuer of this CertificateArchive.  # noqa: E501

        The issuer of this certificate  # noqa: E501

        :return: The issuer of this CertificateArchive.  # noqa: E501
        :rtype: str
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer):
        """Sets the issuer of this CertificateArchive.

        The issuer of this certificate  # noqa: E501

        :param issuer: The issuer of this CertificateArchive.  # noqa: E501
        :type: str
        """

        self._issuer = issuer

    @property
    def not_before(self):
        """Gets the not_before of this CertificateArchive.  # noqa: E501

        The start date of this certificate  # noqa: E501

        :return: The not_before of this CertificateArchive.  # noqa: E501
        :rtype: datetime
        """
        return self._not_before

    @not_before.setter
    def not_before(self, not_before):
        """Sets the not_before of this CertificateArchive.

        The start date of this certificate  # noqa: E501

        :param not_before: The not_before of this CertificateArchive.  # noqa: E501
        :type: datetime
        """
        if not_before is None:
            raise ValueError("Invalid value for `not_before`, must not be `None`")  # noqa: E501

        self._not_before = not_before

    @property
    def not_after(self):
        """Gets the not_after of this CertificateArchive.  # noqa: E501

        The certificate expiry date  # noqa: E501

        :return: The not_after of this CertificateArchive.  # noqa: E501
        :rtype: datetime
        """
        return self._not_after

    @not_after.setter
    def not_after(self, not_after):
        """Sets the not_after of this CertificateArchive.

        The certificate expiry date  # noqa: E501

        :param not_after: The not_after of this CertificateArchive.  # noqa: E501
        :type: datetime
        """
        if not_after is None:
            raise ValueError("Invalid value for `not_after`, must not be `None`")  # noqa: E501

        self._not_after = not_after

    @property
    def password(self):
        """Gets the password of this CertificateArchive.  # noqa: E501

        Used to specify a new or changed password. The value will be encrypted when stored, and will not be displayed when a CertificateArchive is retrieved.  # noqa: E501

        :return: The password of this CertificateArchive.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this CertificateArchive.

        Used to specify a new or changed password. The value will be encrypted when stored, and will not be displayed when a CertificateArchive is retrieved.  # noqa: E501

        :param password: The password of this CertificateArchive.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def archive_data(self):
        """Gets the archive_data of this CertificateArchive.  # noqa: E501

        Used to specify the certificate content as a base64 string. The value will be encrypted when stored, and will not be displayed when a CertificateArchive is retrieved.  # noqa: E501

        :return: The archive_data of this CertificateArchive.  # noqa: E501
        :rtype: str
        """
        return self._archive_data

    @archive_data.setter
    def archive_data(self, archive_data):
        """Sets the archive_data of this CertificateArchive.

        Used to specify the certificate content as a base64 string. The value will be encrypted when stored, and will not be displayed when a CertificateArchive is retrieved.  # noqa: E501

        :param archive_data: The archive_data of this CertificateArchive.  # noqa: E501
        :type: str
        """

        self._archive_data = archive_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CertificateArchive, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CertificateArchive):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
