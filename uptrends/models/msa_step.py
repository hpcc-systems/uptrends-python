# coding: utf-8

"""
    Uptrends API v4

    This document describes Uptrends API version 4. This Swagger environment also lets you execute API methods directly.  Please note that this is not a sandbox environment: these API methods operate directly on your actual Uptrends account.  For more information, please visit https://www.uptrends.com/api.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class MsaStep(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'url': 'str',
        'method': 'str',
        'body': 'str',
        'request_headers': 'list[ApiHttpHeaderValue]',
        'variables': 'list[ApiVariableDefinition]',
        'assertions': 'list[ApiAssertion]',
        'name': 'str',
        'disabled': 'bool',
        'use_fixed_client_certificate': 'bool',
        'authentication': 'ApiAuthenticationInfo',
        'ignore_certificate_errors': 'bool',
        'client_certificate_vault_item': 'str',
        'delay': 'int',
        'step_type': 'MsaStepType'
    }

    attribute_map = {
        'url': 'Url',
        'method': 'Method',
        'body': 'Body',
        'request_headers': 'RequestHeaders',
        'variables': 'Variables',
        'assertions': 'Assertions',
        'name': 'Name',
        'disabled': 'Disabled',
        'use_fixed_client_certificate': 'UseFixedClientCertificate',
        'authentication': 'Authentication',
        'ignore_certificate_errors': 'IgnoreCertificateErrors',
        'client_certificate_vault_item': 'ClientCertificateVaultItem',
        'delay': 'Delay',
        'step_type': 'StepType'
    }

    def __init__(self, url=None, method=None, body=None, request_headers=None, variables=None, assertions=None, name=None, disabled=None, use_fixed_client_certificate=None, authentication=None, ignore_certificate_errors=None, client_certificate_vault_item=None, delay=None, step_type=None):  # noqa: E501
        """MsaStep - a model defined in Swagger"""  # noqa: E501

        self._url = None
        self._method = None
        self._body = None
        self._request_headers = None
        self._variables = None
        self._assertions = None
        self._name = None
        self._disabled = None
        self._use_fixed_client_certificate = None
        self._authentication = None
        self._ignore_certificate_errors = None
        self._client_certificate_vault_item = None
        self._delay = None
        self._step_type = None
        self.discriminator = None

        if url is not None:
            self.url = url
        if method is not None:
            self.method = method
        if body is not None:
            self.body = body
        if request_headers is not None:
            self.request_headers = request_headers
        if variables is not None:
            self.variables = variables
        if assertions is not None:
            self.assertions = assertions
        if name is not None:
            self.name = name
        self.disabled = disabled
        self.use_fixed_client_certificate = use_fixed_client_certificate
        if authentication is not None:
            self.authentication = authentication
        self.ignore_certificate_errors = ignore_certificate_errors
        if client_certificate_vault_item is not None:
            self.client_certificate_vault_item = client_certificate_vault_item
        self.delay = delay
        self.step_type = step_type

    @property
    def url(self):
        """Gets the url of this MsaStep.  # noqa: E501


        :return: The url of this MsaStep.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this MsaStep.


        :param url: The url of this MsaStep.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def method(self):
        """Gets the method of this MsaStep.  # noqa: E501


        :return: The method of this MsaStep.  # noqa: E501
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this MsaStep.


        :param method: The method of this MsaStep.  # noqa: E501
        :type: str
        """

        self._method = method

    @property
    def body(self):
        """Gets the body of this MsaStep.  # noqa: E501


        :return: The body of this MsaStep.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this MsaStep.


        :param body: The body of this MsaStep.  # noqa: E501
        :type: str
        """

        self._body = body

    @property
    def request_headers(self):
        """Gets the request_headers of this MsaStep.  # noqa: E501


        :return: The request_headers of this MsaStep.  # noqa: E501
        :rtype: list[ApiHttpHeaderValue]
        """
        return self._request_headers

    @request_headers.setter
    def request_headers(self, request_headers):
        """Sets the request_headers of this MsaStep.


        :param request_headers: The request_headers of this MsaStep.  # noqa: E501
        :type: list[ApiHttpHeaderValue]
        """

        self._request_headers = request_headers

    @property
    def variables(self):
        """Gets the variables of this MsaStep.  # noqa: E501


        :return: The variables of this MsaStep.  # noqa: E501
        :rtype: list[ApiVariableDefinition]
        """
        return self._variables

    @variables.setter
    def variables(self, variables):
        """Sets the variables of this MsaStep.


        :param variables: The variables of this MsaStep.  # noqa: E501
        :type: list[ApiVariableDefinition]
        """

        self._variables = variables

    @property
    def assertions(self):
        """Gets the assertions of this MsaStep.  # noqa: E501


        :return: The assertions of this MsaStep.  # noqa: E501
        :rtype: list[ApiAssertion]
        """
        return self._assertions

    @assertions.setter
    def assertions(self, assertions):
        """Sets the assertions of this MsaStep.


        :param assertions: The assertions of this MsaStep.  # noqa: E501
        :type: list[ApiAssertion]
        """

        self._assertions = assertions

    @property
    def name(self):
        """Gets the name of this MsaStep.  # noqa: E501


        :return: The name of this MsaStep.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MsaStep.


        :param name: The name of this MsaStep.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def disabled(self):
        """Gets the disabled of this MsaStep.  # noqa: E501


        :return: The disabled of this MsaStep.  # noqa: E501
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this MsaStep.


        :param disabled: The disabled of this MsaStep.  # noqa: E501
        :type: bool
        """
        if disabled is None:
            raise ValueError("Invalid value for `disabled`, must not be `None`")  # noqa: E501

        self._disabled = disabled

    @property
    def use_fixed_client_certificate(self):
        """Gets the use_fixed_client_certificate of this MsaStep.  # noqa: E501


        :return: The use_fixed_client_certificate of this MsaStep.  # noqa: E501
        :rtype: bool
        """
        return self._use_fixed_client_certificate

    @use_fixed_client_certificate.setter
    def use_fixed_client_certificate(self, use_fixed_client_certificate):
        """Sets the use_fixed_client_certificate of this MsaStep.


        :param use_fixed_client_certificate: The use_fixed_client_certificate of this MsaStep.  # noqa: E501
        :type: bool
        """
        if use_fixed_client_certificate is None:
            raise ValueError("Invalid value for `use_fixed_client_certificate`, must not be `None`")  # noqa: E501

        self._use_fixed_client_certificate = use_fixed_client_certificate

    @property
    def authentication(self):
        """Gets the authentication of this MsaStep.  # noqa: E501


        :return: The authentication of this MsaStep.  # noqa: E501
        :rtype: ApiAuthenticationInfo
        """
        return self._authentication

    @authentication.setter
    def authentication(self, authentication):
        """Sets the authentication of this MsaStep.


        :param authentication: The authentication of this MsaStep.  # noqa: E501
        :type: ApiAuthenticationInfo
        """

        self._authentication = authentication

    @property
    def ignore_certificate_errors(self):
        """Gets the ignore_certificate_errors of this MsaStep.  # noqa: E501


        :return: The ignore_certificate_errors of this MsaStep.  # noqa: E501
        :rtype: bool
        """
        return self._ignore_certificate_errors

    @ignore_certificate_errors.setter
    def ignore_certificate_errors(self, ignore_certificate_errors):
        """Sets the ignore_certificate_errors of this MsaStep.


        :param ignore_certificate_errors: The ignore_certificate_errors of this MsaStep.  # noqa: E501
        :type: bool
        """
        if ignore_certificate_errors is None:
            raise ValueError("Invalid value for `ignore_certificate_errors`, must not be `None`")  # noqa: E501

        self._ignore_certificate_errors = ignore_certificate_errors

    @property
    def client_certificate_vault_item(self):
        """Gets the client_certificate_vault_item of this MsaStep.  # noqa: E501


        :return: The client_certificate_vault_item of this MsaStep.  # noqa: E501
        :rtype: str
        """
        return self._client_certificate_vault_item

    @client_certificate_vault_item.setter
    def client_certificate_vault_item(self, client_certificate_vault_item):
        """Sets the client_certificate_vault_item of this MsaStep.


        :param client_certificate_vault_item: The client_certificate_vault_item of this MsaStep.  # noqa: E501
        :type: str
        """

        self._client_certificate_vault_item = client_certificate_vault_item

    @property
    def delay(self):
        """Gets the delay of this MsaStep.  # noqa: E501


        :return: The delay of this MsaStep.  # noqa: E501
        :rtype: int
        """
        return self._delay

    @delay.setter
    def delay(self, delay):
        """Sets the delay of this MsaStep.


        :param delay: The delay of this MsaStep.  # noqa: E501
        :type: int
        """
        if delay is None:
            raise ValueError("Invalid value for `delay`, must not be `None`")  # noqa: E501

        self._delay = delay

    @property
    def step_type(self):
        """Gets the step_type of this MsaStep.  # noqa: E501


        :return: The step_type of this MsaStep.  # noqa: E501
        :rtype: MsaStepType
        """
        return self._step_type

    @step_type.setter
    def step_type(self, step_type):
        """Sets the step_type of this MsaStep.


        :param step_type: The step_type of this MsaStep.  # noqa: E501
        :type: MsaStepType
        """
        if step_type is None:
            raise ValueError("Invalid value for `step_type`, must not be `None`")  # noqa: E501

        self._step_type = step_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MsaStep, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MsaStep):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
