# coding: utf-8

"""
    Uptrends API v4

    This document describes Uptrends API version 4. This Swagger environment also lets you execute API methods directly.  Please note that this is not a sandbox environment: these API methods operate directly on your actual Uptrends account.  For more information, please visit https://www.uptrends.com/api.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class EscalationLevel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'escalation_mode': 'EscalationMode',
        'threshold_error_count': 'int',
        'threshold_minutes': 'int',
        'is_active': 'bool',
        'message': 'str',
        'number_of_reminders': 'int',
        'reminder_delay': 'int',
        'include_trace_route': 'bool'
    }

    attribute_map = {
        'escalation_mode': 'EscalationMode',
        'threshold_error_count': 'ThresholdErrorCount',
        'threshold_minutes': 'ThresholdMinutes',
        'is_active': 'IsActive',
        'message': 'Message',
        'number_of_reminders': 'NumberOfReminders',
        'reminder_delay': 'ReminderDelay',
        'include_trace_route': 'IncludeTraceRoute'
    }

    def __init__(self, escalation_mode=None, threshold_error_count=None, threshold_minutes=None, is_active=None, message=None, number_of_reminders=None, reminder_delay=None, include_trace_route=None):  # noqa: E501
        """EscalationLevel - a model defined in Swagger"""  # noqa: E501

        self._escalation_mode = None
        self._threshold_error_count = None
        self._threshold_minutes = None
        self._is_active = None
        self._message = None
        self._number_of_reminders = None
        self._reminder_delay = None
        self._include_trace_route = None
        self.discriminator = None

        self.escalation_mode = escalation_mode
        self.threshold_error_count = threshold_error_count
        self.threshold_minutes = threshold_minutes
        self.is_active = is_active
        if message is not None:
            self.message = message
        self.number_of_reminders = number_of_reminders
        self.reminder_delay = reminder_delay
        if include_trace_route is not None:
            self.include_trace_route = include_trace_route

    @property
    def escalation_mode(self):
        """Gets the escalation_mode of this EscalationLevel.  # noqa: E501


        :return: The escalation_mode of this EscalationLevel.  # noqa: E501
        :rtype: EscalationMode
        """
        return self._escalation_mode

    @escalation_mode.setter
    def escalation_mode(self, escalation_mode):
        """Sets the escalation_mode of this EscalationLevel.


        :param escalation_mode: The escalation_mode of this EscalationLevel.  # noqa: E501
        :type: EscalationMode
        """
        if escalation_mode is None:
            raise ValueError("Invalid value for `escalation_mode`, must not be `None`")  # noqa: E501

        self._escalation_mode = escalation_mode

    @property
    def threshold_error_count(self):
        """Gets the threshold_error_count of this EscalationLevel.  # noqa: E501


        :return: The threshold_error_count of this EscalationLevel.  # noqa: E501
        :rtype: int
        """
        return self._threshold_error_count

    @threshold_error_count.setter
    def threshold_error_count(self, threshold_error_count):
        """Sets the threshold_error_count of this EscalationLevel.


        :param threshold_error_count: The threshold_error_count of this EscalationLevel.  # noqa: E501
        :type: int
        """
        if threshold_error_count is None:
            raise ValueError("Invalid value for `threshold_error_count`, must not be `None`")  # noqa: E501

        self._threshold_error_count = threshold_error_count

    @property
    def threshold_minutes(self):
        """Gets the threshold_minutes of this EscalationLevel.  # noqa: E501


        :return: The threshold_minutes of this EscalationLevel.  # noqa: E501
        :rtype: int
        """
        return self._threshold_minutes

    @threshold_minutes.setter
    def threshold_minutes(self, threshold_minutes):
        """Sets the threshold_minutes of this EscalationLevel.


        :param threshold_minutes: The threshold_minutes of this EscalationLevel.  # noqa: E501
        :type: int
        """
        if threshold_minutes is None:
            raise ValueError("Invalid value for `threshold_minutes`, must not be `None`")  # noqa: E501

        self._threshold_minutes = threshold_minutes

    @property
    def is_active(self):
        """Gets the is_active of this EscalationLevel.  # noqa: E501


        :return: The is_active of this EscalationLevel.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this EscalationLevel.


        :param is_active: The is_active of this EscalationLevel.  # noqa: E501
        :type: bool
        """
        if is_active is None:
            raise ValueError("Invalid value for `is_active`, must not be `None`")  # noqa: E501

        self._is_active = is_active

    @property
    def message(self):
        """Gets the message of this EscalationLevel.  # noqa: E501


        :return: The message of this EscalationLevel.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this EscalationLevel.


        :param message: The message of this EscalationLevel.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def number_of_reminders(self):
        """Gets the number_of_reminders of this EscalationLevel.  # noqa: E501


        :return: The number_of_reminders of this EscalationLevel.  # noqa: E501
        :rtype: int
        """
        return self._number_of_reminders

    @number_of_reminders.setter
    def number_of_reminders(self, number_of_reminders):
        """Sets the number_of_reminders of this EscalationLevel.


        :param number_of_reminders: The number_of_reminders of this EscalationLevel.  # noqa: E501
        :type: int
        """
        if number_of_reminders is None:
            raise ValueError("Invalid value for `number_of_reminders`, must not be `None`")  # noqa: E501

        self._number_of_reminders = number_of_reminders

    @property
    def reminder_delay(self):
        """Gets the reminder_delay of this EscalationLevel.  # noqa: E501


        :return: The reminder_delay of this EscalationLevel.  # noqa: E501
        :rtype: int
        """
        return self._reminder_delay

    @reminder_delay.setter
    def reminder_delay(self, reminder_delay):
        """Sets the reminder_delay of this EscalationLevel.


        :param reminder_delay: The reminder_delay of this EscalationLevel.  # noqa: E501
        :type: int
        """
        if reminder_delay is None:
            raise ValueError("Invalid value for `reminder_delay`, must not be `None`")  # noqa: E501

        self._reminder_delay = reminder_delay

    @property
    def include_trace_route(self):
        """Gets the include_trace_route of this EscalationLevel.  # noqa: E501


        :return: The include_trace_route of this EscalationLevel.  # noqa: E501
        :rtype: bool
        """
        return self._include_trace_route

    @include_trace_route.setter
    def include_trace_route(self, include_trace_route):
        """Sets the include_trace_route of this EscalationLevel.


        :param include_trace_route: The include_trace_route of this EscalationLevel.  # noqa: E501
        :type: bool
        """

        self._include_trace_route = include_trace_route

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EscalationLevel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EscalationLevel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
