# coding: utf-8

"""
    Uptrends API v4

    This document describes Uptrends API version 4. This Swagger environment also lets you execute API methods directly.  Please note that this is not a sandbox environment: these API methods operate directly on your actual Uptrends account.  For more information, please visit https://www.uptrends.com/api.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ApiAuthenticationInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'authentication_type': 'ApiHttpAuthenticationType',
        'user_name': 'str',
        'password': 'str',
        'password_specified': 'bool'
    }

    attribute_map = {
        'id': 'Id',
        'authentication_type': 'AuthenticationType',
        'user_name': 'UserName',
        'password': 'Password',
        'password_specified': 'PasswordSpecified'
    }

    def __init__(self, id=None, authentication_type=None, user_name=None, password=None, password_specified=None):  # noqa: E501
        """ApiAuthenticationInfo - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._authentication_type = None
        self._user_name = None
        self._password = None
        self._password_specified = None
        self.discriminator = None

        self.id = id
        self.authentication_type = authentication_type
        if user_name is not None:
            self.user_name = user_name
        if password is not None:
            self.password = password
        self.password_specified = password_specified

    @property
    def id(self):
        """Gets the id of this ApiAuthenticationInfo.  # noqa: E501


        :return: The id of this ApiAuthenticationInfo.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ApiAuthenticationInfo.


        :param id: The id of this ApiAuthenticationInfo.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def authentication_type(self):
        """Gets the authentication_type of this ApiAuthenticationInfo.  # noqa: E501


        :return: The authentication_type of this ApiAuthenticationInfo.  # noqa: E501
        :rtype: ApiHttpAuthenticationType
        """
        return self._authentication_type

    @authentication_type.setter
    def authentication_type(self, authentication_type):
        """Sets the authentication_type of this ApiAuthenticationInfo.


        :param authentication_type: The authentication_type of this ApiAuthenticationInfo.  # noqa: E501
        :type: ApiHttpAuthenticationType
        """
        if authentication_type is None:
            raise ValueError("Invalid value for `authentication_type`, must not be `None`")  # noqa: E501

        self._authentication_type = authentication_type

    @property
    def user_name(self):
        """Gets the user_name of this ApiAuthenticationInfo.  # noqa: E501


        :return: The user_name of this ApiAuthenticationInfo.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this ApiAuthenticationInfo.


        :param user_name: The user_name of this ApiAuthenticationInfo.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def password(self):
        """Gets the password of this ApiAuthenticationInfo.  # noqa: E501


        :return: The password of this ApiAuthenticationInfo.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this ApiAuthenticationInfo.


        :param password: The password of this ApiAuthenticationInfo.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def password_specified(self):
        """Gets the password_specified of this ApiAuthenticationInfo.  # noqa: E501


        :return: The password_specified of this ApiAuthenticationInfo.  # noqa: E501
        :rtype: bool
        """
        return self._password_specified

    @password_specified.setter
    def password_specified(self, password_specified):
        """Sets the password_specified of this ApiAuthenticationInfo.


        :param password_specified: The password_specified of this ApiAuthenticationInfo.  # noqa: E501
        :type: bool
        """
        if password_specified is None:
            raise ValueError("Invalid value for `password_specified`, must not be `None`")  # noqa: E501

        self._password_specified = password_specified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApiAuthenticationInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiAuthenticationInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
