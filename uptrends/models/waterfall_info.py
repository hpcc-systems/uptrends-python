# coding: utf-8

"""
    Uptrends API v4

    This document describes Uptrends API version 4. This Swagger environment also lets you execute API methods directly.  Please note that this is not a sandbox environment: these API methods operate directly on your actual Uptrends account.  For more information, please visit https://www.uptrends.com/api.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class WaterfallInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'elements': 'list[PageElement]',
        'domain_group_names': 'list[str]'
    }

    attribute_map = {
        'elements': 'Elements',
        'domain_group_names': 'DomainGroupNames'
    }

    def __init__(self, elements=None, domain_group_names=None):  # noqa: E501
        """WaterfallInfo - a model defined in Swagger"""  # noqa: E501

        self._elements = None
        self._domain_group_names = None
        self.discriminator = None

        if elements is not None:
            self.elements = elements
        if domain_group_names is not None:
            self.domain_group_names = domain_group_names

    @property
    def elements(self):
        """Gets the elements of this WaterfallInfo.  # noqa: E501

        Elements in the waterfall  # noqa: E501

        :return: The elements of this WaterfallInfo.  # noqa: E501
        :rtype: list[PageElement]
        """
        return self._elements

    @elements.setter
    def elements(self, elements):
        """Sets the elements of this WaterfallInfo.

        Elements in the waterfall  # noqa: E501

        :param elements: The elements of this WaterfallInfo.  # noqa: E501
        :type: list[PageElement]
        """

        self._elements = elements

    @property
    def domain_group_names(self):
        """Gets the domain_group_names of this WaterfallInfo.  # noqa: E501

        List of domain groups used in the waterfall elements  # noqa: E501

        :return: The domain_group_names of this WaterfallInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._domain_group_names

    @domain_group_names.setter
    def domain_group_names(self, domain_group_names):
        """Sets the domain_group_names of this WaterfallInfo.

        List of domain groups used in the waterfall elements  # noqa: E501

        :param domain_group_names: The domain_group_names of this WaterfallInfo.  # noqa: E501
        :type: list[str]
        """

        self._domain_group_names = domain_group_names

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WaterfallInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WaterfallInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
