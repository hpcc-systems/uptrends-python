# coding: utf-8

"""
    Uptrends API v4

    This document describes Uptrends API version 4. This Swagger environment also lets you execute API methods directly.  Please note that this is not a sandbox environment: these API methods operate directly on your actual Uptrends account.  For more information, please visit https://www.uptrends.com/api.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ThrottlingOptions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'throttling_type': 'ThrottlingType',
        'throttling_value': 'ThrottlingValue',
        'throttling_speed_up': 'int',
        'throttling_speed_down': 'int',
        'throttling_latency': 'int'
    }

    attribute_map = {
        'throttling_type': 'ThrottlingType',
        'throttling_value': 'ThrottlingValue',
        'throttling_speed_up': 'ThrottlingSpeedUp',
        'throttling_speed_down': 'ThrottlingSpeedDown',
        'throttling_latency': 'ThrottlingLatency'
    }

    def __init__(self, throttling_type=None, throttling_value=None, throttling_speed_up=None, throttling_speed_down=None, throttling_latency=None):  # noqa: E501
        """ThrottlingOptions - a model defined in Swagger"""  # noqa: E501

        self._throttling_type = None
        self._throttling_value = None
        self._throttling_speed_up = None
        self._throttling_speed_down = None
        self._throttling_latency = None
        self.discriminator = None

        if throttling_type is not None:
            self.throttling_type = throttling_type
        if throttling_value is not None:
            self.throttling_value = throttling_value
        if throttling_speed_up is not None:
            self.throttling_speed_up = throttling_speed_up
        if throttling_speed_down is not None:
            self.throttling_speed_down = throttling_speed_down
        if throttling_latency is not None:
            self.throttling_latency = throttling_latency

    @property
    def throttling_type(self):
        """Gets the throttling_type of this ThrottlingOptions.  # noqa: E501


        :return: The throttling_type of this ThrottlingOptions.  # noqa: E501
        :rtype: ThrottlingType
        """
        return self._throttling_type

    @throttling_type.setter
    def throttling_type(self, throttling_type):
        """Sets the throttling_type of this ThrottlingOptions.


        :param throttling_type: The throttling_type of this ThrottlingOptions.  # noqa: E501
        :type: ThrottlingType
        """

        self._throttling_type = throttling_type

    @property
    def throttling_value(self):
        """Gets the throttling_value of this ThrottlingOptions.  # noqa: E501


        :return: The throttling_value of this ThrottlingOptions.  # noqa: E501
        :rtype: ThrottlingValue
        """
        return self._throttling_value

    @throttling_value.setter
    def throttling_value(self, throttling_value):
        """Sets the throttling_value of this ThrottlingOptions.


        :param throttling_value: The throttling_value of this ThrottlingOptions.  # noqa: E501
        :type: ThrottlingValue
        """

        self._throttling_value = throttling_value

    @property
    def throttling_speed_up(self):
        """Gets the throttling_speed_up of this ThrottlingOptions.  # noqa: E501


        :return: The throttling_speed_up of this ThrottlingOptions.  # noqa: E501
        :rtype: int
        """
        return self._throttling_speed_up

    @throttling_speed_up.setter
    def throttling_speed_up(self, throttling_speed_up):
        """Sets the throttling_speed_up of this ThrottlingOptions.


        :param throttling_speed_up: The throttling_speed_up of this ThrottlingOptions.  # noqa: E501
        :type: int
        """

        self._throttling_speed_up = throttling_speed_up

    @property
    def throttling_speed_down(self):
        """Gets the throttling_speed_down of this ThrottlingOptions.  # noqa: E501


        :return: The throttling_speed_down of this ThrottlingOptions.  # noqa: E501
        :rtype: int
        """
        return self._throttling_speed_down

    @throttling_speed_down.setter
    def throttling_speed_down(self, throttling_speed_down):
        """Sets the throttling_speed_down of this ThrottlingOptions.


        :param throttling_speed_down: The throttling_speed_down of this ThrottlingOptions.  # noqa: E501
        :type: int
        """

        self._throttling_speed_down = throttling_speed_down

    @property
    def throttling_latency(self):
        """Gets the throttling_latency of this ThrottlingOptions.  # noqa: E501


        :return: The throttling_latency of this ThrottlingOptions.  # noqa: E501
        :rtype: int
        """
        return self._throttling_latency

    @throttling_latency.setter
    def throttling_latency(self, throttling_latency):
        """Sets the throttling_latency of this ThrottlingOptions.


        :param throttling_latency: The throttling_latency of this ThrottlingOptions.  # noqa: E501
        :type: int
        """

        self._throttling_latency = throttling_latency

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ThrottlingOptions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ThrottlingOptions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
