# coding: utf-8

"""
    Uptrends API v4

    This document describes Uptrends API version 4. This Swagger environment also lets you execute API methods directly.  Please note that this is not a sandbox environment: these API methods operate directly on your actual Uptrends account.  For more information, please visit https://www.uptrends.com/api.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class RegistrationResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user_name': 'str',
        'password': 'str',
        'account_id': 'str',
        'operator_name': 'str',
        'status': 'RegisterStatus',
        'message': 'str'
    }

    attribute_map = {
        'user_name': 'UserName',
        'password': 'Password',
        'account_id': 'AccountId',
        'operator_name': 'OperatorName',
        'status': 'status',
        'message': 'message'
    }

    def __init__(self, user_name=None, password=None, account_id=None, operator_name=None, status=None, message=None):  # noqa: E501
        """RegistrationResponse - a model defined in Swagger"""  # noqa: E501

        self._user_name = None
        self._password = None
        self._account_id = None
        self._operator_name = None
        self._status = None
        self._message = None
        self.discriminator = None

        if user_name is not None:
            self.user_name = user_name
        if password is not None:
            self.password = password
        if account_id is not None:
            self.account_id = account_id
        if operator_name is not None:
            self.operator_name = operator_name
        self.status = status
        if message is not None:
            self.message = message

    @property
    def user_name(self):
        """Gets the user_name of this RegistrationResponse.  # noqa: E501

        The user name of the new API account  # noqa: E501

        :return: The user_name of this RegistrationResponse.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this RegistrationResponse.

        The user name of the new API account  # noqa: E501

        :param user_name: The user_name of this RegistrationResponse.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def password(self):
        """Gets the password of this RegistrationResponse.  # noqa: E501

        The password of the new API account  # noqa: E501

        :return: The password of this RegistrationResponse.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this RegistrationResponse.

        The password of the new API account  # noqa: E501

        :param password: The password of this RegistrationResponse.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def account_id(self):
        """Gets the account_id of this RegistrationResponse.  # noqa: E501

        The Uptrends Account Id for which the new API account was created  # noqa: E501

        :return: The account_id of this RegistrationResponse.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this RegistrationResponse.

        The Uptrends Account Id for which the new API account was created  # noqa: E501

        :param account_id: The account_id of this RegistrationResponse.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def operator_name(self):
        """Gets the operator_name of this RegistrationResponse.  # noqa: E501

        The Uptrends Operator on behalf of whom the new API account was created  # noqa: E501

        :return: The operator_name of this RegistrationResponse.  # noqa: E501
        :rtype: str
        """
        return self._operator_name

    @operator_name.setter
    def operator_name(self, operator_name):
        """Sets the operator_name of this RegistrationResponse.

        The Uptrends Operator on behalf of whom the new API account was created  # noqa: E501

        :param operator_name: The operator_name of this RegistrationResponse.  # noqa: E501
        :type: str
        """

        self._operator_name = operator_name

    @property
    def status(self):
        """Gets the status of this RegistrationResponse.  # noqa: E501


        :return: The status of this RegistrationResponse.  # noqa: E501
        :rtype: RegisterStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this RegistrationResponse.


        :param status: The status of this RegistrationResponse.  # noqa: E501
        :type: RegisterStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def message(self):
        """Gets the message of this RegistrationResponse.  # noqa: E501


        :return: The message of this RegistrationResponse.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this RegistrationResponse.


        :param message: The message of this RegistrationResponse.  # noqa: E501
        :type: str
        """

        self._message = message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RegistrationResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RegistrationResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
