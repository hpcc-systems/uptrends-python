# coding: utf-8

"""
    Uptrends API v4

    This document describes Uptrends API version 4. This Swagger environment also lets you execute API methods directly.  Please note that this is not a sandbox environment: these API methods operate directly on your actual Uptrends account.  For more information, please visit https://www.uptrends.com/api.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class VaultItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'vault_item_guid': 'str',
        'hash': 'str',
        'name': 'str',
        'value': 'str',
        'vault_section_guid': 'str',
        'vault_item_type': 'object',
        'is_sensitive': 'bool',
        'notes': 'str',
        'user_name': 'str',
        'password': 'str',
        'certificate_archive': 'object',
        'file_info': 'object'
    }

    attribute_map = {
        'vault_item_guid': 'VaultItemGuid',
        'hash': 'Hash',
        'name': 'Name',
        'value': 'Value',
        'vault_section_guid': 'VaultSectionGuid',
        'vault_item_type': 'VaultItemType',
        'is_sensitive': 'IsSensitive',
        'notes': 'Notes',
        'user_name': 'UserName',
        'password': 'Password',
        'certificate_archive': 'CertificateArchive',
        'file_info': 'FileInfo'
    }

    def __init__(self, vault_item_guid=None, hash=None, name=None, value=None, vault_section_guid=None, vault_item_type=None, is_sensitive=None, notes=None, user_name=None, password=None, certificate_archive=None, file_info=None):  # noqa: E501
        """VaultItem - a model defined in Swagger"""  # noqa: E501

        self._vault_item_guid = None
        self._hash = None
        self._name = None
        self._value = None
        self._vault_section_guid = None
        self._vault_item_type = None
        self._is_sensitive = None
        self._notes = None
        self._user_name = None
        self._password = None
        self._certificate_archive = None
        self._file_info = None
        self.discriminator = None

        self.vault_item_guid = vault_item_guid
        if hash is not None:
            self.hash = hash
        if name is not None:
            self.name = name
        if value is not None:
            self.value = value
        self.vault_section_guid = vault_section_guid
        self.vault_item_type = vault_item_type
        self.is_sensitive = is_sensitive
        if notes is not None:
            self.notes = notes
        if user_name is not None:
            self.user_name = user_name
        if password is not None:
            self.password = password
        if certificate_archive is not None:
            self.certificate_archive = certificate_archive
        if file_info is not None:
            self.file_info = file_info

    @property
    def vault_item_guid(self):
        """Gets the vault_item_guid of this VaultItem.  # noqa: E501

        The unique key of this vault item  # noqa: E501

        :return: The vault_item_guid of this VaultItem.  # noqa: E501
        :rtype: str
        """
        return self._vault_item_guid

    @vault_item_guid.setter
    def vault_item_guid(self, vault_item_guid):
        """Sets the vault_item_guid of this VaultItem.

        The unique key of this vault item  # noqa: E501

        :param vault_item_guid: The vault_item_guid of this VaultItem.  # noqa: E501
        :type: str
        """
        if vault_item_guid is None:
            raise ValueError("Invalid value for `vault_item_guid`, must not be `None`")  # noqa: E501

        self._vault_item_guid = vault_item_guid

    @property
    def hash(self):
        """Gets the hash of this VaultItem.  # noqa: E501

        The hash of this vault item  # noqa: E501

        :return: The hash of this VaultItem.  # noqa: E501
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this VaultItem.

        The hash of this vault item  # noqa: E501

        :param hash: The hash of this VaultItem.  # noqa: E501
        :type: str
        """

        self._hash = hash

    @property
    def name(self):
        """Gets the name of this VaultItem.  # noqa: E501

        The name of this vault item  # noqa: E501

        :return: The name of this VaultItem.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VaultItem.

        The name of this vault item  # noqa: E501

        :param name: The name of this VaultItem.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def value(self):
        """Gets the value of this VaultItem.  # noqa: E501

        The value that is stored in this vault item. Not used for Certificate Archives  # noqa: E501

        :return: The value of this VaultItem.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this VaultItem.

        The value that is stored in this vault item. Not used for Certificate Archives  # noqa: E501

        :param value: The value of this VaultItem.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def vault_section_guid(self):
        """Gets the vault_section_guid of this VaultItem.  # noqa: E501

        The unique identifier of the vault section that this vault item belongs to  # noqa: E501

        :return: The vault_section_guid of this VaultItem.  # noqa: E501
        :rtype: str
        """
        return self._vault_section_guid

    @vault_section_guid.setter
    def vault_section_guid(self, vault_section_guid):
        """Sets the vault_section_guid of this VaultItem.

        The unique identifier of the vault section that this vault item belongs to  # noqa: E501

        :param vault_section_guid: The vault_section_guid of this VaultItem.  # noqa: E501
        :type: str
        """
        if vault_section_guid is None:
            raise ValueError("Invalid value for `vault_section_guid`, must not be `None`")  # noqa: E501

        self._vault_section_guid = vault_section_guid

    @property
    def vault_item_type(self):
        """Gets the vault_item_type of this VaultItem.  # noqa: E501

        The vault item type  # noqa: E501

        :return: The vault_item_type of this VaultItem.  # noqa: E501
        :rtype: object
        """
        return self._vault_item_type

    @vault_item_type.setter
    def vault_item_type(self, vault_item_type):
        """Sets the vault_item_type of this VaultItem.

        The vault item type  # noqa: E501

        :param vault_item_type: The vault_item_type of this VaultItem.  # noqa: E501
        :type: object
        """
        if vault_item_type is None:
            raise ValueError("Invalid value for `vault_item_type`, must not be `None`")  # noqa: E501

        self._vault_item_type = vault_item_type

    @property
    def is_sensitive(self):
        """Gets the is_sensitive of this VaultItem.  # noqa: E501

        Whether or not the vault item is considered sensitive.   # noqa: E501

        :return: The is_sensitive of this VaultItem.  # noqa: E501
        :rtype: bool
        """
        return self._is_sensitive

    @is_sensitive.setter
    def is_sensitive(self, is_sensitive):
        """Sets the is_sensitive of this VaultItem.

        Whether or not the vault item is considered sensitive.   # noqa: E501

        :param is_sensitive: The is_sensitive of this VaultItem.  # noqa: E501
        :type: bool
        """
        if is_sensitive is None:
            raise ValueError("Invalid value for `is_sensitive`, must not be `None`")  # noqa: E501

        self._is_sensitive = is_sensitive

    @property
    def notes(self):
        """Gets the notes of this VaultItem.  # noqa: E501

        Notes about this vault item  # noqa: E501

        :return: The notes of this VaultItem.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this VaultItem.

        Notes about this vault item  # noqa: E501

        :param notes: The notes of this VaultItem.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def user_name(self):
        """Gets the user_name of this VaultItem.  # noqa: E501

        The UserName of a credentialset  # noqa: E501

        :return: The user_name of this VaultItem.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this VaultItem.

        The UserName of a credentialset  # noqa: E501

        :param user_name: The user_name of this VaultItem.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def password(self):
        """Gets the password of this VaultItem.  # noqa: E501

        The password associated with a credentialset  # noqa: E501

        :return: The password of this VaultItem.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this VaultItem.

        The password associated with a credentialset  # noqa: E501

        :param password: The password of this VaultItem.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def certificate_archive(self):
        """Gets the certificate_archive of this VaultItem.  # noqa: E501

        The certificate archive that is stored in this vault item, if applicable  # noqa: E501

        :return: The certificate_archive of this VaultItem.  # noqa: E501
        :rtype: object
        """
        return self._certificate_archive

    @certificate_archive.setter
    def certificate_archive(self, certificate_archive):
        """Sets the certificate_archive of this VaultItem.

        The certificate archive that is stored in this vault item, if applicable  # noqa: E501

        :param certificate_archive: The certificate_archive of this VaultItem.  # noqa: E501
        :type: object
        """

        self._certificate_archive = certificate_archive

    @property
    def file_info(self):
        """Gets the file_info of this VaultItem.  # noqa: E501

        The file info that is stored in this vault item, if applicable  # noqa: E501

        :return: The file_info of this VaultItem.  # noqa: E501
        :rtype: object
        """
        return self._file_info

    @file_info.setter
    def file_info(self, file_info):
        """Sets the file_info of this VaultItem.

        The file info that is stored in this vault item, if applicable  # noqa: E501

        :param file_info: The file_info of this VaultItem.  # noqa: E501
        :type: object
        """

        self._file_info = file_info

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VaultItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VaultItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
