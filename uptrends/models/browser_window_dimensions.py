# coding: utf-8

"""
    Uptrends API v4

    This document describes Uptrends API version 4. This Swagger environment also lets you execute API methods directly.  Please note that this is not a sandbox environment: these API methods operate directly on your actual Uptrends account.  For more information, please visit https://www.uptrends.com/api.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class BrowserWindowDimensions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_mobile': 'bool',
        'width': 'int',
        'height': 'int',
        'pixel_ratio': 'int',
        'mobile_device': 'str'
    }

    attribute_map = {
        'is_mobile': 'IsMobile',
        'width': 'Width',
        'height': 'Height',
        'pixel_ratio': 'PixelRatio',
        'mobile_device': 'MobileDevice'
    }

    def __init__(self, is_mobile=None, width=None, height=None, pixel_ratio=None, mobile_device=None):  # noqa: E501
        """BrowserWindowDimensions - a model defined in Swagger"""  # noqa: E501

        self._is_mobile = None
        self._width = None
        self._height = None
        self._pixel_ratio = None
        self._mobile_device = None
        self.discriminator = None

        self.is_mobile = is_mobile
        self.width = width
        self.height = height
        self.pixel_ratio = pixel_ratio
        if mobile_device is not None:
            self.mobile_device = mobile_device

    @property
    def is_mobile(self):
        """Gets the is_mobile of this BrowserWindowDimensions.  # noqa: E501


        :return: The is_mobile of this BrowserWindowDimensions.  # noqa: E501
        :rtype: bool
        """
        return self._is_mobile

    @is_mobile.setter
    def is_mobile(self, is_mobile):
        """Sets the is_mobile of this BrowserWindowDimensions.


        :param is_mobile: The is_mobile of this BrowserWindowDimensions.  # noqa: E501
        :type: bool
        """
        if is_mobile is None:
            raise ValueError("Invalid value for `is_mobile`, must not be `None`")  # noqa: E501

        self._is_mobile = is_mobile

    @property
    def width(self):
        """Gets the width of this BrowserWindowDimensions.  # noqa: E501


        :return: The width of this BrowserWindowDimensions.  # noqa: E501
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this BrowserWindowDimensions.


        :param width: The width of this BrowserWindowDimensions.  # noqa: E501
        :type: int
        """
        if width is None:
            raise ValueError("Invalid value for `width`, must not be `None`")  # noqa: E501

        self._width = width

    @property
    def height(self):
        """Gets the height of this BrowserWindowDimensions.  # noqa: E501


        :return: The height of this BrowserWindowDimensions.  # noqa: E501
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this BrowserWindowDimensions.


        :param height: The height of this BrowserWindowDimensions.  # noqa: E501
        :type: int
        """
        if height is None:
            raise ValueError("Invalid value for `height`, must not be `None`")  # noqa: E501

        self._height = height

    @property
    def pixel_ratio(self):
        """Gets the pixel_ratio of this BrowserWindowDimensions.  # noqa: E501


        :return: The pixel_ratio of this BrowserWindowDimensions.  # noqa: E501
        :rtype: int
        """
        return self._pixel_ratio

    @pixel_ratio.setter
    def pixel_ratio(self, pixel_ratio):
        """Sets the pixel_ratio of this BrowserWindowDimensions.


        :param pixel_ratio: The pixel_ratio of this BrowserWindowDimensions.  # noqa: E501
        :type: int
        """
        if pixel_ratio is None:
            raise ValueError("Invalid value for `pixel_ratio`, must not be `None`")  # noqa: E501

        self._pixel_ratio = pixel_ratio

    @property
    def mobile_device(self):
        """Gets the mobile_device of this BrowserWindowDimensions.  # noqa: E501


        :return: The mobile_device of this BrowserWindowDimensions.  # noqa: E501
        :rtype: str
        """
        return self._mobile_device

    @mobile_device.setter
    def mobile_device(self, mobile_device):
        """Sets the mobile_device of this BrowserWindowDimensions.


        :param mobile_device: The mobile_device of this BrowserWindowDimensions.  # noqa: E501
        :type: str
        """

        self._mobile_device = mobile_device

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BrowserWindowDimensions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BrowserWindowDimensions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
