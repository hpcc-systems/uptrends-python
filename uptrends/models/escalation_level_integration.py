# coding: utf-8

"""
    Uptrends API v4

    This document describes Uptrends API version 4. This Swagger environment also lets you execute API methods directly.  Please note that this is not a sandbox environment: these API methods operate directly on your actual Uptrends account.  For more information, please visit https://www.uptrends.com/api.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class EscalationLevelIntegration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'integration_guid': 'str',
        'extra_email_addresses': 'list[str]',
        'extra_email_addresses_specified': 'bool',
        'status_hub_service_list': 'list[IntegrationServiceMap]',
        'status_hub_service_list_specified': 'bool',
        'is_active': 'bool'
    }

    attribute_map = {
        'integration_guid': 'IntegrationGuid',
        'extra_email_addresses': 'ExtraEmailAddresses',
        'extra_email_addresses_specified': 'ExtraEmailAddressesSpecified',
        'status_hub_service_list': 'StatusHubServiceList',
        'status_hub_service_list_specified': 'StatusHubServiceListSpecified',
        'is_active': 'IsActive'
    }

    def __init__(self, integration_guid=None, extra_email_addresses=None, extra_email_addresses_specified=None, status_hub_service_list=None, status_hub_service_list_specified=None, is_active=None):  # noqa: E501
        """EscalationLevelIntegration - a model defined in Swagger"""  # noqa: E501

        self._integration_guid = None
        self._extra_email_addresses = None
        self._extra_email_addresses_specified = None
        self._status_hub_service_list = None
        self._status_hub_service_list_specified = None
        self._is_active = None
        self.discriminator = None

        if integration_guid is not None:
            self.integration_guid = integration_guid
        if extra_email_addresses is not None:
            self.extra_email_addresses = extra_email_addresses
        if extra_email_addresses_specified is not None:
            self.extra_email_addresses_specified = extra_email_addresses_specified
        if status_hub_service_list is not None:
            self.status_hub_service_list = status_hub_service_list
        if status_hub_service_list_specified is not None:
            self.status_hub_service_list_specified = status_hub_service_list_specified
        if is_active is not None:
            self.is_active = is_active

    @property
    def integration_guid(self):
        """Gets the integration_guid of this EscalationLevelIntegration.  # noqa: E501

        The unique key of this Integration.  # noqa: E501

        :return: The integration_guid of this EscalationLevelIntegration.  # noqa: E501
        :rtype: str
        """
        return self._integration_guid

    @integration_guid.setter
    def integration_guid(self, integration_guid):
        """Sets the integration_guid of this EscalationLevelIntegration.

        The unique key of this Integration.  # noqa: E501

        :param integration_guid: The integration_guid of this EscalationLevelIntegration.  # noqa: E501
        :type: str
        """

        self._integration_guid = integration_guid

    @property
    def extra_email_addresses(self):
        """Gets the extra_email_addresses of this EscalationLevelIntegration.  # noqa: E501

        Extra email addresses  # noqa: E501

        :return: The extra_email_addresses of this EscalationLevelIntegration.  # noqa: E501
        :rtype: list[str]
        """
        return self._extra_email_addresses

    @extra_email_addresses.setter
    def extra_email_addresses(self, extra_email_addresses):
        """Sets the extra_email_addresses of this EscalationLevelIntegration.

        Extra email addresses  # noqa: E501

        :param extra_email_addresses: The extra_email_addresses of this EscalationLevelIntegration.  # noqa: E501
        :type: list[str]
        """

        self._extra_email_addresses = extra_email_addresses

    @property
    def extra_email_addresses_specified(self):
        """Gets the extra_email_addresses_specified of this EscalationLevelIntegration.  # noqa: E501

        Specified Extra EmailAddresses For Patch request  # noqa: E501

        :return: The extra_email_addresses_specified of this EscalationLevelIntegration.  # noqa: E501
        :rtype: bool
        """
        return self._extra_email_addresses_specified

    @extra_email_addresses_specified.setter
    def extra_email_addresses_specified(self, extra_email_addresses_specified):
        """Sets the extra_email_addresses_specified of this EscalationLevelIntegration.

        Specified Extra EmailAddresses For Patch request  # noqa: E501

        :param extra_email_addresses_specified: The extra_email_addresses_specified of this EscalationLevelIntegration.  # noqa: E501
        :type: bool
        """

        self._extra_email_addresses_specified = extra_email_addresses_specified

    @property
    def status_hub_service_list(self):
        """Gets the status_hub_service_list of this EscalationLevelIntegration.  # noqa: E501

        StatusHub Service Mapping  # noqa: E501

        :return: The status_hub_service_list of this EscalationLevelIntegration.  # noqa: E501
        :rtype: list[IntegrationServiceMap]
        """
        return self._status_hub_service_list

    @status_hub_service_list.setter
    def status_hub_service_list(self, status_hub_service_list):
        """Sets the status_hub_service_list of this EscalationLevelIntegration.

        StatusHub Service Mapping  # noqa: E501

        :param status_hub_service_list: The status_hub_service_list of this EscalationLevelIntegration.  # noqa: E501
        :type: list[IntegrationServiceMap]
        """

        self._status_hub_service_list = status_hub_service_list

    @property
    def status_hub_service_list_specified(self):
        """Gets the status_hub_service_list_specified of this EscalationLevelIntegration.  # noqa: E501

        Specified StatusHubServiceList For Patch request  # noqa: E501

        :return: The status_hub_service_list_specified of this EscalationLevelIntegration.  # noqa: E501
        :rtype: bool
        """
        return self._status_hub_service_list_specified

    @status_hub_service_list_specified.setter
    def status_hub_service_list_specified(self, status_hub_service_list_specified):
        """Sets the status_hub_service_list_specified of this EscalationLevelIntegration.

        Specified StatusHubServiceList For Patch request  # noqa: E501

        :param status_hub_service_list_specified: The status_hub_service_list_specified of this EscalationLevelIntegration.  # noqa: E501
        :type: bool
        """

        self._status_hub_service_list_specified = status_hub_service_list_specified

    @property
    def is_active(self):
        """Gets the is_active of this EscalationLevelIntegration.  # noqa: E501

        Indicates whether this Integration is active.  # noqa: E501

        :return: The is_active of this EscalationLevelIntegration.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this EscalationLevelIntegration.

        Indicates whether this Integration is active.  # noqa: E501

        :param is_active: The is_active of this EscalationLevelIntegration.  # noqa: E501
        :type: bool
        """

        self._is_active = is_active

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EscalationLevelIntegration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EscalationLevelIntegration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
