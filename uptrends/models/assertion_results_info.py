# coding: utf-8

"""
    Uptrends API v4

    This document describes Uptrends API version 4. This Swagger environment also lets you execute API methods directly.  Please note that this is not a sandbox environment: these API methods operate directly on your actual Uptrends account.  For more information, please visit https://www.uptrends.com/api.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AssertionResultsInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'total_assertions': 'int',
        'passed_assertions': 'int',
        'assertion_infos': 'list[AssertionInfo]'
    }

    attribute_map = {
        'total_assertions': 'TotalAssertions',
        'passed_assertions': 'PassedAssertions',
        'assertion_infos': 'AssertionInfos'
    }

    def __init__(self, total_assertions=None, passed_assertions=None, assertion_infos=None):  # noqa: E501
        """AssertionResultsInfo - a model defined in Swagger"""  # noqa: E501

        self._total_assertions = None
        self._passed_assertions = None
        self._assertion_infos = None
        self.discriminator = None

        self.total_assertions = total_assertions
        self.passed_assertions = passed_assertions
        if assertion_infos is not None:
            self.assertion_infos = assertion_infos

    @property
    def total_assertions(self):
        """Gets the total_assertions of this AssertionResultsInfo.  # noqa: E501


        :return: The total_assertions of this AssertionResultsInfo.  # noqa: E501
        :rtype: int
        """
        return self._total_assertions

    @total_assertions.setter
    def total_assertions(self, total_assertions):
        """Sets the total_assertions of this AssertionResultsInfo.


        :param total_assertions: The total_assertions of this AssertionResultsInfo.  # noqa: E501
        :type: int
        """
        if total_assertions is None:
            raise ValueError("Invalid value for `total_assertions`, must not be `None`")  # noqa: E501

        self._total_assertions = total_assertions

    @property
    def passed_assertions(self):
        """Gets the passed_assertions of this AssertionResultsInfo.  # noqa: E501


        :return: The passed_assertions of this AssertionResultsInfo.  # noqa: E501
        :rtype: int
        """
        return self._passed_assertions

    @passed_assertions.setter
    def passed_assertions(self, passed_assertions):
        """Sets the passed_assertions of this AssertionResultsInfo.


        :param passed_assertions: The passed_assertions of this AssertionResultsInfo.  # noqa: E501
        :type: int
        """
        if passed_assertions is None:
            raise ValueError("Invalid value for `passed_assertions`, must not be `None`")  # noqa: E501

        self._passed_assertions = passed_assertions

    @property
    def assertion_infos(self):
        """Gets the assertion_infos of this AssertionResultsInfo.  # noqa: E501


        :return: The assertion_infos of this AssertionResultsInfo.  # noqa: E501
        :rtype: list[AssertionInfo]
        """
        return self._assertion_infos

    @assertion_infos.setter
    def assertion_infos(self, assertion_infos):
        """Sets the assertion_infos of this AssertionResultsInfo.


        :param assertion_infos: The assertion_infos of this AssertionResultsInfo.  # noqa: E501
        :type: list[AssertionInfo]
        """

        self._assertion_infos = assertion_infos

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AssertionResultsInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AssertionResultsInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
