# coding: utf-8

"""
    Uptrends API v4

    This document describes Uptrends API version 4. This Swagger environment also lets you execute API methods directly.  Please note that this is not a sandbox environment: these API methods operate directly on your actual Uptrends account.  For more information, please visit https://www.uptrends.com/api.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ExclusionPeriod(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'exclusion_period_id': 'int',
        'description': 'str',
        '_from': 'datetime',
        'until': 'datetime',
        'hash': 'str'
    }

    attribute_map = {
        'exclusion_period_id': 'ExclusionPeriodId',
        'description': 'Description',
        '_from': 'From',
        'until': 'Until',
        'hash': 'Hash'
    }

    def __init__(self, exclusion_period_id=None, description=None, _from=None, until=None, hash=None):  # noqa: E501
        """ExclusionPeriod - a model defined in Swagger"""  # noqa: E501

        self._exclusion_period_id = None
        self._description = None
        self.__from = None
        self._until = None
        self._hash = None
        self.discriminator = None

        if exclusion_period_id is not None:
            self.exclusion_period_id = exclusion_period_id
        if description is not None:
            self.description = description
        if _from is not None:
            self._from = _from
        if until is not None:
            self.until = until
        if hash is not None:
            self.hash = hash

    @property
    def exclusion_period_id(self):
        """Gets the exclusion_period_id of this ExclusionPeriod.  # noqa: E501


        :return: The exclusion_period_id of this ExclusionPeriod.  # noqa: E501
        :rtype: int
        """
        return self._exclusion_period_id

    @exclusion_period_id.setter
    def exclusion_period_id(self, exclusion_period_id):
        """Sets the exclusion_period_id of this ExclusionPeriod.


        :param exclusion_period_id: The exclusion_period_id of this ExclusionPeriod.  # noqa: E501
        :type: int
        """

        self._exclusion_period_id = exclusion_period_id

    @property
    def description(self):
        """Gets the description of this ExclusionPeriod.  # noqa: E501


        :return: The description of this ExclusionPeriod.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ExclusionPeriod.


        :param description: The description of this ExclusionPeriod.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def _from(self):
        """Gets the _from of this ExclusionPeriod.  # noqa: E501


        :return: The _from of this ExclusionPeriod.  # noqa: E501
        :rtype: datetime
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this ExclusionPeriod.


        :param _from: The _from of this ExclusionPeriod.  # noqa: E501
        :type: datetime
        """

        self.__from = _from

    @property
    def until(self):
        """Gets the until of this ExclusionPeriod.  # noqa: E501


        :return: The until of this ExclusionPeriod.  # noqa: E501
        :rtype: datetime
        """
        return self._until

    @until.setter
    def until(self, until):
        """Sets the until of this ExclusionPeriod.


        :param until: The until of this ExclusionPeriod.  # noqa: E501
        :type: datetime
        """

        self._until = until

    @property
    def hash(self):
        """Gets the hash of this ExclusionPeriod.  # noqa: E501


        :return: The hash of this ExclusionPeriod.  # noqa: E501
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this ExclusionPeriod.


        :param hash: The hash of this ExclusionPeriod.  # noqa: E501
        :type: str
        """

        self._hash = hash

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExclusionPeriod, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExclusionPeriod):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
