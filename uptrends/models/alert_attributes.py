# coding: utf-8

"""
    Uptrends API v4

    This document describes Uptrends API version 4. This Swagger environment also lets you execute API methods directly.  Please note that this is not a sandbox environment: these API methods operate directly on your actual Uptrends account.  For more information, please visit https://www.uptrends.com/api.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AlertAttributes(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'alert_type': 'object',
        'monitor_guid': 'str',
        'timestamp': 'datetime',
        'first_error': 'datetime',
        'monitor_check_id': 'int',
        'first_error_monitor_check_id': 'int',
        'error_description': 'str',
        'error_message': 'str',
        'incident_key': 'str'
    }

    attribute_map = {
        'alert_type': 'AlertType',
        'monitor_guid': 'MonitorGuid',
        'timestamp': 'Timestamp',
        'first_error': 'FirstError',
        'monitor_check_id': 'MonitorCheckId',
        'first_error_monitor_check_id': 'FirstErrorMonitorCheckId',
        'error_description': 'ErrorDescription',
        'error_message': 'ErrorMessage',
        'incident_key': 'IncidentKey'
    }

    def __init__(self, alert_type=None, monitor_guid=None, timestamp=None, first_error=None, monitor_check_id=None, first_error_monitor_check_id=None, error_description=None, error_message=None, incident_key=None):  # noqa: E501
        """AlertAttributes - a model defined in Swagger"""  # noqa: E501

        self._alert_type = None
        self._monitor_guid = None
        self._timestamp = None
        self._first_error = None
        self._monitor_check_id = None
        self._first_error_monitor_check_id = None
        self._error_description = None
        self._error_message = None
        self._incident_key = None
        self.discriminator = None

        self.alert_type = alert_type
        self.monitor_guid = monitor_guid
        self.timestamp = timestamp
        self.first_error = first_error
        self.monitor_check_id = monitor_check_id
        self.first_error_monitor_check_id = first_error_monitor_check_id
        if error_description is not None:
            self.error_description = error_description
        if error_message is not None:
            self.error_message = error_message
        if incident_key is not None:
            self.incident_key = incident_key

    @property
    def alert_type(self):
        """Gets the alert_type of this AlertAttributes.  # noqa: E501

        Alert type indicating if this was an Error or Ok alert.  # noqa: E501

        :return: The alert_type of this AlertAttributes.  # noqa: E501
        :rtype: object
        """
        return self._alert_type

    @alert_type.setter
    def alert_type(self, alert_type):
        """Sets the alert_type of this AlertAttributes.

        Alert type indicating if this was an Error or Ok alert.  # noqa: E501

        :param alert_type: The alert_type of this AlertAttributes.  # noqa: E501
        :type: object
        """
        if alert_type is None:
            raise ValueError("Invalid value for `alert_type`, must not be `None`")  # noqa: E501

        self._alert_type = alert_type

    @property
    def monitor_guid(self):
        """Gets the monitor_guid of this AlertAttributes.  # noqa: E501

        The monitor identifier.  # noqa: E501

        :return: The monitor_guid of this AlertAttributes.  # noqa: E501
        :rtype: str
        """
        return self._monitor_guid

    @monitor_guid.setter
    def monitor_guid(self, monitor_guid):
        """Sets the monitor_guid of this AlertAttributes.

        The monitor identifier.  # noqa: E501

        :param monitor_guid: The monitor_guid of this AlertAttributes.  # noqa: E501
        :type: str
        """
        if monitor_guid is None:
            raise ValueError("Invalid value for `monitor_guid`, must not be `None`")  # noqa: E501

        self._monitor_guid = monitor_guid

    @property
    def timestamp(self):
        """Gets the timestamp of this AlertAttributes.  # noqa: E501

        Date/time stamp of the alert.  # noqa: E501

        :return: The timestamp of this AlertAttributes.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this AlertAttributes.

        Date/time stamp of the alert.  # noqa: E501

        :param timestamp: The timestamp of this AlertAttributes.  # noqa: E501
        :type: datetime
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def first_error(self):
        """Gets the first_error of this AlertAttributes.  # noqa: E501

        Date/time stamp of the first monitor check.  # noqa: E501

        :return: The first_error of this AlertAttributes.  # noqa: E501
        :rtype: datetime
        """
        return self._first_error

    @first_error.setter
    def first_error(self, first_error):
        """Sets the first_error of this AlertAttributes.

        Date/time stamp of the first monitor check.  # noqa: E501

        :param first_error: The first_error of this AlertAttributes.  # noqa: E501
        :type: datetime
        """
        if first_error is None:
            raise ValueError("Invalid value for `first_error`, must not be `None`")  # noqa: E501

        self._first_error = first_error

    @property
    def monitor_check_id(self):
        """Gets the monitor_check_id of this AlertAttributes.  # noqa: E501

        The Id of the monitor check that triggered this alert.  # noqa: E501

        :return: The monitor_check_id of this AlertAttributes.  # noqa: E501
        :rtype: int
        """
        return self._monitor_check_id

    @monitor_check_id.setter
    def monitor_check_id(self, monitor_check_id):
        """Sets the monitor_check_id of this AlertAttributes.

        The Id of the monitor check that triggered this alert.  # noqa: E501

        :param monitor_check_id: The monitor_check_id of this AlertAttributes.  # noqa: E501
        :type: int
        """
        if monitor_check_id is None:
            raise ValueError("Invalid value for `monitor_check_id`, must not be `None`")  # noqa: E501

        self._monitor_check_id = monitor_check_id

    @property
    def first_error_monitor_check_id(self):
        """Gets the first_error_monitor_check_id of this AlertAttributes.  # noqa: E501

        The Id of the first monitor check error that led to this alert.  # noqa: E501

        :return: The first_error_monitor_check_id of this AlertAttributes.  # noqa: E501
        :rtype: int
        """
        return self._first_error_monitor_check_id

    @first_error_monitor_check_id.setter
    def first_error_monitor_check_id(self, first_error_monitor_check_id):
        """Sets the first_error_monitor_check_id of this AlertAttributes.

        The Id of the first monitor check error that led to this alert.  # noqa: E501

        :param first_error_monitor_check_id: The first_error_monitor_check_id of this AlertAttributes.  # noqa: E501
        :type: int
        """
        if first_error_monitor_check_id is None:
            raise ValueError("Invalid value for `first_error_monitor_check_id`, must not be `None`")  # noqa: E501

        self._first_error_monitor_check_id = first_error_monitor_check_id

    @property
    def error_description(self):
        """Gets the error_description of this AlertAttributes.  # noqa: E501

        A text value that describes the error that was found, or OK if no error was found.  # noqa: E501

        :return: The error_description of this AlertAttributes.  # noqa: E501
        :rtype: str
        """
        return self._error_description

    @error_description.setter
    def error_description(self, error_description):
        """Sets the error_description of this AlertAttributes.

        A text value that describes the error that was found, or OK if no error was found.  # noqa: E501

        :param error_description: The error_description of this AlertAttributes.  # noqa: E501
        :type: str
        """

        self._error_description = error_description

    @property
    def error_message(self):
        """Gets the error_message of this AlertAttributes.  # noqa: E501

        Any additional error information, if available.  # noqa: E501

        :return: The error_message of this AlertAttributes.  # noqa: E501
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this AlertAttributes.

        Any additional error information, if available.  # noqa: E501

        :param error_message: The error_message of this AlertAttributes.  # noqa: E501
        :type: str
        """

        self._error_message = error_message

    @property
    def incident_key(self):
        """Gets the incident_key of this AlertAttributes.  # noqa: E501

        The incident key of this alert.  # noqa: E501

        :return: The incident_key of this AlertAttributes.  # noqa: E501
        :rtype: str
        """
        return self._incident_key

    @incident_key.setter
    def incident_key(self, incident_key):
        """Sets the incident_key of this AlertAttributes.

        The incident key of this alert.  # noqa: E501

        :param incident_key: The incident_key of this AlertAttributes.  # noqa: E501
        :type: str
        """

        self._incident_key = incident_key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AlertAttributes, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AlertAttributes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
