# coding: utf-8

"""
    Uptrends API v4

    This document describes Uptrends API version 4. This Swagger environment also lets you execute API methods directly.  Please note that this is not a sandbox environment: these API methods operate directly on your actual Uptrends account.  For more information, please visit https://www.uptrends.com/api.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ScheduledReport(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'scheduled_report_guid': 'str',
        'hash': 'str',
        'dashboard_guid': 'str',
        'file_type': 'ScheduledReportFileType',
        'is_active': 'bool',
        'schedule': 'Schedule',
        'selected_period': 'PresetPeriodTypeWithExclusive',
        'internal_notes': 'str',
        'notes': 'str',
        'recipients': 'Recipients'
    }

    attribute_map = {
        'scheduled_report_guid': 'ScheduledReportGuid',
        'hash': 'Hash',
        'dashboard_guid': 'DashboardGuid',
        'file_type': 'FileType',
        'is_active': 'IsActive',
        'schedule': 'Schedule',
        'selected_period': 'SelectedPeriod',
        'internal_notes': 'InternalNotes',
        'notes': 'Notes',
        'recipients': 'Recipients'
    }

    def __init__(self, scheduled_report_guid=None, hash=None, dashboard_guid=None, file_type=None, is_active=None, schedule=None, selected_period=None, internal_notes=None, notes=None, recipients=None):  # noqa: E501
        """ScheduledReport - a model defined in Swagger"""  # noqa: E501

        self._scheduled_report_guid = None
        self._hash = None
        self._dashboard_guid = None
        self._file_type = None
        self._is_active = None
        self._schedule = None
        self._selected_period = None
        self._internal_notes = None
        self._notes = None
        self._recipients = None
        self.discriminator = None

        if scheduled_report_guid is not None:
            self.scheduled_report_guid = scheduled_report_guid
        if hash is not None:
            self.hash = hash
        if dashboard_guid is not None:
            self.dashboard_guid = dashboard_guid
        if file_type is not None:
            self.file_type = file_type
        if is_active is not None:
            self.is_active = is_active
        if schedule is not None:
            self.schedule = schedule
        if selected_period is not None:
            self.selected_period = selected_period
        if internal_notes is not None:
            self.internal_notes = internal_notes
        if notes is not None:
            self.notes = notes
        if recipients is not None:
            self.recipients = recipients

    @property
    def scheduled_report_guid(self):
        """Gets the scheduled_report_guid of this ScheduledReport.  # noqa: E501


        :return: The scheduled_report_guid of this ScheduledReport.  # noqa: E501
        :rtype: str
        """
        return self._scheduled_report_guid

    @scheduled_report_guid.setter
    def scheduled_report_guid(self, scheduled_report_guid):
        """Sets the scheduled_report_guid of this ScheduledReport.


        :param scheduled_report_guid: The scheduled_report_guid of this ScheduledReport.  # noqa: E501
        :type: str
        """

        self._scheduled_report_guid = scheduled_report_guid

    @property
    def hash(self):
        """Gets the hash of this ScheduledReport.  # noqa: E501


        :return: The hash of this ScheduledReport.  # noqa: E501
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this ScheduledReport.


        :param hash: The hash of this ScheduledReport.  # noqa: E501
        :type: str
        """

        self._hash = hash

    @property
    def dashboard_guid(self):
        """Gets the dashboard_guid of this ScheduledReport.  # noqa: E501


        :return: The dashboard_guid of this ScheduledReport.  # noqa: E501
        :rtype: str
        """
        return self._dashboard_guid

    @dashboard_guid.setter
    def dashboard_guid(self, dashboard_guid):
        """Sets the dashboard_guid of this ScheduledReport.


        :param dashboard_guid: The dashboard_guid of this ScheduledReport.  # noqa: E501
        :type: str
        """

        self._dashboard_guid = dashboard_guid

    @property
    def file_type(self):
        """Gets the file_type of this ScheduledReport.  # noqa: E501


        :return: The file_type of this ScheduledReport.  # noqa: E501
        :rtype: ScheduledReportFileType
        """
        return self._file_type

    @file_type.setter
    def file_type(self, file_type):
        """Sets the file_type of this ScheduledReport.


        :param file_type: The file_type of this ScheduledReport.  # noqa: E501
        :type: ScheduledReportFileType
        """

        self._file_type = file_type

    @property
    def is_active(self):
        """Gets the is_active of this ScheduledReport.  # noqa: E501


        :return: The is_active of this ScheduledReport.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this ScheduledReport.


        :param is_active: The is_active of this ScheduledReport.  # noqa: E501
        :type: bool
        """

        self._is_active = is_active

    @property
    def schedule(self):
        """Gets the schedule of this ScheduledReport.  # noqa: E501


        :return: The schedule of this ScheduledReport.  # noqa: E501
        :rtype: Schedule
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this ScheduledReport.


        :param schedule: The schedule of this ScheduledReport.  # noqa: E501
        :type: Schedule
        """

        self._schedule = schedule

    @property
    def selected_period(self):
        """Gets the selected_period of this ScheduledReport.  # noqa: E501


        :return: The selected_period of this ScheduledReport.  # noqa: E501
        :rtype: PresetPeriodTypeWithExclusive
        """
        return self._selected_period

    @selected_period.setter
    def selected_period(self, selected_period):
        """Sets the selected_period of this ScheduledReport.


        :param selected_period: The selected_period of this ScheduledReport.  # noqa: E501
        :type: PresetPeriodTypeWithExclusive
        """

        self._selected_period = selected_period

    @property
    def internal_notes(self):
        """Gets the internal_notes of this ScheduledReport.  # noqa: E501


        :return: The internal_notes of this ScheduledReport.  # noqa: E501
        :rtype: str
        """
        return self._internal_notes

    @internal_notes.setter
    def internal_notes(self, internal_notes):
        """Sets the internal_notes of this ScheduledReport.


        :param internal_notes: The internal_notes of this ScheduledReport.  # noqa: E501
        :type: str
        """

        self._internal_notes = internal_notes

    @property
    def notes(self):
        """Gets the notes of this ScheduledReport.  # noqa: E501


        :return: The notes of this ScheduledReport.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this ScheduledReport.


        :param notes: The notes of this ScheduledReport.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def recipients(self):
        """Gets the recipients of this ScheduledReport.  # noqa: E501


        :return: The recipients of this ScheduledReport.  # noqa: E501
        :rtype: Recipients
        """
        return self._recipients

    @recipients.setter
    def recipients(self, recipients):
        """Sets the recipients of this ScheduledReport.


        :param recipients: The recipients of this ScheduledReport.  # noqa: E501
        :type: Recipients
        """

        self._recipients = recipients

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ScheduledReport, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScheduledReport):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
