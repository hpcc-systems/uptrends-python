# coding: utf-8

"""
    Uptrends API v4

    This document describes Uptrends API version 4. This Swagger environment also lets you execute API methods directly.  Please note that this is not a sandbox environment: these API methods operate directly on your actual Uptrends account.  For more information, please visit https://www.uptrends.com/api.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class MonitorStatusAttributes(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'error_level': 'object',
        'last_check': 'datetime',
        'checkpoint_id': 'int',
        'error_description': 'str',
        'uptime_percentage': 'float',
        'error_code': 'int',
        'last_monitor_check_id': 'int'
    }

    attribute_map = {
        'error_level': 'ErrorLevel',
        'last_check': 'LastCheck',
        'checkpoint_id': 'CheckpointId',
        'error_description': 'ErrorDescription',
        'uptime_percentage': 'UptimePercentage',
        'error_code': 'ErrorCode',
        'last_monitor_check_id': 'LastMonitorCheckId'
    }

    def __init__(self, error_level=None, last_check=None, checkpoint_id=None, error_description=None, uptime_percentage=None, error_code=None, last_monitor_check_id=None):  # noqa: E501
        """MonitorStatusAttributes - a model defined in Swagger"""  # noqa: E501

        self._error_level = None
        self._last_check = None
        self._checkpoint_id = None
        self._error_description = None
        self._uptime_percentage = None
        self._error_code = None
        self._last_monitor_check_id = None
        self.discriminator = None

        self.error_level = error_level
        if last_check is not None:
            self.last_check = last_check
        self.checkpoint_id = checkpoint_id
        if error_description is not None:
            self.error_description = error_description
        self.uptime_percentage = uptime_percentage
        self.error_code = error_code
        if last_monitor_check_id is not None:
            self.last_monitor_check_id = last_monitor_check_id

    @property
    def error_level(self):
        """Gets the error_level of this MonitorStatusAttributes.  # noqa: E501

        The error level for the monitor status  # noqa: E501

        :return: The error_level of this MonitorStatusAttributes.  # noqa: E501
        :rtype: object
        """
        return self._error_level

    @error_level.setter
    def error_level(self, error_level):
        """Sets the error_level of this MonitorStatusAttributes.

        The error level for the monitor status  # noqa: E501

        :param error_level: The error_level of this MonitorStatusAttributes.  # noqa: E501
        :type: object
        """
        if error_level is None:
            raise ValueError("Invalid value for `error_level`, must not be `None`")  # noqa: E501

        self._error_level = error_level

    @property
    def last_check(self):
        """Gets the last_check of this MonitorStatusAttributes.  # noqa: E501

        Last checked timeStamp for this monitor  # noqa: E501

        :return: The last_check of this MonitorStatusAttributes.  # noqa: E501
        :rtype: datetime
        """
        return self._last_check

    @last_check.setter
    def last_check(self, last_check):
        """Sets the last_check of this MonitorStatusAttributes.

        Last checked timeStamp for this monitor  # noqa: E501

        :param last_check: The last_check of this MonitorStatusAttributes.  # noqa: E501
        :type: datetime
        """

        self._last_check = last_check

    @property
    def checkpoint_id(self):
        """Gets the checkpoint_id of this MonitorStatusAttributes.  # noqa: E501

        Checkpoint id for the monitor status  # noqa: E501

        :return: The checkpoint_id of this MonitorStatusAttributes.  # noqa: E501
        :rtype: int
        """
        return self._checkpoint_id

    @checkpoint_id.setter
    def checkpoint_id(self, checkpoint_id):
        """Sets the checkpoint_id of this MonitorStatusAttributes.

        Checkpoint id for the monitor status  # noqa: E501

        :param checkpoint_id: The checkpoint_id of this MonitorStatusAttributes.  # noqa: E501
        :type: int
        """
        if checkpoint_id is None:
            raise ValueError("Invalid value for `checkpoint_id`, must not be `None`")  # noqa: E501

        self._checkpoint_id = checkpoint_id

    @property
    def error_description(self):
        """Gets the error_description of this MonitorStatusAttributes.  # noqa: E501

        Error description for the monitor status  # noqa: E501

        :return: The error_description of this MonitorStatusAttributes.  # noqa: E501
        :rtype: str
        """
        return self._error_description

    @error_description.setter
    def error_description(self, error_description):
        """Sets the error_description of this MonitorStatusAttributes.

        Error description for the monitor status  # noqa: E501

        :param error_description: The error_description of this MonitorStatusAttributes.  # noqa: E501
        :type: str
        """

        self._error_description = error_description

    @property
    def uptime_percentage(self):
        """Gets the uptime_percentage of this MonitorStatusAttributes.  # noqa: E501

        Uptime percentage for the monitor status  # noqa: E501

        :return: The uptime_percentage of this MonitorStatusAttributes.  # noqa: E501
        :rtype: float
        """
        return self._uptime_percentage

    @uptime_percentage.setter
    def uptime_percentage(self, uptime_percentage):
        """Sets the uptime_percentage of this MonitorStatusAttributes.

        Uptime percentage for the monitor status  # noqa: E501

        :param uptime_percentage: The uptime_percentage of this MonitorStatusAttributes.  # noqa: E501
        :type: float
        """
        if uptime_percentage is None:
            raise ValueError("Invalid value for `uptime_percentage`, must not be `None`")  # noqa: E501

        self._uptime_percentage = uptime_percentage

    @property
    def error_code(self):
        """Gets the error_code of this MonitorStatusAttributes.  # noqa: E501

        Error code for the monitor status  # noqa: E501

        :return: The error_code of this MonitorStatusAttributes.  # noqa: E501
        :rtype: int
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this MonitorStatusAttributes.

        Error code for the monitor status  # noqa: E501

        :param error_code: The error_code of this MonitorStatusAttributes.  # noqa: E501
        :type: int
        """
        if error_code is None:
            raise ValueError("Invalid value for `error_code`, must not be `None`")  # noqa: E501

        self._error_code = error_code

    @property
    def last_monitor_check_id(self):
        """Gets the last_monitor_check_id of this MonitorStatusAttributes.  # noqa: E501

        Last monitor check id  # noqa: E501

        :return: The last_monitor_check_id of this MonitorStatusAttributes.  # noqa: E501
        :rtype: int
        """
        return self._last_monitor_check_id

    @last_monitor_check_id.setter
    def last_monitor_check_id(self, last_monitor_check_id):
        """Sets the last_monitor_check_id of this MonitorStatusAttributes.

        Last monitor check id  # noqa: E501

        :param last_monitor_check_id: The last_monitor_check_id of this MonitorStatusAttributes.  # noqa: E501
        :type: int
        """

        self._last_monitor_check_id = last_monitor_check_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MonitorStatusAttributes, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MonitorStatusAttributes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
